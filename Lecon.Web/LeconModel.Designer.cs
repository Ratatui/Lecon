//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.ComponentModel;
using System.Data.EntityClient;
using System.Data.Objects;
using System.Data.Objects.DataClasses;
using System.Linq;
using System.Runtime.Serialization;
using System.Xml.Serialization;

[assembly: EdmSchemaAttribute()]
#region EDM Relationship Metadata

[assembly: EdmRelationshipAttribute("LeconModel", "GPUAssembly", "GPU", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Lecon.Web.GPU), "Assembly", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Lecon.Web.Assembly), true)]
[assembly: EdmRelationshipAttribute("LeconModel", "MemoryAssembly", "Memory", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Lecon.Web.Memory), "Assembly", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Lecon.Web.Assembly), true)]
[assembly: EdmRelationshipAttribute("LeconModel", "HardDriveAssembly", "HardDrive", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Lecon.Web.HardDrive), "Assembly", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Lecon.Web.Assembly), true)]
[assembly: EdmRelationshipAttribute("LeconModel", "CPUAssembly", "CPU", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Lecon.Web.CPU), "Assembly", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Lecon.Web.Assembly), true)]
[assembly: EdmRelationshipAttribute("LeconModel", "CoolerAssembly", "Cooler", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Lecon.Web.Cooler), "Assembly", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Lecon.Web.Assembly), true)]
[assembly: EdmRelationshipAttribute("LeconModel", "PSUAssembly", "PSU", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Lecon.Web.PSU), "Assembly", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Lecon.Web.Assembly), true)]
[assembly: EdmRelationshipAttribute("LeconModel", "BodyAssembly", "Body", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Lecon.Web.Body), "Assembly", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Lecon.Web.Assembly), true)]
[assembly: EdmRelationshipAttribute("LeconModel", "ManufacturerDevice", "Manufacturer", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Lecon.Web.Manufacturer), "Device", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Lecon.Web.Device), true)]
[assembly: EdmRelationshipAttribute("LeconModel", "DeviceMotherboard", "Device", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Lecon.Web.Device), "Motherboard", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Lecon.Web.Motherboard), true)]
[assembly: EdmRelationshipAttribute("LeconModel", "DeviceHardDrive", "Device", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Lecon.Web.Device), "HardDrive", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Lecon.Web.HardDrive), true)]
[assembly: EdmRelationshipAttribute("LeconModel", "DevicePSU", "Device", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Lecon.Web.Device), "PSU", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Lecon.Web.PSU), true)]
[assembly: EdmRelationshipAttribute("LeconModel", "DeviceCooler", "Device", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Lecon.Web.Device), "Cooler", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Lecon.Web.Cooler), true)]
[assembly: EdmRelationshipAttribute("LeconModel", "DeviceBody", "Device", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Lecon.Web.Device), "Body", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Lecon.Web.Body), true)]
[assembly: EdmRelationshipAttribute("LeconModel", "DeviceMemory", "Device", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Lecon.Web.Device), "Memory", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Lecon.Web.Memory), true)]
[assembly: EdmRelationshipAttribute("LeconModel", "DeviceGPU", "Device", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Lecon.Web.Device), "GPU", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Lecon.Web.GPU), true)]
[assembly: EdmRelationshipAttribute("LeconModel", "DeviceCPU", "Device", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Lecon.Web.Device), "CPU", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Lecon.Web.CPU), true)]
[assembly: EdmRelationshipAttribute("LeconModel", "SocketCPU", "Socket", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Lecon.Web.Socket), "CPU", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Lecon.Web.CPU), true)]
[assembly: EdmRelationshipAttribute("LeconModel", "GPUCPU", "GPU", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(Lecon.Web.GPU), "CPU", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Lecon.Web.CPU), true)]
[assembly: EdmRelationshipAttribute("LeconModel", "SocketMotherboard", "Socket", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Lecon.Web.Socket), "Motherboard", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Lecon.Web.Motherboard), true)]
[assembly: EdmRelationshipAttribute("LeconModel", "FormFactorMotherboard", "FormFactor", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Lecon.Web.FormFactor), "Motherboard", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Lecon.Web.Motherboard), true)]
[assembly: EdmRelationshipAttribute("LeconModel", "FormFactorBody", "FormFactor", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Lecon.Web.FormFactor), "Body", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Lecon.Web.Body), true)]
[assembly: EdmRelationshipAttribute("LeconModel", "FormFactorPSU", "FormFactor", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Lecon.Web.FormFactor), "PSU", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Lecon.Web.PSU), true)]
[assembly: EdmRelationshipAttribute("LeconModel", "GPUMotherboard", "GPU", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(Lecon.Web.GPU), "Motherboard", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Lecon.Web.Motherboard), true)]
[assembly: EdmRelationshipAttribute("LeconModel", "ChipsetMotherboard", "Chipset", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Lecon.Web.Chipset), "Motherboard", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Lecon.Web.Motherboard), true)]
[assembly: EdmRelationshipAttribute("LeconModel", "CoolerBody", "Cooler", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(Lecon.Web.Cooler), "Body", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Lecon.Web.Body), true)]
[assembly: EdmRelationshipAttribute("LeconModel", "GraphicChipGPU", "GraphicChip", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Lecon.Web.GraphicChip), "GPU", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Lecon.Web.GPU), true)]
[assembly: EdmRelationshipAttribute("LeconModel", "PowerTypeCooler", "PowerType", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Lecon.Web.PowerType), "Cooler", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Lecon.Web.Cooler), true)]
[assembly: EdmRelationshipAttribute("LeconModel", "CoolerGPU", "Cooler", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Lecon.Web.Cooler), "GPU", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Lecon.Web.GPU), true)]
[assembly: EdmRelationshipAttribute("LeconModel", "DeviceTypeCooler", "DeviceType", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Lecon.Web.DeviceType), "Cooler", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Lecon.Web.Cooler), true)]
[assembly: EdmRelationshipAttribute("LeconModel", "MemoryTypeMotherboard", "MemoryType", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Lecon.Web.MemoryType), "Motherboard", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Lecon.Web.Motherboard), true)]
[assembly: EdmRelationshipAttribute("LeconModel", "MemoryTypeMemory", "MemoryType", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Lecon.Web.MemoryType), "Memory", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Lecon.Web.Memory), true)]
[assembly: EdmRelationshipAttribute("LeconModel", "PowerTypeHardDrive", "PowerType", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Lecon.Web.PowerType), "HardDrive", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Lecon.Web.HardDrive), true)]
[assembly: EdmRelationshipAttribute("LeconModel", "PowerTypePSU", "PowerType", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Lecon.Web.PowerType), "PSU", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Lecon.Web.PSU), true)]
[assembly: EdmRelationshipAttribute("LeconModel", "PowerTypeMotherboard", "PowerType", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Lecon.Web.PowerType), "Motherboard", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Lecon.Web.Motherboard), true)]
[assembly: EdmRelationshipAttribute("LeconModel", "MotherboardAssembly", "Motherboard", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Lecon.Web.Motherboard), "Assembly", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Lecon.Web.Assembly), true)]

#endregion

namespace Lecon.Web
{
    #region Contexts
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    public partial class LeconEntities : ObjectContext
    {
        #region Constructors
    
        /// <summary>
        /// Initializes a new LeconEntities object using the connection string found in the 'LeconEntities' section of the application configuration file.
        /// </summary>
        public LeconEntities() : base("name=LeconEntities", "LeconEntities")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        /// <summary>
        /// Initialize a new LeconEntities object.
        /// </summary>
        public LeconEntities(string connectionString) : base(connectionString, "LeconEntities")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        /// <summary>
        /// Initialize a new LeconEntities object.
        /// </summary>
        public LeconEntities(EntityConnection connection) : base(connection, "LeconEntities")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        #endregion
    
        #region Partial Methods
    
        partial void OnContextCreated();
    
        #endregion
    
        #region ObjectSet Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Assembly> Assemblys
        {
            get
            {
                if ((_Assemblys == null))
                {
                    _Assemblys = base.CreateObjectSet<Assembly>("Assemblys");
                }
                return _Assemblys;
            }
        }
        private ObjectSet<Assembly> _Assemblys;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Device> Devices
        {
            get
            {
                if ((_Devices == null))
                {
                    _Devices = base.CreateObjectSet<Device>("Devices");
                }
                return _Devices;
            }
        }
        private ObjectSet<Device> _Devices;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Manufacturer> Manufacturers
        {
            get
            {
                if ((_Manufacturers == null))
                {
                    _Manufacturers = base.CreateObjectSet<Manufacturer>("Manufacturers");
                }
                return _Manufacturers;
            }
        }
        private ObjectSet<Manufacturer> _Manufacturers;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<CPU> CPUs
        {
            get
            {
                if ((_CPUs == null))
                {
                    _CPUs = base.CreateObjectSet<CPU>("CPUs");
                }
                return _CPUs;
            }
        }
        private ObjectSet<CPU> _CPUs;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<GPU> GPUs
        {
            get
            {
                if ((_GPUs == null))
                {
                    _GPUs = base.CreateObjectSet<GPU>("GPUs");
                }
                return _GPUs;
            }
        }
        private ObjectSet<GPU> _GPUs;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Memory> Memorys
        {
            get
            {
                if ((_Memorys == null))
                {
                    _Memorys = base.CreateObjectSet<Memory>("Memorys");
                }
                return _Memorys;
            }
        }
        private ObjectSet<Memory> _Memorys;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Cooler> Coolers
        {
            get
            {
                if ((_Coolers == null))
                {
                    _Coolers = base.CreateObjectSet<Cooler>("Coolers");
                }
                return _Coolers;
            }
        }
        private ObjectSet<Cooler> _Coolers;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<PSU> PSUs
        {
            get
            {
                if ((_PSUs == null))
                {
                    _PSUs = base.CreateObjectSet<PSU>("PSUs");
                }
                return _PSUs;
            }
        }
        private ObjectSet<PSU> _PSUs;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<HardDrive> HardDrives
        {
            get
            {
                if ((_HardDrives == null))
                {
                    _HardDrives = base.CreateObjectSet<HardDrive>("HardDrives");
                }
                return _HardDrives;
            }
        }
        private ObjectSet<HardDrive> _HardDrives;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Socket> Sockets
        {
            get
            {
                if ((_Sockets == null))
                {
                    _Sockets = base.CreateObjectSet<Socket>("Sockets");
                }
                return _Sockets;
            }
        }
        private ObjectSet<Socket> _Sockets;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<MemoryType> MemoryTypes
        {
            get
            {
                if ((_MemoryTypes == null))
                {
                    _MemoryTypes = base.CreateObjectSet<MemoryType>("MemoryTypes");
                }
                return _MemoryTypes;
            }
        }
        private ObjectSet<MemoryType> _MemoryTypes;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<PowerType> PowerTypes
        {
            get
            {
                if ((_PowerTypes == null))
                {
                    _PowerTypes = base.CreateObjectSet<PowerType>("PowerTypes");
                }
                return _PowerTypes;
            }
        }
        private ObjectSet<PowerType> _PowerTypes;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Motherboard> Motherboards
        {
            get
            {
                if ((_Motherboards == null))
                {
                    _Motherboards = base.CreateObjectSet<Motherboard>("Motherboards");
                }
                return _Motherboards;
            }
        }
        private ObjectSet<Motherboard> _Motherboards;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<DeviceType> DeviceTypes
        {
            get
            {
                if ((_DeviceTypes == null))
                {
                    _DeviceTypes = base.CreateObjectSet<DeviceType>("DeviceTypes");
                }
                return _DeviceTypes;
            }
        }
        private ObjectSet<DeviceType> _DeviceTypes;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<FormFactor> FormFactors
        {
            get
            {
                if ((_FormFactors == null))
                {
                    _FormFactors = base.CreateObjectSet<FormFactor>("FormFactors");
                }
                return _FormFactors;
            }
        }
        private ObjectSet<FormFactor> _FormFactors;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Chipset> Chipsets
        {
            get
            {
                if ((_Chipsets == null))
                {
                    _Chipsets = base.CreateObjectSet<Chipset>("Chipsets");
                }
                return _Chipsets;
            }
        }
        private ObjectSet<Chipset> _Chipsets;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Body> Bodys
        {
            get
            {
                if ((_Bodys == null))
                {
                    _Bodys = base.CreateObjectSet<Body>("Bodys");
                }
                return _Bodys;
            }
        }
        private ObjectSet<Body> _Bodys;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<GraphicChip> GraphicChips
        {
            get
            {
                if ((_GraphicChips == null))
                {
                    _GraphicChips = base.CreateObjectSet<GraphicChip>("GraphicChips");
                }
                return _GraphicChips;
            }
        }
        private ObjectSet<GraphicChip> _GraphicChips;

        #endregion

        #region AddTo Methods
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Assemblys EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToAssemblys(Assembly assembly)
        {
            base.AddObject("Assemblys", assembly);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Devices EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToDevices(Device device)
        {
            base.AddObject("Devices", device);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Manufacturers EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToManufacturers(Manufacturer manufacturer)
        {
            base.AddObject("Manufacturers", manufacturer);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the CPUs EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToCPUs(CPU cPU)
        {
            base.AddObject("CPUs", cPU);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the GPUs EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToGPUs(GPU gPU)
        {
            base.AddObject("GPUs", gPU);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Memorys EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToMemorys(Memory memory)
        {
            base.AddObject("Memorys", memory);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Coolers EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToCoolers(Cooler cooler)
        {
            base.AddObject("Coolers", cooler);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the PSUs EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToPSUs(PSU pSU)
        {
            base.AddObject("PSUs", pSU);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the HardDrives EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToHardDrives(HardDrive hardDrive)
        {
            base.AddObject("HardDrives", hardDrive);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Sockets EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToSockets(Socket socket)
        {
            base.AddObject("Sockets", socket);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the MemoryTypes EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToMemoryTypes(MemoryType memoryType)
        {
            base.AddObject("MemoryTypes", memoryType);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the PowerTypes EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToPowerTypes(PowerType powerType)
        {
            base.AddObject("PowerTypes", powerType);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Motherboards EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToMotherboards(Motherboard motherboard)
        {
            base.AddObject("Motherboards", motherboard);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the DeviceTypes EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToDeviceTypes(DeviceType deviceType)
        {
            base.AddObject("DeviceTypes", deviceType);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the FormFactors EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToFormFactors(FormFactor formFactor)
        {
            base.AddObject("FormFactors", formFactor);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Chipsets EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToChipsets(Chipset chipset)
        {
            base.AddObject("Chipsets", chipset);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Bodys EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToBodys(Body body)
        {
            base.AddObject("Bodys", body);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the GraphicChips EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToGraphicChips(GraphicChip graphicChip)
        {
            base.AddObject("GraphicChips", graphicChip);
        }

        #endregion

        #region Function Imports
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="diagramname">No Metadata Documentation available.</param>
        /// <param name="owner_id">No Metadata Documentation available.</param>
        /// <param name="version">No Metadata Documentation available.</param>
        /// <param name="definition">No Metadata Documentation available.</param>
        public int sp_alterdiagram(global::System.String diagramname, Nullable<global::System.Int32> owner_id, Nullable<global::System.Int32> version, global::System.Byte[] definition)
        {
            ObjectParameter diagramnameParameter;
            if (diagramname != null)
            {
                diagramnameParameter = new ObjectParameter("diagramname", diagramname);
            }
            else
            {
                diagramnameParameter = new ObjectParameter("diagramname", typeof(global::System.String));
            }
    
            ObjectParameter owner_idParameter;
            if (owner_id.HasValue)
            {
                owner_idParameter = new ObjectParameter("owner_id", owner_id);
            }
            else
            {
                owner_idParameter = new ObjectParameter("owner_id", typeof(global::System.Int32));
            }
    
            ObjectParameter versionParameter;
            if (version.HasValue)
            {
                versionParameter = new ObjectParameter("version", version);
            }
            else
            {
                versionParameter = new ObjectParameter("version", typeof(global::System.Int32));
            }
    
            ObjectParameter definitionParameter;
            if (definition != null)
            {
                definitionParameter = new ObjectParameter("definition", definition);
            }
            else
            {
                definitionParameter = new ObjectParameter("definition", typeof(global::System.Byte[]));
            }
    
            return base.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="diagramname">No Metadata Documentation available.</param>
        /// <param name="owner_id">No Metadata Documentation available.</param>
        /// <param name="version">No Metadata Documentation available.</param>
        /// <param name="definition">No Metadata Documentation available.</param>
        public int sp_creatediagram(global::System.String diagramname, Nullable<global::System.Int32> owner_id, Nullable<global::System.Int32> version, global::System.Byte[] definition)
        {
            ObjectParameter diagramnameParameter;
            if (diagramname != null)
            {
                diagramnameParameter = new ObjectParameter("diagramname", diagramname);
            }
            else
            {
                diagramnameParameter = new ObjectParameter("diagramname", typeof(global::System.String));
            }
    
            ObjectParameter owner_idParameter;
            if (owner_id.HasValue)
            {
                owner_idParameter = new ObjectParameter("owner_id", owner_id);
            }
            else
            {
                owner_idParameter = new ObjectParameter("owner_id", typeof(global::System.Int32));
            }
    
            ObjectParameter versionParameter;
            if (version.HasValue)
            {
                versionParameter = new ObjectParameter("version", version);
            }
            else
            {
                versionParameter = new ObjectParameter("version", typeof(global::System.Int32));
            }
    
            ObjectParameter definitionParameter;
            if (definition != null)
            {
                definitionParameter = new ObjectParameter("definition", definition);
            }
            else
            {
                definitionParameter = new ObjectParameter("definition", typeof(global::System.Byte[]));
            }
    
            return base.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="diagramname">No Metadata Documentation available.</param>
        /// <param name="owner_id">No Metadata Documentation available.</param>
        public int sp_dropdiagram(global::System.String diagramname, Nullable<global::System.Int32> owner_id)
        {
            ObjectParameter diagramnameParameter;
            if (diagramname != null)
            {
                diagramnameParameter = new ObjectParameter("diagramname", diagramname);
            }
            else
            {
                diagramnameParameter = new ObjectParameter("diagramname", typeof(global::System.String));
            }
    
            ObjectParameter owner_idParameter;
            if (owner_id.HasValue)
            {
                owner_idParameter = new ObjectParameter("owner_id", owner_id);
            }
            else
            {
                owner_idParameter = new ObjectParameter("owner_id", typeof(global::System.Int32));
            }
    
            return base.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="diagramname">No Metadata Documentation available.</param>
        /// <param name="owner_id">No Metadata Documentation available.</param>
        public ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(global::System.String diagramname, Nullable<global::System.Int32> owner_id)
        {
            ObjectParameter diagramnameParameter;
            if (diagramname != null)
            {
                diagramnameParameter = new ObjectParameter("diagramname", diagramname);
            }
            else
            {
                diagramnameParameter = new ObjectParameter("diagramname", typeof(global::System.String));
            }
    
            ObjectParameter owner_idParameter;
            if (owner_id.HasValue)
            {
                owner_idParameter = new ObjectParameter("owner_id", owner_id);
            }
            else
            {
                owner_idParameter = new ObjectParameter("owner_id", typeof(global::System.Int32));
            }
    
            return base.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="diagramname">No Metadata Documentation available.</param>
        /// <param name="owner_id">No Metadata Documentation available.</param>
        public ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(global::System.String diagramname, Nullable<global::System.Int32> owner_id)
        {
            ObjectParameter diagramnameParameter;
            if (diagramname != null)
            {
                diagramnameParameter = new ObjectParameter("diagramname", diagramname);
            }
            else
            {
                diagramnameParameter = new ObjectParameter("diagramname", typeof(global::System.String));
            }
    
            ObjectParameter owner_idParameter;
            if (owner_id.HasValue)
            {
                owner_idParameter = new ObjectParameter("owner_id", owner_id);
            }
            else
            {
                owner_idParameter = new ObjectParameter("owner_id", typeof(global::System.Int32));
            }
    
            return base.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="diagramname">No Metadata Documentation available.</param>
        /// <param name="owner_id">No Metadata Documentation available.</param>
        /// <param name="new_diagramname">No Metadata Documentation available.</param>
        public int sp_renamediagram(global::System.String diagramname, Nullable<global::System.Int32> owner_id, global::System.String new_diagramname)
        {
            ObjectParameter diagramnameParameter;
            if (diagramname != null)
            {
                diagramnameParameter = new ObjectParameter("diagramname", diagramname);
            }
            else
            {
                diagramnameParameter = new ObjectParameter("diagramname", typeof(global::System.String));
            }
    
            ObjectParameter owner_idParameter;
            if (owner_id.HasValue)
            {
                owner_idParameter = new ObjectParameter("owner_id", owner_id);
            }
            else
            {
                owner_idParameter = new ObjectParameter("owner_id", typeof(global::System.Int32));
            }
    
            ObjectParameter new_diagramnameParameter;
            if (new_diagramname != null)
            {
                new_diagramnameParameter = new ObjectParameter("new_diagramname", new_diagramname);
            }
            else
            {
                new_diagramnameParameter = new ObjectParameter("new_diagramname", typeof(global::System.String));
            }
    
            return base.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public int sp_upgraddiagrams()
        {
            return base.ExecuteFunction("sp_upgraddiagrams");
        }

        #endregion

    }

    #endregion

    #region Entities
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="LeconModel", Name="Assembly")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Assembly : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Assembly object.
        /// </summary>
        /// <param name="id">Initial value of the Id property.</param>
        /// <param name="gPUId">Initial value of the GPUId property.</param>
        /// <param name="cPUId">Initial value of the CPUId property.</param>
        /// <param name="memoryId">Initial value of the MemoryId property.</param>
        /// <param name="motherBoardId">Initial value of the MotherBoardId property.</param>
        /// <param name="bodyId">Initial value of the BodyId property.</param>
        /// <param name="pSUId">Initial value of the PSUId property.</param>
        /// <param name="hardDriveId">Initial value of the HardDriveId property.</param>
        /// <param name="coolerId">Initial value of the CoolerId property.</param>
        public static Assembly CreateAssembly(global::System.Int32 id, global::System.Int32 gPUId, global::System.Int32 cPUId, global::System.Int32 memoryId, global::System.Int32 motherBoardId, global::System.Int32 bodyId, global::System.Int32 pSUId, global::System.Int32 hardDriveId, global::System.Int32 coolerId)
        {
            Assembly assembly = new Assembly();
            assembly.Id = id;
            assembly.GPUId = gPUId;
            assembly.CPUId = cPUId;
            assembly.MemoryId = memoryId;
            assembly.MotherBoardId = motherBoardId;
            assembly.BodyId = bodyId;
            assembly.PSUId = pSUId;
            assembly.HardDriveId = hardDriveId;
            assembly.CoolerId = coolerId;
            return assembly;
        }

        #endregion

        #region Simple Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Id
        {
            get
            {
                return _Id;
            }
            set
            {
                if (_Id != value)
                {
                    OnIdChanging(value);
                    ReportPropertyChanging("Id");
                    _Id = StructuralObject.SetValidValue(value, "Id");
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private global::System.Int32 _Id;
        partial void OnIdChanging(global::System.Int32 value);
        partial void OnIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 GPUId
        {
            get
            {
                return _GPUId;
            }
            set
            {
                OnGPUIdChanging(value);
                ReportPropertyChanging("GPUId");
                _GPUId = StructuralObject.SetValidValue(value, "GPUId");
                ReportPropertyChanged("GPUId");
                OnGPUIdChanged();
            }
        }
        private global::System.Int32 _GPUId;
        partial void OnGPUIdChanging(global::System.Int32 value);
        partial void OnGPUIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 CPUId
        {
            get
            {
                return _CPUId;
            }
            set
            {
                OnCPUIdChanging(value);
                ReportPropertyChanging("CPUId");
                _CPUId = StructuralObject.SetValidValue(value, "CPUId");
                ReportPropertyChanged("CPUId");
                OnCPUIdChanged();
            }
        }
        private global::System.Int32 _CPUId;
        partial void OnCPUIdChanging(global::System.Int32 value);
        partial void OnCPUIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 MemoryId
        {
            get
            {
                return _MemoryId;
            }
            set
            {
                OnMemoryIdChanging(value);
                ReportPropertyChanging("MemoryId");
                _MemoryId = StructuralObject.SetValidValue(value, "MemoryId");
                ReportPropertyChanged("MemoryId");
                OnMemoryIdChanged();
            }
        }
        private global::System.Int32 _MemoryId;
        partial void OnMemoryIdChanging(global::System.Int32 value);
        partial void OnMemoryIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 MotherBoardId
        {
            get
            {
                return _MotherBoardId;
            }
            set
            {
                OnMotherBoardIdChanging(value);
                ReportPropertyChanging("MotherBoardId");
                _MotherBoardId = StructuralObject.SetValidValue(value, "MotherBoardId");
                ReportPropertyChanged("MotherBoardId");
                OnMotherBoardIdChanged();
            }
        }
        private global::System.Int32 _MotherBoardId;
        partial void OnMotherBoardIdChanging(global::System.Int32 value);
        partial void OnMotherBoardIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 BodyId
        {
            get
            {
                return _BodyId;
            }
            set
            {
                OnBodyIdChanging(value);
                ReportPropertyChanging("BodyId");
                _BodyId = StructuralObject.SetValidValue(value, "BodyId");
                ReportPropertyChanged("BodyId");
                OnBodyIdChanged();
            }
        }
        private global::System.Int32 _BodyId;
        partial void OnBodyIdChanging(global::System.Int32 value);
        partial void OnBodyIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 PSUId
        {
            get
            {
                return _PSUId;
            }
            set
            {
                OnPSUIdChanging(value);
                ReportPropertyChanging("PSUId");
                _PSUId = StructuralObject.SetValidValue(value, "PSUId");
                ReportPropertyChanged("PSUId");
                OnPSUIdChanged();
            }
        }
        private global::System.Int32 _PSUId;
        partial void OnPSUIdChanging(global::System.Int32 value);
        partial void OnPSUIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 HardDriveId
        {
            get
            {
                return _HardDriveId;
            }
            set
            {
                OnHardDriveIdChanging(value);
                ReportPropertyChanging("HardDriveId");
                _HardDriveId = StructuralObject.SetValidValue(value, "HardDriveId");
                ReportPropertyChanged("HardDriveId");
                OnHardDriveIdChanged();
            }
        }
        private global::System.Int32 _HardDriveId;
        partial void OnHardDriveIdChanging(global::System.Int32 value);
        partial void OnHardDriveIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 CoolerId
        {
            get
            {
                return _CoolerId;
            }
            set
            {
                OnCoolerIdChanging(value);
                ReportPropertyChanging("CoolerId");
                _CoolerId = StructuralObject.SetValidValue(value, "CoolerId");
                ReportPropertyChanged("CoolerId");
                OnCoolerIdChanged();
            }
        }
        private global::System.Int32 _CoolerId;
        partial void OnCoolerIdChanging(global::System.Int32 value);
        partial void OnCoolerIdChanged();

        #endregion

        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("LeconModel", "GPUAssembly", "GPU")]
        public GPU GPU
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<GPU>("LeconModel.GPUAssembly", "GPU").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<GPU>("LeconModel.GPUAssembly", "GPU").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<GPU> GPUReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<GPU>("LeconModel.GPUAssembly", "GPU");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<GPU>("LeconModel.GPUAssembly", "GPU", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("LeconModel", "MemoryAssembly", "Memory")]
        public Memory Memory
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Memory>("LeconModel.MemoryAssembly", "Memory").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Memory>("LeconModel.MemoryAssembly", "Memory").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Memory> MemoryReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Memory>("LeconModel.MemoryAssembly", "Memory");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Memory>("LeconModel.MemoryAssembly", "Memory", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("LeconModel", "HardDriveAssembly", "HardDrive")]
        public HardDrive HardDrive
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<HardDrive>("LeconModel.HardDriveAssembly", "HardDrive").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<HardDrive>("LeconModel.HardDriveAssembly", "HardDrive").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<HardDrive> HardDriveReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<HardDrive>("LeconModel.HardDriveAssembly", "HardDrive");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<HardDrive>("LeconModel.HardDriveAssembly", "HardDrive", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("LeconModel", "CPUAssembly", "CPU")]
        public CPU CPU
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<CPU>("LeconModel.CPUAssembly", "CPU").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<CPU>("LeconModel.CPUAssembly", "CPU").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<CPU> CPUReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<CPU>("LeconModel.CPUAssembly", "CPU");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<CPU>("LeconModel.CPUAssembly", "CPU", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("LeconModel", "CoolerAssembly", "Cooler")]
        public Cooler Cooler
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Cooler>("LeconModel.CoolerAssembly", "Cooler").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Cooler>("LeconModel.CoolerAssembly", "Cooler").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Cooler> CoolerReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Cooler>("LeconModel.CoolerAssembly", "Cooler");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Cooler>("LeconModel.CoolerAssembly", "Cooler", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("LeconModel", "PSUAssembly", "PSU")]
        public PSU PSU
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<PSU>("LeconModel.PSUAssembly", "PSU").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<PSU>("LeconModel.PSUAssembly", "PSU").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<PSU> PSUReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<PSU>("LeconModel.PSUAssembly", "PSU");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<PSU>("LeconModel.PSUAssembly", "PSU", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("LeconModel", "BodyAssembly", "Body")]
        public Body Body
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Body>("LeconModel.BodyAssembly", "Body").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Body>("LeconModel.BodyAssembly", "Body").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Body> BodyReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Body>("LeconModel.BodyAssembly", "Body");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Body>("LeconModel.BodyAssembly", "Body", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("LeconModel", "MotherboardAssembly", "Motherboard")]
        public Motherboard Motherboard
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Motherboard>("LeconModel.MotherboardAssembly", "Motherboard").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Motherboard>("LeconModel.MotherboardAssembly", "Motherboard").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Motherboard> MotherboardReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Motherboard>("LeconModel.MotherboardAssembly", "Motherboard");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Motherboard>("LeconModel.MotherboardAssembly", "Motherboard", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="LeconModel", Name="Body")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Body : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Body object.
        /// </summary>
        /// <param name="id">Initial value of the Id property.</param>
        /// <param name="formFactorId">Initial value of the FormFactorId property.</param>
        /// <param name="deviceId">Initial value of the DeviceId property.</param>
        public static Body CreateBody(global::System.Int32 id, global::System.Int32 formFactorId, global::System.Int32 deviceId)
        {
            Body body = new Body();
            body.Id = id;
            body.FormFactorId = formFactorId;
            body.DeviceId = deviceId;
            return body;
        }

        #endregion

        #region Simple Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Id
        {
            get
            {
                return _Id;
            }
            set
            {
                if (_Id != value)
                {
                    OnIdChanging(value);
                    ReportPropertyChanging("Id");
                    _Id = StructuralObject.SetValidValue(value, "Id");
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private global::System.Int32 _Id;
        partial void OnIdChanging(global::System.Int32 value);
        partial void OnIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 FormFactorId
        {
            get
            {
                return _FormFactorId;
            }
            set
            {
                OnFormFactorIdChanging(value);
                ReportPropertyChanging("FormFactorId");
                _FormFactorId = StructuralObject.SetValidValue(value, "FormFactorId");
                ReportPropertyChanged("FormFactorId");
                OnFormFactorIdChanged();
            }
        }
        private global::System.Int32 _FormFactorId;
        partial void OnFormFactorIdChanging(global::System.Int32 value);
        partial void OnFormFactorIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> CoolerId
        {
            get
            {
                return _CoolerId;
            }
            set
            {
                OnCoolerIdChanging(value);
                ReportPropertyChanging("CoolerId");
                _CoolerId = StructuralObject.SetValidValue(value, "CoolerId");
                ReportPropertyChanged("CoolerId");
                OnCoolerIdChanged();
            }
        }
        private Nullable<global::System.Int32> _CoolerId;
        partial void OnCoolerIdChanging(Nullable<global::System.Int32> value);
        partial void OnCoolerIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 DeviceId
        {
            get
            {
                return _DeviceId;
            }
            set
            {
                OnDeviceIdChanging(value);
                ReportPropertyChanging("DeviceId");
                _DeviceId = StructuralObject.SetValidValue(value, "DeviceId");
                ReportPropertyChanged("DeviceId");
                OnDeviceIdChanged();
            }
        }
        private global::System.Int32 _DeviceId;
        partial void OnDeviceIdChanging(global::System.Int32 value);
        partial void OnDeviceIdChanged();

        #endregion

        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("LeconModel", "BodyAssembly", "Assembly")]
        public EntityCollection<Assembly> Assemblys
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Assembly>("LeconModel.BodyAssembly", "Assembly");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Assembly>("LeconModel.BodyAssembly", "Assembly", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("LeconModel", "DeviceBody", "Device")]
        public Device Device
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Device>("LeconModel.DeviceBody", "Device").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Device>("LeconModel.DeviceBody", "Device").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Device> DeviceReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Device>("LeconModel.DeviceBody", "Device");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Device>("LeconModel.DeviceBody", "Device", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("LeconModel", "FormFactorBody", "FormFactor")]
        public FormFactor FormFactor
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<FormFactor>("LeconModel.FormFactorBody", "FormFactor").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<FormFactor>("LeconModel.FormFactorBody", "FormFactor").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<FormFactor> FormFactorReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<FormFactor>("LeconModel.FormFactorBody", "FormFactor");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<FormFactor>("LeconModel.FormFactorBody", "FormFactor", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("LeconModel", "CoolerBody", "Cooler")]
        public Cooler Cooler
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Cooler>("LeconModel.CoolerBody", "Cooler").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Cooler>("LeconModel.CoolerBody", "Cooler").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Cooler> CoolerReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Cooler>("LeconModel.CoolerBody", "Cooler");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Cooler>("LeconModel.CoolerBody", "Cooler", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="LeconModel", Name="Chipset")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Chipset : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Chipset object.
        /// </summary>
        /// <param name="id">Initial value of the Id property.</param>
        /// <param name="name">Initial value of the Name property.</param>
        public static Chipset CreateChipset(global::System.Int32 id, global::System.String name)
        {
            Chipset chipset = new Chipset();
            chipset.Id = id;
            chipset.Name = name;
            return chipset;
        }

        #endregion

        #region Simple Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Id
        {
            get
            {
                return _Id;
            }
            set
            {
                if (_Id != value)
                {
                    OnIdChanging(value);
                    ReportPropertyChanging("Id");
                    _Id = StructuralObject.SetValidValue(value, "Id");
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private global::System.Int32 _Id;
        partial void OnIdChanging(global::System.Int32 value);
        partial void OnIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Name
        {
            get
            {
                return _Name;
            }
            set
            {
                OnNameChanging(value);
                ReportPropertyChanging("Name");
                _Name = StructuralObject.SetValidValue(value, false, "Name");
                ReportPropertyChanged("Name");
                OnNameChanged();
            }
        }
        private global::System.String _Name;
        partial void OnNameChanging(global::System.String value);
        partial void OnNameChanged();

        #endregion

        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("LeconModel", "ChipsetMotherboard", "Motherboard")]
        public EntityCollection<Motherboard> Motherboard
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Motherboard>("LeconModel.ChipsetMotherboard", "Motherboard");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Motherboard>("LeconModel.ChipsetMotherboard", "Motherboard", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="LeconModel", Name="Cooler")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Cooler : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Cooler object.
        /// </summary>
        /// <param name="id">Initial value of the Id property.</param>
        /// <param name="rotation">Initial value of the Rotation property.</param>
        /// <param name="size">Initial value of the Size property.</param>
        /// <param name="powerTypeId">Initial value of the PowerTypeId property.</param>
        /// <param name="deviceTypeId">Initial value of the DeviceTypeId property.</param>
        /// <param name="deviceId">Initial value of the DeviceId property.</param>
        public static Cooler CreateCooler(global::System.Int32 id, global::System.Int16 rotation, global::System.Int16 size, global::System.Int32 powerTypeId, global::System.Int32 deviceTypeId, global::System.Int32 deviceId)
        {
            Cooler cooler = new Cooler();
            cooler.Id = id;
            cooler.Rotation = rotation;
            cooler.Size = size;
            cooler.PowerTypeId = powerTypeId;
            cooler.DeviceTypeId = deviceTypeId;
            cooler.DeviceId = deviceId;
            return cooler;
        }

        #endregion

        #region Simple Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Id
        {
            get
            {
                return _Id;
            }
            set
            {
                if (_Id != value)
                {
                    OnIdChanging(value);
                    ReportPropertyChanging("Id");
                    _Id = StructuralObject.SetValidValue(value, "Id");
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private global::System.Int32 _Id;
        partial void OnIdChanging(global::System.Int32 value);
        partial void OnIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int16 Rotation
        {
            get
            {
                return _Rotation;
            }
            set
            {
                OnRotationChanging(value);
                ReportPropertyChanging("Rotation");
                _Rotation = StructuralObject.SetValidValue(value, "Rotation");
                ReportPropertyChanged("Rotation");
                OnRotationChanged();
            }
        }
        private global::System.Int16 _Rotation;
        partial void OnRotationChanging(global::System.Int16 value);
        partial void OnRotationChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int16 Size
        {
            get
            {
                return _Size;
            }
            set
            {
                OnSizeChanging(value);
                ReportPropertyChanging("Size");
                _Size = StructuralObject.SetValidValue(value, "Size");
                ReportPropertyChanged("Size");
                OnSizeChanged();
            }
        }
        private global::System.Int16 _Size;
        partial void OnSizeChanging(global::System.Int16 value);
        partial void OnSizeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 PowerTypeId
        {
            get
            {
                return _PowerTypeId;
            }
            set
            {
                OnPowerTypeIdChanging(value);
                ReportPropertyChanging("PowerTypeId");
                _PowerTypeId = StructuralObject.SetValidValue(value, "PowerTypeId");
                ReportPropertyChanged("PowerTypeId");
                OnPowerTypeIdChanged();
            }
        }
        private global::System.Int32 _PowerTypeId;
        partial void OnPowerTypeIdChanging(global::System.Int32 value);
        partial void OnPowerTypeIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 DeviceTypeId
        {
            get
            {
                return _DeviceTypeId;
            }
            set
            {
                OnDeviceTypeIdChanging(value);
                ReportPropertyChanging("DeviceTypeId");
                _DeviceTypeId = StructuralObject.SetValidValue(value, "DeviceTypeId");
                ReportPropertyChanged("DeviceTypeId");
                OnDeviceTypeIdChanged();
            }
        }
        private global::System.Int32 _DeviceTypeId;
        partial void OnDeviceTypeIdChanging(global::System.Int32 value);
        partial void OnDeviceTypeIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 DeviceId
        {
            get
            {
                return _DeviceId;
            }
            set
            {
                OnDeviceIdChanging(value);
                ReportPropertyChanging("DeviceId");
                _DeviceId = StructuralObject.SetValidValue(value, "DeviceId");
                ReportPropertyChanged("DeviceId");
                OnDeviceIdChanged();
            }
        }
        private global::System.Int32 _DeviceId;
        partial void OnDeviceIdChanging(global::System.Int32 value);
        partial void OnDeviceIdChanged();

        #endregion

        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("LeconModel", "CoolerAssembly", "Assembly")]
        public EntityCollection<Assembly> Assembly
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Assembly>("LeconModel.CoolerAssembly", "Assembly");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Assembly>("LeconModel.CoolerAssembly", "Assembly", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("LeconModel", "DeviceCooler", "Device")]
        public Device Device
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Device>("LeconModel.DeviceCooler", "Device").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Device>("LeconModel.DeviceCooler", "Device").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Device> DeviceReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Device>("LeconModel.DeviceCooler", "Device");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Device>("LeconModel.DeviceCooler", "Device", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("LeconModel", "CoolerBody", "Body")]
        public EntityCollection<Body> Bodys
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Body>("LeconModel.CoolerBody", "Body");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Body>("LeconModel.CoolerBody", "Body", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("LeconModel", "PowerTypeCooler", "PowerType")]
        public PowerType PowerType
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<PowerType>("LeconModel.PowerTypeCooler", "PowerType").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<PowerType>("LeconModel.PowerTypeCooler", "PowerType").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<PowerType> PowerTypeReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<PowerType>("LeconModel.PowerTypeCooler", "PowerType");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<PowerType>("LeconModel.PowerTypeCooler", "PowerType", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("LeconModel", "CoolerGPU", "GPU")]
        public EntityCollection<GPU> GPUs
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<GPU>("LeconModel.CoolerGPU", "GPU");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<GPU>("LeconModel.CoolerGPU", "GPU", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("LeconModel", "DeviceTypeCooler", "DeviceType")]
        public DeviceType DeviceType
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<DeviceType>("LeconModel.DeviceTypeCooler", "DeviceType").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<DeviceType>("LeconModel.DeviceTypeCooler", "DeviceType").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<DeviceType> DeviceTypeReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<DeviceType>("LeconModel.DeviceTypeCooler", "DeviceType");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<DeviceType>("LeconModel.DeviceTypeCooler", "DeviceType", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="LeconModel", Name="CPU")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class CPU : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new CPU object.
        /// </summary>
        /// <param name="id">Initial value of the Id property.</param>
        /// <param name="frequency">Initial value of the Frequency property.</param>
        /// <param name="сacheOne">Initial value of the СacheOne property.</param>
        /// <param name="сacheTwo">Initial value of the СacheTwo property.</param>
        /// <param name="сacheThree">Initial value of the СacheThree property.</param>
        /// <param name="cores">Initial value of the Cores property.</param>
        /// <param name="socketId">Initial value of the SocketId property.</param>
        /// <param name="deviceId">Initial value of the DeviceId property.</param>
        public static CPU CreateCPU(global::System.Int32 id, global::System.Double frequency, global::System.Int16 сacheOne, global::System.Int16 сacheTwo, global::System.Int16 сacheThree, global::System.Int16 cores, global::System.Int32 socketId, global::System.Int32 deviceId)
        {
            CPU cPU = new CPU();
            cPU.Id = id;
            cPU.Frequency = frequency;
            cPU.СacheOne = сacheOne;
            cPU.СacheTwo = сacheTwo;
            cPU.СacheThree = сacheThree;
            cPU.Cores = cores;
            cPU.SocketId = socketId;
            cPU.DeviceId = deviceId;
            return cPU;
        }

        #endregion

        #region Simple Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Id
        {
            get
            {
                return _Id;
            }
            set
            {
                if (_Id != value)
                {
                    OnIdChanging(value);
                    ReportPropertyChanging("Id");
                    _Id = StructuralObject.SetValidValue(value, "Id");
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private global::System.Int32 _Id;
        partial void OnIdChanging(global::System.Int32 value);
        partial void OnIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Double Frequency
        {
            get
            {
                return _Frequency;
            }
            set
            {
                OnFrequencyChanging(value);
                ReportPropertyChanging("Frequency");
                _Frequency = StructuralObject.SetValidValue(value, "Frequency");
                ReportPropertyChanged("Frequency");
                OnFrequencyChanged();
            }
        }
        private global::System.Double _Frequency;
        partial void OnFrequencyChanging(global::System.Double value);
        partial void OnFrequencyChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int16 СacheOne
        {
            get
            {
                return _СacheOne;
            }
            set
            {
                OnСacheOneChanging(value);
                ReportPropertyChanging("СacheOne");
                _СacheOne = StructuralObject.SetValidValue(value, "СacheOne");
                ReportPropertyChanged("СacheOne");
                OnСacheOneChanged();
            }
        }
        private global::System.Int16 _СacheOne;
        partial void OnСacheOneChanging(global::System.Int16 value);
        partial void OnСacheOneChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int16 СacheTwo
        {
            get
            {
                return _СacheTwo;
            }
            set
            {
                OnСacheTwoChanging(value);
                ReportPropertyChanging("СacheTwo");
                _СacheTwo = StructuralObject.SetValidValue(value, "СacheTwo");
                ReportPropertyChanged("СacheTwo");
                OnСacheTwoChanged();
            }
        }
        private global::System.Int16 _СacheTwo;
        partial void OnСacheTwoChanging(global::System.Int16 value);
        partial void OnСacheTwoChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int16 СacheThree
        {
            get
            {
                return _СacheThree;
            }
            set
            {
                OnСacheThreeChanging(value);
                ReportPropertyChanging("СacheThree");
                _СacheThree = StructuralObject.SetValidValue(value, "СacheThree");
                ReportPropertyChanged("СacheThree");
                OnСacheThreeChanged();
            }
        }
        private global::System.Int16 _СacheThree;
        partial void OnСacheThreeChanging(global::System.Int16 value);
        partial void OnСacheThreeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int16 Cores
        {
            get
            {
                return _Cores;
            }
            set
            {
                OnCoresChanging(value);
                ReportPropertyChanging("Cores");
                _Cores = StructuralObject.SetValidValue(value, "Cores");
                ReportPropertyChanged("Cores");
                OnCoresChanged();
            }
        }
        private global::System.Int16 _Cores;
        partial void OnCoresChanging(global::System.Int16 value);
        partial void OnCoresChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 SocketId
        {
            get
            {
                return _SocketId;
            }
            set
            {
                OnSocketIdChanging(value);
                ReportPropertyChanging("SocketId");
                _SocketId = StructuralObject.SetValidValue(value, "SocketId");
                ReportPropertyChanged("SocketId");
                OnSocketIdChanged();
            }
        }
        private global::System.Int32 _SocketId;
        partial void OnSocketIdChanging(global::System.Int32 value);
        partial void OnSocketIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 DeviceId
        {
            get
            {
                return _DeviceId;
            }
            set
            {
                OnDeviceIdChanging(value);
                ReportPropertyChanging("DeviceId");
                _DeviceId = StructuralObject.SetValidValue(value, "DeviceId");
                ReportPropertyChanged("DeviceId");
                OnDeviceIdChanged();
            }
        }
        private global::System.Int32 _DeviceId;
        partial void OnDeviceIdChanging(global::System.Int32 value);
        partial void OnDeviceIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> GPUId
        {
            get
            {
                return _GPUId;
            }
            set
            {
                OnGPUIdChanging(value);
                ReportPropertyChanging("GPUId");
                _GPUId = StructuralObject.SetValidValue(value, "GPUId");
                ReportPropertyChanged("GPUId");
                OnGPUIdChanged();
            }
        }
        private Nullable<global::System.Int32> _GPUId;
        partial void OnGPUIdChanging(Nullable<global::System.Int32> value);
        partial void OnGPUIdChanged();

        #endregion

        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("LeconModel", "CPUAssembly", "Assembly")]
        public EntityCollection<Assembly> Assemblys
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Assembly>("LeconModel.CPUAssembly", "Assembly");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Assembly>("LeconModel.CPUAssembly", "Assembly", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("LeconModel", "DeviceCPU", "Device")]
        public Device Device
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Device>("LeconModel.DeviceCPU", "Device").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Device>("LeconModel.DeviceCPU", "Device").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Device> DeviceReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Device>("LeconModel.DeviceCPU", "Device");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Device>("LeconModel.DeviceCPU", "Device", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("LeconModel", "SocketCPU", "Socket")]
        public Socket Socket
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Socket>("LeconModel.SocketCPU", "Socket").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Socket>("LeconModel.SocketCPU", "Socket").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Socket> SocketReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Socket>("LeconModel.SocketCPU", "Socket");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Socket>("LeconModel.SocketCPU", "Socket", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("LeconModel", "GPUCPU", "GPU")]
        public GPU GPU
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<GPU>("LeconModel.GPUCPU", "GPU").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<GPU>("LeconModel.GPUCPU", "GPU").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<GPU> GPUReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<GPU>("LeconModel.GPUCPU", "GPU");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<GPU>("LeconModel.GPUCPU", "GPU", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="LeconModel", Name="Device")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Device : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Device object.
        /// </summary>
        /// <param name="model">Initial value of the Model property.</param>
        /// <param name="price">Initial value of the Price property.</param>
        /// <param name="id">Initial value of the Id property.</param>
        /// <param name="manufacturerId">Initial value of the ManufacturerId property.</param>
        public static Device CreateDevice(global::System.String model, global::System.Double price, global::System.Int32 id, global::System.Int32 manufacturerId)
        {
            Device device = new Device();
            device.Model = model;
            device.Price = price;
            device.Id = id;
            device.ManufacturerId = manufacturerId;
            return device;
        }

        #endregion

        #region Simple Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Model
        {
            get
            {
                return _Model;
            }
            set
            {
                OnModelChanging(value);
                ReportPropertyChanging("Model");
                _Model = StructuralObject.SetValidValue(value, false, "Model");
                ReportPropertyChanged("Model");
                OnModelChanged();
            }
        }
        private global::System.String _Model;
        partial void OnModelChanging(global::System.String value);
        partial void OnModelChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Double Price
        {
            get
            {
                return _Price;
            }
            set
            {
                OnPriceChanging(value);
                ReportPropertyChanging("Price");
                _Price = StructuralObject.SetValidValue(value, "Price");
                ReportPropertyChanged("Price");
                OnPriceChanged();
            }
        }
        private global::System.Double _Price;
        partial void OnPriceChanging(global::System.Double value);
        partial void OnPriceChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Id
        {
            get
            {
                return _Id;
            }
            set
            {
                if (_Id != value)
                {
                    OnIdChanging(value);
                    ReportPropertyChanging("Id");
                    _Id = StructuralObject.SetValidValue(value, "Id");
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private global::System.Int32 _Id;
        partial void OnIdChanging(global::System.Int32 value);
        partial void OnIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 ManufacturerId
        {
            get
            {
                return _ManufacturerId;
            }
            set
            {
                OnManufacturerIdChanging(value);
                ReportPropertyChanging("ManufacturerId");
                _ManufacturerId = StructuralObject.SetValidValue(value, "ManufacturerId");
                ReportPropertyChanged("ManufacturerId");
                OnManufacturerIdChanged();
            }
        }
        private global::System.Int32 _ManufacturerId;
        partial void OnManufacturerIdChanging(global::System.Int32 value);
        partial void OnManufacturerIdChanged();

        #endregion

        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("LeconModel", "ManufacturerDevice", "Manufacturer")]
        public Manufacturer Manufacturer
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Manufacturer>("LeconModel.ManufacturerDevice", "Manufacturer").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Manufacturer>("LeconModel.ManufacturerDevice", "Manufacturer").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Manufacturer> ManufacturerReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Manufacturer>("LeconModel.ManufacturerDevice", "Manufacturer");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Manufacturer>("LeconModel.ManufacturerDevice", "Manufacturer", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("LeconModel", "DeviceMotherboard", "Motherboard")]
        public EntityCollection<Motherboard> Motherboards
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Motherboard>("LeconModel.DeviceMotherboard", "Motherboard");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Motherboard>("LeconModel.DeviceMotherboard", "Motherboard", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("LeconModel", "DeviceHardDrive", "HardDrive")]
        public EntityCollection<HardDrive> HardDrives
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<HardDrive>("LeconModel.DeviceHardDrive", "HardDrive");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<HardDrive>("LeconModel.DeviceHardDrive", "HardDrive", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("LeconModel", "DevicePSU", "PSU")]
        public EntityCollection<PSU> PSUs
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<PSU>("LeconModel.DevicePSU", "PSU");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<PSU>("LeconModel.DevicePSU", "PSU", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("LeconModel", "DeviceCooler", "Cooler")]
        public EntityCollection<Cooler> Coolers
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Cooler>("LeconModel.DeviceCooler", "Cooler");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Cooler>("LeconModel.DeviceCooler", "Cooler", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("LeconModel", "DeviceBody", "Body")]
        public EntityCollection<Body> Bodys
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Body>("LeconModel.DeviceBody", "Body");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Body>("LeconModel.DeviceBody", "Body", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("LeconModel", "DeviceMemory", "Memory")]
        public EntityCollection<Memory> Memorys
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Memory>("LeconModel.DeviceMemory", "Memory");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Memory>("LeconModel.DeviceMemory", "Memory", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("LeconModel", "DeviceGPU", "GPU")]
        public EntityCollection<GPU> GPUs
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<GPU>("LeconModel.DeviceGPU", "GPU");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<GPU>("LeconModel.DeviceGPU", "GPU", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("LeconModel", "DeviceCPU", "CPU")]
        public EntityCollection<CPU> CPUs
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<CPU>("LeconModel.DeviceCPU", "CPU");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<CPU>("LeconModel.DeviceCPU", "CPU", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="LeconModel", Name="DeviceType")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class DeviceType : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new DeviceType object.
        /// </summary>
        /// <param name="id">Initial value of the Id property.</param>
        /// <param name="name">Initial value of the Name property.</param>
        public static DeviceType CreateDeviceType(global::System.Int32 id, global::System.String name)
        {
            DeviceType deviceType = new DeviceType();
            deviceType.Id = id;
            deviceType.Name = name;
            return deviceType;
        }

        #endregion

        #region Simple Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Id
        {
            get
            {
                return _Id;
            }
            set
            {
                if (_Id != value)
                {
                    OnIdChanging(value);
                    ReportPropertyChanging("Id");
                    _Id = StructuralObject.SetValidValue(value, "Id");
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private global::System.Int32 _Id;
        partial void OnIdChanging(global::System.Int32 value);
        partial void OnIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Name
        {
            get
            {
                return _Name;
            }
            set
            {
                OnNameChanging(value);
                ReportPropertyChanging("Name");
                _Name = StructuralObject.SetValidValue(value, false, "Name");
                ReportPropertyChanged("Name");
                OnNameChanged();
            }
        }
        private global::System.String _Name;
        partial void OnNameChanging(global::System.String value);
        partial void OnNameChanged();

        #endregion

        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("LeconModel", "DeviceTypeCooler", "Cooler")]
        public EntityCollection<Cooler> Coolers
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Cooler>("LeconModel.DeviceTypeCooler", "Cooler");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Cooler>("LeconModel.DeviceTypeCooler", "Cooler", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="LeconModel", Name="FormFactor")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class FormFactor : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new FormFactor object.
        /// </summary>
        /// <param name="id">Initial value of the Id property.</param>
        /// <param name="name">Initial value of the Name property.</param>
        public static FormFactor CreateFormFactor(global::System.Int32 id, global::System.String name)
        {
            FormFactor formFactor = new FormFactor();
            formFactor.Id = id;
            formFactor.Name = name;
            return formFactor;
        }

        #endregion

        #region Simple Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Id
        {
            get
            {
                return _Id;
            }
            set
            {
                if (_Id != value)
                {
                    OnIdChanging(value);
                    ReportPropertyChanging("Id");
                    _Id = StructuralObject.SetValidValue(value, "Id");
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private global::System.Int32 _Id;
        partial void OnIdChanging(global::System.Int32 value);
        partial void OnIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Name
        {
            get
            {
                return _Name;
            }
            set
            {
                OnNameChanging(value);
                ReportPropertyChanging("Name");
                _Name = StructuralObject.SetValidValue(value, false, "Name");
                ReportPropertyChanged("Name");
                OnNameChanged();
            }
        }
        private global::System.String _Name;
        partial void OnNameChanging(global::System.String value);
        partial void OnNameChanged();

        #endregion

        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("LeconModel", "FormFactorMotherboard", "Motherboard")]
        public EntityCollection<Motherboard> Motherboards
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Motherboard>("LeconModel.FormFactorMotherboard", "Motherboard");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Motherboard>("LeconModel.FormFactorMotherboard", "Motherboard", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("LeconModel", "FormFactorBody", "Body")]
        public EntityCollection<Body> Bodys
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Body>("LeconModel.FormFactorBody", "Body");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Body>("LeconModel.FormFactorBody", "Body", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("LeconModel", "FormFactorPSU", "PSU")]
        public EntityCollection<PSU> PSUs
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<PSU>("LeconModel.FormFactorPSU", "PSU");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<PSU>("LeconModel.FormFactorPSU", "PSU", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="LeconModel", Name="GPU")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class GPU : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new GPU object.
        /// </summary>
        /// <param name="id">Initial value of the Id property.</param>
        /// <param name="size">Initial value of the Size property.</param>
        /// <param name="power">Initial value of the Power property.</param>
        /// <param name="additionalPower">Initial value of the AdditionalPower property.</param>
        /// <param name="graphicChipId">Initial value of the GraphicChipId property.</param>
        /// <param name="coolerId">Initial value of the CoolerId property.</param>
        /// <param name="deviceId">Initial value of the DeviceId property.</param>
        public static GPU CreateGPU(global::System.Int32 id, global::System.Int16 size, global::System.Int16 power, global::System.Boolean additionalPower, global::System.Int32 graphicChipId, global::System.Int32 coolerId, global::System.Int32 deviceId)
        {
            GPU gPU = new GPU();
            gPU.Id = id;
            gPU.Size = size;
            gPU.Power = power;
            gPU.AdditionalPower = additionalPower;
            gPU.GraphicChipId = graphicChipId;
            gPU.CoolerId = coolerId;
            gPU.DeviceId = deviceId;
            return gPU;
        }

        #endregion

        #region Simple Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Id
        {
            get
            {
                return _Id;
            }
            set
            {
                if (_Id != value)
                {
                    OnIdChanging(value);
                    ReportPropertyChanging("Id");
                    _Id = StructuralObject.SetValidValue(value, "Id");
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private global::System.Int32 _Id;
        partial void OnIdChanging(global::System.Int32 value);
        partial void OnIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int16 Size
        {
            get
            {
                return _Size;
            }
            set
            {
                OnSizeChanging(value);
                ReportPropertyChanging("Size");
                _Size = StructuralObject.SetValidValue(value, "Size");
                ReportPropertyChanged("Size");
                OnSizeChanged();
            }
        }
        private global::System.Int16 _Size;
        partial void OnSizeChanging(global::System.Int16 value);
        partial void OnSizeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int16 Power
        {
            get
            {
                return _Power;
            }
            set
            {
                OnPowerChanging(value);
                ReportPropertyChanging("Power");
                _Power = StructuralObject.SetValidValue(value, "Power");
                ReportPropertyChanged("Power");
                OnPowerChanged();
            }
        }
        private global::System.Int16 _Power;
        partial void OnPowerChanging(global::System.Int16 value);
        partial void OnPowerChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Boolean AdditionalPower
        {
            get
            {
                return _AdditionalPower;
            }
            set
            {
                OnAdditionalPowerChanging(value);
                ReportPropertyChanging("AdditionalPower");
                _AdditionalPower = StructuralObject.SetValidValue(value, "AdditionalPower");
                ReportPropertyChanged("AdditionalPower");
                OnAdditionalPowerChanged();
            }
        }
        private global::System.Boolean _AdditionalPower;
        partial void OnAdditionalPowerChanging(global::System.Boolean value);
        partial void OnAdditionalPowerChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 GraphicChipId
        {
            get
            {
                return _GraphicChipId;
            }
            set
            {
                OnGraphicChipIdChanging(value);
                ReportPropertyChanging("GraphicChipId");
                _GraphicChipId = StructuralObject.SetValidValue(value, "GraphicChipId");
                ReportPropertyChanged("GraphicChipId");
                OnGraphicChipIdChanged();
            }
        }
        private global::System.Int32 _GraphicChipId;
        partial void OnGraphicChipIdChanging(global::System.Int32 value);
        partial void OnGraphicChipIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 CoolerId
        {
            get
            {
                return _CoolerId;
            }
            set
            {
                OnCoolerIdChanging(value);
                ReportPropertyChanging("CoolerId");
                _CoolerId = StructuralObject.SetValidValue(value, "CoolerId");
                ReportPropertyChanged("CoolerId");
                OnCoolerIdChanged();
            }
        }
        private global::System.Int32 _CoolerId;
        partial void OnCoolerIdChanging(global::System.Int32 value);
        partial void OnCoolerIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 DeviceId
        {
            get
            {
                return _DeviceId;
            }
            set
            {
                OnDeviceIdChanging(value);
                ReportPropertyChanging("DeviceId");
                _DeviceId = StructuralObject.SetValidValue(value, "DeviceId");
                ReportPropertyChanged("DeviceId");
                OnDeviceIdChanged();
            }
        }
        private global::System.Int32 _DeviceId;
        partial void OnDeviceIdChanging(global::System.Int32 value);
        partial void OnDeviceIdChanged();

        #endregion

        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("LeconModel", "GPUAssembly", "Assembly")]
        public EntityCollection<Assembly> AssemblyCollection
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Assembly>("LeconModel.GPUAssembly", "Assembly");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Assembly>("LeconModel.GPUAssembly", "Assembly", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("LeconModel", "DeviceGPU", "Device")]
        public Device Device
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Device>("LeconModel.DeviceGPU", "Device").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Device>("LeconModel.DeviceGPU", "Device").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Device> DeviceReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Device>("LeconModel.DeviceGPU", "Device");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Device>("LeconModel.DeviceGPU", "Device", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("LeconModel", "GPUCPU", "CPU")]
        public EntityCollection<CPU> CPUs
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<CPU>("LeconModel.GPUCPU", "CPU");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<CPU>("LeconModel.GPUCPU", "CPU", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("LeconModel", "GPUMotherboard", "Motherboard")]
        public EntityCollection<Motherboard> Motherboards
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Motherboard>("LeconModel.GPUMotherboard", "Motherboard");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Motherboard>("LeconModel.GPUMotherboard", "Motherboard", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("LeconModel", "GraphicChipGPU", "GraphicChip")]
        public GraphicChip GraphicChip
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<GraphicChip>("LeconModel.GraphicChipGPU", "GraphicChip").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<GraphicChip>("LeconModel.GraphicChipGPU", "GraphicChip").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<GraphicChip> GraphicChipReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<GraphicChip>("LeconModel.GraphicChipGPU", "GraphicChip");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<GraphicChip>("LeconModel.GraphicChipGPU", "GraphicChip", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("LeconModel", "CoolerGPU", "Cooler")]
        public Cooler Cooler
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Cooler>("LeconModel.CoolerGPU", "Cooler").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Cooler>("LeconModel.CoolerGPU", "Cooler").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Cooler> CoolerReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Cooler>("LeconModel.CoolerGPU", "Cooler");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Cooler>("LeconModel.CoolerGPU", "Cooler", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="LeconModel", Name="GraphicChip")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class GraphicChip : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new GraphicChip object.
        /// </summary>
        /// <param name="id">Initial value of the Id property.</param>
        /// <param name="frequency">Initial value of the Frequency property.</param>
        /// <param name="name">Initial value of the Name property.</param>
        /// <param name="сapacity">Initial value of the Сapacity property.</param>
        public static GraphicChip CreateGraphicChip(global::System.Int32 id, global::System.Double frequency, global::System.String name, global::System.Int16 сapacity)
        {
            GraphicChip graphicChip = new GraphicChip();
            graphicChip.Id = id;
            graphicChip.Frequency = frequency;
            graphicChip.Name = name;
            graphicChip.Сapacity = сapacity;
            return graphicChip;
        }

        #endregion

        #region Simple Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Id
        {
            get
            {
                return _Id;
            }
            set
            {
                if (_Id != value)
                {
                    OnIdChanging(value);
                    ReportPropertyChanging("Id");
                    _Id = StructuralObject.SetValidValue(value, "Id");
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private global::System.Int32 _Id;
        partial void OnIdChanging(global::System.Int32 value);
        partial void OnIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Double Frequency
        {
            get
            {
                return _Frequency;
            }
            set
            {
                OnFrequencyChanging(value);
                ReportPropertyChanging("Frequency");
                _Frequency = StructuralObject.SetValidValue(value, "Frequency");
                ReportPropertyChanged("Frequency");
                OnFrequencyChanged();
            }
        }
        private global::System.Double _Frequency;
        partial void OnFrequencyChanging(global::System.Double value);
        partial void OnFrequencyChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Name
        {
            get
            {
                return _Name;
            }
            set
            {
                OnNameChanging(value);
                ReportPropertyChanging("Name");
                _Name = StructuralObject.SetValidValue(value, false, "Name");
                ReportPropertyChanged("Name");
                OnNameChanged();
            }
        }
        private global::System.String _Name;
        partial void OnNameChanging(global::System.String value);
        partial void OnNameChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int16 Сapacity
        {
            get
            {
                return _Сapacity;
            }
            set
            {
                OnСapacityChanging(value);
                ReportPropertyChanging("Сapacity");
                _Сapacity = StructuralObject.SetValidValue(value, "Сapacity");
                ReportPropertyChanged("Сapacity");
                OnСapacityChanged();
            }
        }
        private global::System.Int16 _Сapacity;
        partial void OnСapacityChanging(global::System.Int16 value);
        partial void OnСapacityChanged();

        #endregion

        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("LeconModel", "GraphicChipGPU", "GPU")]
        public EntityCollection<GPU> GPUs
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<GPU>("LeconModel.GraphicChipGPU", "GPU");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<GPU>("LeconModel.GraphicChipGPU", "GPU", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="LeconModel", Name="HardDrive")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class HardDrive : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new HardDrive object.
        /// </summary>
        /// <param name="id">Initial value of the Id property.</param>
        /// <param name="size">Initial value of the Size property.</param>
        /// <param name="rotation">Initial value of the Rotation property.</param>
        /// <param name="powerTypeId">Initial value of the PowerTypeId property.</param>
        /// <param name="cache">Initial value of the Cache property.</param>
        /// <param name="deviceId">Initial value of the DeviceId property.</param>
        public static HardDrive CreateHardDrive(global::System.Int32 id, global::System.Int16 size, global::System.Int16 rotation, global::System.Int32 powerTypeId, global::System.Int16 cache, global::System.Int32 deviceId)
        {
            HardDrive hardDrive = new HardDrive();
            hardDrive.Id = id;
            hardDrive.Size = size;
            hardDrive.Rotation = rotation;
            hardDrive.PowerTypeId = powerTypeId;
            hardDrive.Cache = cache;
            hardDrive.DeviceId = deviceId;
            return hardDrive;
        }

        #endregion

        #region Simple Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Id
        {
            get
            {
                return _Id;
            }
            set
            {
                if (_Id != value)
                {
                    OnIdChanging(value);
                    ReportPropertyChanging("Id");
                    _Id = StructuralObject.SetValidValue(value, "Id");
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private global::System.Int32 _Id;
        partial void OnIdChanging(global::System.Int32 value);
        partial void OnIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int16 Size
        {
            get
            {
                return _Size;
            }
            set
            {
                OnSizeChanging(value);
                ReportPropertyChanging("Size");
                _Size = StructuralObject.SetValidValue(value, "Size");
                ReportPropertyChanged("Size");
                OnSizeChanged();
            }
        }
        private global::System.Int16 _Size;
        partial void OnSizeChanging(global::System.Int16 value);
        partial void OnSizeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int16 Rotation
        {
            get
            {
                return _Rotation;
            }
            set
            {
                OnRotationChanging(value);
                ReportPropertyChanging("Rotation");
                _Rotation = StructuralObject.SetValidValue(value, "Rotation");
                ReportPropertyChanged("Rotation");
                OnRotationChanged();
            }
        }
        private global::System.Int16 _Rotation;
        partial void OnRotationChanging(global::System.Int16 value);
        partial void OnRotationChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 PowerTypeId
        {
            get
            {
                return _PowerTypeId;
            }
            set
            {
                OnPowerTypeIdChanging(value);
                ReportPropertyChanging("PowerTypeId");
                _PowerTypeId = StructuralObject.SetValidValue(value, "PowerTypeId");
                ReportPropertyChanged("PowerTypeId");
                OnPowerTypeIdChanged();
            }
        }
        private global::System.Int32 _PowerTypeId;
        partial void OnPowerTypeIdChanging(global::System.Int32 value);
        partial void OnPowerTypeIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int16 Cache
        {
            get
            {
                return _Cache;
            }
            set
            {
                OnCacheChanging(value);
                ReportPropertyChanging("Cache");
                _Cache = StructuralObject.SetValidValue(value, "Cache");
                ReportPropertyChanged("Cache");
                OnCacheChanged();
            }
        }
        private global::System.Int16 _Cache;
        partial void OnCacheChanging(global::System.Int16 value);
        partial void OnCacheChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 DeviceId
        {
            get
            {
                return _DeviceId;
            }
            set
            {
                OnDeviceIdChanging(value);
                ReportPropertyChanging("DeviceId");
                _DeviceId = StructuralObject.SetValidValue(value, "DeviceId");
                ReportPropertyChanged("DeviceId");
                OnDeviceIdChanged();
            }
        }
        private global::System.Int32 _DeviceId;
        partial void OnDeviceIdChanging(global::System.Int32 value);
        partial void OnDeviceIdChanged();

        #endregion

        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("LeconModel", "HardDriveAssembly", "Assembly")]
        public EntityCollection<Assembly> Assemblys
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Assembly>("LeconModel.HardDriveAssembly", "Assembly");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Assembly>("LeconModel.HardDriveAssembly", "Assembly", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("LeconModel", "DeviceHardDrive", "Device")]
        public Device Device
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Device>("LeconModel.DeviceHardDrive", "Device").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Device>("LeconModel.DeviceHardDrive", "Device").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Device> DeviceReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Device>("LeconModel.DeviceHardDrive", "Device");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Device>("LeconModel.DeviceHardDrive", "Device", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("LeconModel", "PowerTypeHardDrive", "PowerType")]
        public PowerType PowerType
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<PowerType>("LeconModel.PowerTypeHardDrive", "PowerType").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<PowerType>("LeconModel.PowerTypeHardDrive", "PowerType").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<PowerType> PowerTypeReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<PowerType>("LeconModel.PowerTypeHardDrive", "PowerType");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<PowerType>("LeconModel.PowerTypeHardDrive", "PowerType", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="LeconModel", Name="Manufacturer")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Manufacturer : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Manufacturer object.
        /// </summary>
        /// <param name="id">Initial value of the Id property.</param>
        /// <param name="name">Initial value of the Name property.</param>
        public static Manufacturer CreateManufacturer(global::System.Int32 id, global::System.String name)
        {
            Manufacturer manufacturer = new Manufacturer();
            manufacturer.Id = id;
            manufacturer.Name = name;
            return manufacturer;
        }

        #endregion

        #region Simple Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Id
        {
            get
            {
                return _Id;
            }
            set
            {
                if (_Id != value)
                {
                    OnIdChanging(value);
                    ReportPropertyChanging("Id");
                    _Id = StructuralObject.SetValidValue(value, "Id");
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private global::System.Int32 _Id;
        partial void OnIdChanging(global::System.Int32 value);
        partial void OnIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Name
        {
            get
            {
                return _Name;
            }
            set
            {
                OnNameChanging(value);
                ReportPropertyChanging("Name");
                _Name = StructuralObject.SetValidValue(value, false, "Name");
                ReportPropertyChanged("Name");
                OnNameChanged();
            }
        }
        private global::System.String _Name;
        partial void OnNameChanging(global::System.String value);
        partial void OnNameChanged();

        #endregion

        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("LeconModel", "ManufacturerDevice", "Device")]
        public EntityCollection<Device> Devices
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Device>("LeconModel.ManufacturerDevice", "Device");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Device>("LeconModel.ManufacturerDevice", "Device", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="LeconModel", Name="Memory")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Memory : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Memory object.
        /// </summary>
        /// <param name="id">Initial value of the Id property.</param>
        /// <param name="size">Initial value of the Size property.</param>
        /// <param name="frequency">Initial value of the Frequency property.</param>
        /// <param name="memoryTypeId">Initial value of the MemoryTypeId property.</param>
        /// <param name="deviceId">Initial value of the DeviceId property.</param>
        public static Memory CreateMemory(global::System.Int32 id, global::System.Int16 size, global::System.Int16 frequency, global::System.Int32 memoryTypeId, global::System.Int32 deviceId)
        {
            Memory memory = new Memory();
            memory.Id = id;
            memory.Size = size;
            memory.Frequency = frequency;
            memory.MemoryTypeId = memoryTypeId;
            memory.DeviceId = deviceId;
            return memory;
        }

        #endregion

        #region Simple Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Id
        {
            get
            {
                return _Id;
            }
            set
            {
                if (_Id != value)
                {
                    OnIdChanging(value);
                    ReportPropertyChanging("Id");
                    _Id = StructuralObject.SetValidValue(value, "Id");
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private global::System.Int32 _Id;
        partial void OnIdChanging(global::System.Int32 value);
        partial void OnIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int16 Size
        {
            get
            {
                return _Size;
            }
            set
            {
                OnSizeChanging(value);
                ReportPropertyChanging("Size");
                _Size = StructuralObject.SetValidValue(value, "Size");
                ReportPropertyChanged("Size");
                OnSizeChanged();
            }
        }
        private global::System.Int16 _Size;
        partial void OnSizeChanging(global::System.Int16 value);
        partial void OnSizeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int16 Frequency
        {
            get
            {
                return _Frequency;
            }
            set
            {
                OnFrequencyChanging(value);
                ReportPropertyChanging("Frequency");
                _Frequency = StructuralObject.SetValidValue(value, "Frequency");
                ReportPropertyChanged("Frequency");
                OnFrequencyChanged();
            }
        }
        private global::System.Int16 _Frequency;
        partial void OnFrequencyChanging(global::System.Int16 value);
        partial void OnFrequencyChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 MemoryTypeId
        {
            get
            {
                return _MemoryTypeId;
            }
            set
            {
                OnMemoryTypeIdChanging(value);
                ReportPropertyChanging("MemoryTypeId");
                _MemoryTypeId = StructuralObject.SetValidValue(value, "MemoryTypeId");
                ReportPropertyChanged("MemoryTypeId");
                OnMemoryTypeIdChanged();
            }
        }
        private global::System.Int32 _MemoryTypeId;
        partial void OnMemoryTypeIdChanging(global::System.Int32 value);
        partial void OnMemoryTypeIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 DeviceId
        {
            get
            {
                return _DeviceId;
            }
            set
            {
                OnDeviceIdChanging(value);
                ReportPropertyChanging("DeviceId");
                _DeviceId = StructuralObject.SetValidValue(value, "DeviceId");
                ReportPropertyChanged("DeviceId");
                OnDeviceIdChanged();
            }
        }
        private global::System.Int32 _DeviceId;
        partial void OnDeviceIdChanging(global::System.Int32 value);
        partial void OnDeviceIdChanged();

        #endregion

        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("LeconModel", "MemoryAssembly", "Assembly")]
        public EntityCollection<Assembly> Assemblys
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Assembly>("LeconModel.MemoryAssembly", "Assembly");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Assembly>("LeconModel.MemoryAssembly", "Assembly", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("LeconModel", "DeviceMemory", "Device")]
        public Device Device
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Device>("LeconModel.DeviceMemory", "Device").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Device>("LeconModel.DeviceMemory", "Device").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Device> DeviceReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Device>("LeconModel.DeviceMemory", "Device");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Device>("LeconModel.DeviceMemory", "Device", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("LeconModel", "MemoryTypeMemory", "MemoryType")]
        public MemoryType MemoryType
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<MemoryType>("LeconModel.MemoryTypeMemory", "MemoryType").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<MemoryType>("LeconModel.MemoryTypeMemory", "MemoryType").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<MemoryType> MemoryTypeReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<MemoryType>("LeconModel.MemoryTypeMemory", "MemoryType");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<MemoryType>("LeconModel.MemoryTypeMemory", "MemoryType", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="LeconModel", Name="MemoryType")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class MemoryType : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new MemoryType object.
        /// </summary>
        /// <param name="id">Initial value of the Id property.</param>
        /// <param name="name">Initial value of the Name property.</param>
        public static MemoryType CreateMemoryType(global::System.Int32 id, global::System.String name)
        {
            MemoryType memoryType = new MemoryType();
            memoryType.Id = id;
            memoryType.Name = name;
            return memoryType;
        }

        #endregion

        #region Simple Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Id
        {
            get
            {
                return _Id;
            }
            set
            {
                if (_Id != value)
                {
                    OnIdChanging(value);
                    ReportPropertyChanging("Id");
                    _Id = StructuralObject.SetValidValue(value, "Id");
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private global::System.Int32 _Id;
        partial void OnIdChanging(global::System.Int32 value);
        partial void OnIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Name
        {
            get
            {
                return _Name;
            }
            set
            {
                OnNameChanging(value);
                ReportPropertyChanging("Name");
                _Name = StructuralObject.SetValidValue(value, false, "Name");
                ReportPropertyChanged("Name");
                OnNameChanged();
            }
        }
        private global::System.String _Name;
        partial void OnNameChanging(global::System.String value);
        partial void OnNameChanged();

        #endregion

        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("LeconModel", "MemoryTypeMotherboard", "Motherboard")]
        public EntityCollection<Motherboard> Motherboard
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Motherboard>("LeconModel.MemoryTypeMotherboard", "Motherboard");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Motherboard>("LeconModel.MemoryTypeMotherboard", "Motherboard", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("LeconModel", "MemoryTypeMemory", "Memory")]
        public EntityCollection<Memory> Memorys
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Memory>("LeconModel.MemoryTypeMemory", "Memory");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Memory>("LeconModel.MemoryTypeMemory", "Memory", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="LeconModel", Name="Motherboard")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Motherboard : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Motherboard object.
        /// </summary>
        /// <param name="id">Initial value of the Id property.</param>
        /// <param name="frequency">Initial value of the Frequency property.</param>
        /// <param name="sATA">Initial value of the SATA property.</param>
        /// <param name="socketId">Initial value of the SocketId property.</param>
        /// <param name="powerTypeId">Initial value of the PowerTypeId property.</param>
        /// <param name="memoryTypeId">Initial value of the MemoryTypeId property.</param>
        /// <param name="chipsetId">Initial value of the ChipsetId property.</param>
        /// <param name="formFactorId">Initial value of the FormFactorId property.</param>
        /// <param name="deviceId">Initial value of the DeviceId property.</param>
        public static Motherboard CreateMotherboard(global::System.Int32 id, global::System.Int16 frequency, global::System.Int16 sATA, global::System.Int32 socketId, global::System.Int32 powerTypeId, global::System.Int32 memoryTypeId, global::System.Int32 chipsetId, global::System.Int32 formFactorId, global::System.Int32 deviceId)
        {
            Motherboard motherboard = new Motherboard();
            motherboard.Id = id;
            motherboard.Frequency = frequency;
            motherboard.SATA = sATA;
            motherboard.SocketId = socketId;
            motherboard.PowerTypeId = powerTypeId;
            motherboard.MemoryTypeId = memoryTypeId;
            motherboard.ChipsetId = chipsetId;
            motherboard.FormFactorId = formFactorId;
            motherboard.DeviceId = deviceId;
            return motherboard;
        }

        #endregion

        #region Simple Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Id
        {
            get
            {
                return _Id;
            }
            set
            {
                if (_Id != value)
                {
                    OnIdChanging(value);
                    ReportPropertyChanging("Id");
                    _Id = StructuralObject.SetValidValue(value, "Id");
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private global::System.Int32 _Id;
        partial void OnIdChanging(global::System.Int32 value);
        partial void OnIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int16 Frequency
        {
            get
            {
                return _Frequency;
            }
            set
            {
                OnFrequencyChanging(value);
                ReportPropertyChanging("Frequency");
                _Frequency = StructuralObject.SetValidValue(value, "Frequency");
                ReportPropertyChanged("Frequency");
                OnFrequencyChanged();
            }
        }
        private global::System.Int16 _Frequency;
        partial void OnFrequencyChanging(global::System.Int16 value);
        partial void OnFrequencyChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int16 SATA
        {
            get
            {
                return _SATA;
            }
            set
            {
                OnSATAChanging(value);
                ReportPropertyChanging("SATA");
                _SATA = StructuralObject.SetValidValue(value, "SATA");
                ReportPropertyChanged("SATA");
                OnSATAChanged();
            }
        }
        private global::System.Int16 _SATA;
        partial void OnSATAChanging(global::System.Int16 value);
        partial void OnSATAChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> GPUId
        {
            get
            {
                return _GPUId;
            }
            set
            {
                OnGPUIdChanging(value);
                ReportPropertyChanging("GPUId");
                _GPUId = StructuralObject.SetValidValue(value, "GPUId");
                ReportPropertyChanged("GPUId");
                OnGPUIdChanged();
            }
        }
        private Nullable<global::System.Int32> _GPUId;
        partial void OnGPUIdChanging(Nullable<global::System.Int32> value);
        partial void OnGPUIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 SocketId
        {
            get
            {
                return _SocketId;
            }
            set
            {
                OnSocketIdChanging(value);
                ReportPropertyChanging("SocketId");
                _SocketId = StructuralObject.SetValidValue(value, "SocketId");
                ReportPropertyChanged("SocketId");
                OnSocketIdChanged();
            }
        }
        private global::System.Int32 _SocketId;
        partial void OnSocketIdChanging(global::System.Int32 value);
        partial void OnSocketIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 PowerTypeId
        {
            get
            {
                return _PowerTypeId;
            }
            set
            {
                OnPowerTypeIdChanging(value);
                ReportPropertyChanging("PowerTypeId");
                _PowerTypeId = StructuralObject.SetValidValue(value, "PowerTypeId");
                ReportPropertyChanged("PowerTypeId");
                OnPowerTypeIdChanged();
            }
        }
        private global::System.Int32 _PowerTypeId;
        partial void OnPowerTypeIdChanging(global::System.Int32 value);
        partial void OnPowerTypeIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 MemoryTypeId
        {
            get
            {
                return _MemoryTypeId;
            }
            set
            {
                OnMemoryTypeIdChanging(value);
                ReportPropertyChanging("MemoryTypeId");
                _MemoryTypeId = StructuralObject.SetValidValue(value, "MemoryTypeId");
                ReportPropertyChanged("MemoryTypeId");
                OnMemoryTypeIdChanged();
            }
        }
        private global::System.Int32 _MemoryTypeId;
        partial void OnMemoryTypeIdChanging(global::System.Int32 value);
        partial void OnMemoryTypeIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 ChipsetId
        {
            get
            {
                return _ChipsetId;
            }
            set
            {
                OnChipsetIdChanging(value);
                ReportPropertyChanging("ChipsetId");
                _ChipsetId = StructuralObject.SetValidValue(value, "ChipsetId");
                ReportPropertyChanged("ChipsetId");
                OnChipsetIdChanged();
            }
        }
        private global::System.Int32 _ChipsetId;
        partial void OnChipsetIdChanging(global::System.Int32 value);
        partial void OnChipsetIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 FormFactorId
        {
            get
            {
                return _FormFactorId;
            }
            set
            {
                OnFormFactorIdChanging(value);
                ReportPropertyChanging("FormFactorId");
                _FormFactorId = StructuralObject.SetValidValue(value, "FormFactorId");
                ReportPropertyChanged("FormFactorId");
                OnFormFactorIdChanged();
            }
        }
        private global::System.Int32 _FormFactorId;
        partial void OnFormFactorIdChanging(global::System.Int32 value);
        partial void OnFormFactorIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 DeviceId
        {
            get
            {
                return _DeviceId;
            }
            set
            {
                OnDeviceIdChanging(value);
                ReportPropertyChanging("DeviceId");
                _DeviceId = StructuralObject.SetValidValue(value, "DeviceId");
                ReportPropertyChanged("DeviceId");
                OnDeviceIdChanged();
            }
        }
        private global::System.Int32 _DeviceId;
        partial void OnDeviceIdChanging(global::System.Int32 value);
        partial void OnDeviceIdChanged();

        #endregion

        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("LeconModel", "DeviceMotherboard", "Device")]
        public Device Device
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Device>("LeconModel.DeviceMotherboard", "Device").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Device>("LeconModel.DeviceMotherboard", "Device").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Device> DeviceReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Device>("LeconModel.DeviceMotherboard", "Device");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Device>("LeconModel.DeviceMotherboard", "Device", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("LeconModel", "SocketMotherboard", "Socket")]
        public Socket Socket
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Socket>("LeconModel.SocketMotherboard", "Socket").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Socket>("LeconModel.SocketMotherboard", "Socket").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Socket> SocketReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Socket>("LeconModel.SocketMotherboard", "Socket");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Socket>("LeconModel.SocketMotherboard", "Socket", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("LeconModel", "FormFactorMotherboard", "FormFactor")]
        public FormFactor FormFactor
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<FormFactor>("LeconModel.FormFactorMotherboard", "FormFactor").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<FormFactor>("LeconModel.FormFactorMotherboard", "FormFactor").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<FormFactor> FormFactorReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<FormFactor>("LeconModel.FormFactorMotherboard", "FormFactor");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<FormFactor>("LeconModel.FormFactorMotherboard", "FormFactor", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("LeconModel", "GPUMotherboard", "GPU")]
        public GPU GPU
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<GPU>("LeconModel.GPUMotherboard", "GPU").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<GPU>("LeconModel.GPUMotherboard", "GPU").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<GPU> GPUReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<GPU>("LeconModel.GPUMotherboard", "GPU");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<GPU>("LeconModel.GPUMotherboard", "GPU", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("LeconModel", "ChipsetMotherboard", "Chipset")]
        public Chipset Chipset
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Chipset>("LeconModel.ChipsetMotherboard", "Chipset").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Chipset>("LeconModel.ChipsetMotherboard", "Chipset").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Chipset> ChipsetReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Chipset>("LeconModel.ChipsetMotherboard", "Chipset");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Chipset>("LeconModel.ChipsetMotherboard", "Chipset", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("LeconModel", "MemoryTypeMotherboard", "MemoryType")]
        public MemoryType MemoryType
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<MemoryType>("LeconModel.MemoryTypeMotherboard", "MemoryType").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<MemoryType>("LeconModel.MemoryTypeMotherboard", "MemoryType").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<MemoryType> MemoryTypeReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<MemoryType>("LeconModel.MemoryTypeMotherboard", "MemoryType");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<MemoryType>("LeconModel.MemoryTypeMotherboard", "MemoryType", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("LeconModel", "PowerTypeMotherboard", "PowerType")]
        public PowerType PowerType
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<PowerType>("LeconModel.PowerTypeMotherboard", "PowerType").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<PowerType>("LeconModel.PowerTypeMotherboard", "PowerType").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<PowerType> PowerTypeReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<PowerType>("LeconModel.PowerTypeMotherboard", "PowerType");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<PowerType>("LeconModel.PowerTypeMotherboard", "PowerType", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("LeconModel", "MotherboardAssembly", "Assembly")]
        public EntityCollection<Assembly> Assemblys
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Assembly>("LeconModel.MotherboardAssembly", "Assembly");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Assembly>("LeconModel.MotherboardAssembly", "Assembly", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="LeconModel", Name="PowerType")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class PowerType : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new PowerType object.
        /// </summary>
        /// <param name="id">Initial value of the Id property.</param>
        /// <param name="name">Initial value of the Name property.</param>
        public static PowerType CreatePowerType(global::System.Int32 id, global::System.String name)
        {
            PowerType powerType = new PowerType();
            powerType.Id = id;
            powerType.Name = name;
            return powerType;
        }

        #endregion

        #region Simple Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Id
        {
            get
            {
                return _Id;
            }
            set
            {
                if (_Id != value)
                {
                    OnIdChanging(value);
                    ReportPropertyChanging("Id");
                    _Id = StructuralObject.SetValidValue(value, "Id");
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private global::System.Int32 _Id;
        partial void OnIdChanging(global::System.Int32 value);
        partial void OnIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Name
        {
            get
            {
                return _Name;
            }
            set
            {
                OnNameChanging(value);
                ReportPropertyChanging("Name");
                _Name = StructuralObject.SetValidValue(value, false, "Name");
                ReportPropertyChanged("Name");
                OnNameChanged();
            }
        }
        private global::System.String _Name;
        partial void OnNameChanging(global::System.String value);
        partial void OnNameChanged();

        #endregion

        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("LeconModel", "PowerTypeCooler", "Cooler")]
        public EntityCollection<Cooler> Coolers
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Cooler>("LeconModel.PowerTypeCooler", "Cooler");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Cooler>("LeconModel.PowerTypeCooler", "Cooler", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("LeconModel", "PowerTypeHardDrive", "HardDrive")]
        public EntityCollection<HardDrive> HardDrives
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<HardDrive>("LeconModel.PowerTypeHardDrive", "HardDrive");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<HardDrive>("LeconModel.PowerTypeHardDrive", "HardDrive", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("LeconModel", "PowerTypePSU", "PSU")]
        public EntityCollection<PSU> PSUs
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<PSU>("LeconModel.PowerTypePSU", "PSU");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<PSU>("LeconModel.PowerTypePSU", "PSU", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("LeconModel", "PowerTypeMotherboard", "Motherboard")]
        public EntityCollection<Motherboard> Motherboards
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Motherboard>("LeconModel.PowerTypeMotherboard", "Motherboard");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Motherboard>("LeconModel.PowerTypeMotherboard", "Motherboard", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="LeconModel", Name="PSU")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class PSU : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new PSU object.
        /// </summary>
        /// <param name="id">Initial value of the Id property.</param>
        /// <param name="sATA">Initial value of the SATA property.</param>
        /// <param name="iDE">Initial value of the IDE property.</param>
        /// <param name="powerTypeId">Initial value of the PowerTypeId property.</param>
        /// <param name="formFactorId">Initial value of the FormFactorId property.</param>
        /// <param name="deviceId">Initial value of the DeviceId property.</param>
        public static PSU CreatePSU(global::System.Int32 id, global::System.Int16 sATA, global::System.Int16 iDE, global::System.Int32 powerTypeId, global::System.Int32 formFactorId, global::System.Int32 deviceId)
        {
            PSU pSU = new PSU();
            pSU.Id = id;
            pSU.SATA = sATA;
            pSU.IDE = iDE;
            pSU.PowerTypeId = powerTypeId;
            pSU.FormFactorId = formFactorId;
            pSU.DeviceId = deviceId;
            return pSU;
        }

        #endregion

        #region Simple Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Id
        {
            get
            {
                return _Id;
            }
            set
            {
                if (_Id != value)
                {
                    OnIdChanging(value);
                    ReportPropertyChanging("Id");
                    _Id = StructuralObject.SetValidValue(value, "Id");
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private global::System.Int32 _Id;
        partial void OnIdChanging(global::System.Int32 value);
        partial void OnIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int16 SATA
        {
            get
            {
                return _SATA;
            }
            set
            {
                OnSATAChanging(value);
                ReportPropertyChanging("SATA");
                _SATA = StructuralObject.SetValidValue(value, "SATA");
                ReportPropertyChanged("SATA");
                OnSATAChanged();
            }
        }
        private global::System.Int16 _SATA;
        partial void OnSATAChanging(global::System.Int16 value);
        partial void OnSATAChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int16 IDE
        {
            get
            {
                return _IDE;
            }
            set
            {
                OnIDEChanging(value);
                ReportPropertyChanging("IDE");
                _IDE = StructuralObject.SetValidValue(value, "IDE");
                ReportPropertyChanged("IDE");
                OnIDEChanged();
            }
        }
        private global::System.Int16 _IDE;
        partial void OnIDEChanging(global::System.Int16 value);
        partial void OnIDEChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 PowerTypeId
        {
            get
            {
                return _PowerTypeId;
            }
            set
            {
                OnPowerTypeIdChanging(value);
                ReportPropertyChanging("PowerTypeId");
                _PowerTypeId = StructuralObject.SetValidValue(value, "PowerTypeId");
                ReportPropertyChanged("PowerTypeId");
                OnPowerTypeIdChanged();
            }
        }
        private global::System.Int32 _PowerTypeId;
        partial void OnPowerTypeIdChanging(global::System.Int32 value);
        partial void OnPowerTypeIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 FormFactorId
        {
            get
            {
                return _FormFactorId;
            }
            set
            {
                OnFormFactorIdChanging(value);
                ReportPropertyChanging("FormFactorId");
                _FormFactorId = StructuralObject.SetValidValue(value, "FormFactorId");
                ReportPropertyChanged("FormFactorId");
                OnFormFactorIdChanged();
            }
        }
        private global::System.Int32 _FormFactorId;
        partial void OnFormFactorIdChanging(global::System.Int32 value);
        partial void OnFormFactorIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 DeviceId
        {
            get
            {
                return _DeviceId;
            }
            set
            {
                OnDeviceIdChanging(value);
                ReportPropertyChanging("DeviceId");
                _DeviceId = StructuralObject.SetValidValue(value, "DeviceId");
                ReportPropertyChanged("DeviceId");
                OnDeviceIdChanged();
            }
        }
        private global::System.Int32 _DeviceId;
        partial void OnDeviceIdChanging(global::System.Int32 value);
        partial void OnDeviceIdChanged();

        #endregion

        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("LeconModel", "PSUAssembly", "Assembly")]
        public EntityCollection<Assembly> Assemblys
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Assembly>("LeconModel.PSUAssembly", "Assembly");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Assembly>("LeconModel.PSUAssembly", "Assembly", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("LeconModel", "DevicePSU", "Device")]
        public Device Device
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Device>("LeconModel.DevicePSU", "Device").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Device>("LeconModel.DevicePSU", "Device").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Device> DeviceReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Device>("LeconModel.DevicePSU", "Device");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Device>("LeconModel.DevicePSU", "Device", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("LeconModel", "FormFactorPSU", "FormFactor")]
        public FormFactor FormFactor
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<FormFactor>("LeconModel.FormFactorPSU", "FormFactor").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<FormFactor>("LeconModel.FormFactorPSU", "FormFactor").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<FormFactor> FormFactorReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<FormFactor>("LeconModel.FormFactorPSU", "FormFactor");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<FormFactor>("LeconModel.FormFactorPSU", "FormFactor", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("LeconModel", "PowerTypePSU", "PowerType")]
        public PowerType PowerType
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<PowerType>("LeconModel.PowerTypePSU", "PowerType").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<PowerType>("LeconModel.PowerTypePSU", "PowerType").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<PowerType> PowerTypeReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<PowerType>("LeconModel.PowerTypePSU", "PowerType");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<PowerType>("LeconModel.PowerTypePSU", "PowerType", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="LeconModel", Name="Socket")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Socket : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Socket object.
        /// </summary>
        /// <param name="id">Initial value of the Id property.</param>
        /// <param name="name">Initial value of the Name property.</param>
        public static Socket CreateSocket(global::System.Int32 id, global::System.String name)
        {
            Socket socket = new Socket();
            socket.Id = id;
            socket.Name = name;
            return socket;
        }

        #endregion

        #region Simple Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Id
        {
            get
            {
                return _Id;
            }
            set
            {
                if (_Id != value)
                {
                    OnIdChanging(value);
                    ReportPropertyChanging("Id");
                    _Id = StructuralObject.SetValidValue(value, "Id");
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private global::System.Int32 _Id;
        partial void OnIdChanging(global::System.Int32 value);
        partial void OnIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Name
        {
            get
            {
                return _Name;
            }
            set
            {
                OnNameChanging(value);
                ReportPropertyChanging("Name");
                _Name = StructuralObject.SetValidValue(value, false, "Name");
                ReportPropertyChanged("Name");
                OnNameChanged();
            }
        }
        private global::System.String _Name;
        partial void OnNameChanging(global::System.String value);
        partial void OnNameChanged();

        #endregion

        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("LeconModel", "SocketCPU", "CPU")]
        public EntityCollection<CPU> CPUs
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<CPU>("LeconModel.SocketCPU", "CPU");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<CPU>("LeconModel.SocketCPU", "CPU", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("LeconModel", "SocketMotherboard", "Motherboard")]
        public EntityCollection<Motherboard> Motherboards
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Motherboard>("LeconModel.SocketMotherboard", "Motherboard");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Motherboard>("LeconModel.SocketMotherboard", "Motherboard", value);
                }
            }
        }

        #endregion

    }

    #endregion

    #region ComplexTypes
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmComplexTypeAttribute(NamespaceName="LeconModel", Name="sp_helpdiagramdefinition_Result")]
    [DataContractAttribute(IsReference=true)]
    [Serializable()]
    public partial class sp_helpdiagramdefinition_Result : ComplexObject
    {
        #region Simple Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> version
        {
            get
            {
                return _version;
            }
            set
            {
                OnversionChanging(value);
                ReportPropertyChanging("version");
                _version = StructuralObject.SetValidValue(value, "version");
                ReportPropertyChanged("version");
                OnversionChanged();
            }
        }
        private Nullable<global::System.Int32> _version;
        partial void OnversionChanging(Nullable<global::System.Int32> value);
        partial void OnversionChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.Byte[] definition
        {
            get
            {
                return StructuralObject.GetValidValue(_definition);
            }
            set
            {
                OndefinitionChanging(value);
                ReportPropertyChanging("definition");
                _definition = StructuralObject.SetValidValue(value, true, "definition");
                ReportPropertyChanged("definition");
                OndefinitionChanged();
            }
        }
        private global::System.Byte[] _definition;
        partial void OndefinitionChanging(global::System.Byte[] value);
        partial void OndefinitionChanged();

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmComplexTypeAttribute(NamespaceName="LeconModel", Name="sp_helpdiagrams_Result")]
    [DataContractAttribute(IsReference=true)]
    [Serializable()]
    public partial class sp_helpdiagrams_Result : ComplexObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new sp_helpdiagrams_Result object.
        /// </summary>
        /// <param name="name">Initial value of the Name property.</param>
        /// <param name="id">Initial value of the ID property.</param>
        /// <param name="ownerID">Initial value of the OwnerID property.</param>
        public static sp_helpdiagrams_Result Createsp_helpdiagrams_Result(global::System.String name, global::System.Int32 id, global::System.Int32 ownerID)
        {
            sp_helpdiagrams_Result sp_helpdiagrams_Result = new sp_helpdiagrams_Result();
            sp_helpdiagrams_Result.Name = name;
            sp_helpdiagrams_Result.ID = id;
            sp_helpdiagrams_Result.OwnerID = ownerID;
            return sp_helpdiagrams_Result;
        }

        #endregion

        #region Simple Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Database
        {
            get
            {
                return _Database;
            }
            set
            {
                OnDatabaseChanging(value);
                ReportPropertyChanging("Database");
                _Database = StructuralObject.SetValidValue(value, true, "Database");
                ReportPropertyChanged("Database");
                OnDatabaseChanged();
            }
        }
        private global::System.String _Database;
        partial void OnDatabaseChanging(global::System.String value);
        partial void OnDatabaseChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Name
        {
            get
            {
                return _Name;
            }
            set
            {
                OnNameChanging(value);
                ReportPropertyChanging("Name");
                _Name = StructuralObject.SetValidValue(value, false, "Name");
                ReportPropertyChanged("Name");
                OnNameChanged();
            }
        }
        private global::System.String _Name;
        partial void OnNameChanging(global::System.String value);
        partial void OnNameChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 ID
        {
            get
            {
                return _ID;
            }
            set
            {
                OnIDChanging(value);
                ReportPropertyChanging("ID");
                _ID = StructuralObject.SetValidValue(value, "ID");
                ReportPropertyChanged("ID");
                OnIDChanged();
            }
        }
        private global::System.Int32 _ID;
        partial void OnIDChanging(global::System.Int32 value);
        partial void OnIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Owner
        {
            get
            {
                return _Owner;
            }
            set
            {
                OnOwnerChanging(value);
                ReportPropertyChanging("Owner");
                _Owner = StructuralObject.SetValidValue(value, true, "Owner");
                ReportPropertyChanged("Owner");
                OnOwnerChanged();
            }
        }
        private global::System.String _Owner;
        partial void OnOwnerChanging(global::System.String value);
        partial void OnOwnerChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 OwnerID
        {
            get
            {
                return _OwnerID;
            }
            set
            {
                OnOwnerIDChanging(value);
                ReportPropertyChanging("OwnerID");
                _OwnerID = StructuralObject.SetValidValue(value, "OwnerID");
                ReportPropertyChanged("OwnerID");
                OnOwnerIDChanged();
            }
        }
        private global::System.Int32 _OwnerID;
        partial void OnOwnerIDChanging(global::System.Int32 value);
        partial void OnOwnerIDChanged();

        #endregion

    }

    #endregion

}
