//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18033
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Lecon
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations;
    using System.Linq;
    using System.ServiceModel.DomainServices;
    using System.ServiceModel.DomainServices.Client;
    using System.ServiceModel.DomainServices.Client.ApplicationServices;
    using Lecon.Web;
    
    
    /// <summary>
    /// Context for the RIA application.
    /// </summary>
    /// <remarks>
    /// This context extends the base to make application services and types available
    /// for consumption from code and xaml.
    /// </remarks>
    public sealed partial class WebContext : WebContextBase
    {
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the WebContext class.
        /// </summary>
        public WebContext()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets the context that is registered as a lifetime object with the current application.
        /// </summary>
        /// <exception cref="InvalidOperationException"> is thrown if there is no current application,
        /// no contexts have been added, or more than one context has been added.
        /// </exception>
        /// <seealso cref="System.Windows.Application.ApplicationLifetimeObjects"/>
        public new static WebContext Current
        {
            get
            {
                return ((WebContext)(WebContextBase.Current));
            }
        }
        
        /// <summary>
        /// Gets a user representing the authenticated identity.
        /// </summary>
        public new User User
        {
            get
            {
                return ((User)(base.User));
            }
        }
    }
}
namespace Lecon.Web
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations;
    using System.ComponentModel.DataAnnotations.Schema;
    using System.Linq;
    using System.Runtime.Serialization;
    using System.ServiceModel;
    using System.ServiceModel.DomainServices;
    using System.ServiceModel.DomainServices.Client;
    using System.ServiceModel.DomainServices.Client.ApplicationServices;
    using System.ServiceModel.Web;
    using System.Xml.Serialization;
    using Lecon.Web.Resources;
    
    
    /// <summary>
    /// The 'Assembly' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/Lecon.Web")]
    public sealed partial class Assembly : Entity
    {
        
        private EntityRef<Body> _body;
        
        private int _bodyId;
        
        private EntityRef<Cooler> _cooler;
        
        private int _coolerId;
        
        private EntityRef<CPU> _cpu;
        
        private int _cpuId;
        
        private EntityRef<GPU> _gpu;
        
        private int _gpuId;
        
        private EntityRef<HardDrive> _hardDrive;
        
        private int _hardDriveId;
        
        private int _id;
        
        private EntityRef<Memory> _memory;
        
        private int _memoryId;
        
        private EntityRef<Motherboard> _motherboard;
        
        private int _motherBoardId;
        
        private EntityRef<PSU> _psu;
        
        private int _psuId;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnBodyIdChanging(int value);
        partial void OnBodyIdChanged();
        partial void OnCoolerIdChanging(int value);
        partial void OnCoolerIdChanged();
        partial void OnCPUIdChanging(int value);
        partial void OnCPUIdChanged();
        partial void OnGPUIdChanging(int value);
        partial void OnGPUIdChanged();
        partial void OnHardDriveIdChanging(int value);
        partial void OnHardDriveIdChanged();
        partial void OnIdChanging(int value);
        partial void OnIdChanged();
        partial void OnMemoryIdChanging(int value);
        partial void OnMemoryIdChanged();
        partial void OnMotherBoardIdChanging(int value);
        partial void OnMotherBoardIdChanged();
        partial void OnPSUIdChanging(int value);
        partial void OnPSUIdChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="Assembly"/> class.
        /// </summary>
        public Assembly()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Body"/> entity.
        /// </summary>
        [Association("Body_Assembly", "BodyId", "Id", IsForeignKey=true)]
        [XmlIgnore()]
        public Body Body
        {
            get
            {
                if ((this._body == null))
                {
                    this._body = new EntityRef<Body>(this, "Body", this.FilterBody);
                }
                return this._body.Entity;
            }
            set
            {
                Body previous = this.Body;
                if ((previous != value))
                {
                    this.ValidateProperty("Body", value);
                    if ((previous != null))
                    {
                        this._body.Entity = null;
                        previous.Assemblys.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.BodyId = value.Id;
                    }
                    else
                    {
                        this.BodyId = default(int);
                    }
                    this._body.Entity = value;
                    if ((value != null))
                    {
                        value.Assemblys.Add(this);
                    }
                    this.RaisePropertyChanged("Body");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'BodyId' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public int BodyId
        {
            get
            {
                return this._bodyId;
            }
            set
            {
                if ((this._bodyId != value))
                {
                    this.OnBodyIdChanging(value);
                    this.RaiseDataMemberChanging("BodyId");
                    this.ValidateProperty("BodyId", value);
                    this._bodyId = value;
                    this.RaiseDataMemberChanged("BodyId");
                    this.OnBodyIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Cooler"/> entity.
        /// </summary>
        [Association("Cooler_Assembly", "CoolerId", "Id", IsForeignKey=true)]
        [XmlIgnore()]
        public Cooler Cooler
        {
            get
            {
                if ((this._cooler == null))
                {
                    this._cooler = new EntityRef<Cooler>(this, "Cooler", this.FilterCooler);
                }
                return this._cooler.Entity;
            }
            set
            {
                Cooler previous = this.Cooler;
                if ((previous != value))
                {
                    this.ValidateProperty("Cooler", value);
                    if ((previous != null))
                    {
                        this._cooler.Entity = null;
                        previous.Assembly.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.CoolerId = value.Id;
                    }
                    else
                    {
                        this.CoolerId = default(int);
                    }
                    this._cooler.Entity = value;
                    if ((value != null))
                    {
                        value.Assembly.Add(this);
                    }
                    this.RaisePropertyChanged("Cooler");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'CoolerId' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public int CoolerId
        {
            get
            {
                return this._coolerId;
            }
            set
            {
                if ((this._coolerId != value))
                {
                    this.OnCoolerIdChanging(value);
                    this.RaiseDataMemberChanging("CoolerId");
                    this.ValidateProperty("CoolerId", value);
                    this._coolerId = value;
                    this.RaiseDataMemberChanged("CoolerId");
                    this.OnCoolerIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="CPU"/> entity.
        /// </summary>
        [Association("CPU_Assembly", "CPUId", "Id", IsForeignKey=true)]
        [XmlIgnore()]
        public CPU CPU
        {
            get
            {
                if ((this._cpu == null))
                {
                    this._cpu = new EntityRef<CPU>(this, "CPU", this.FilterCPU);
                }
                return this._cpu.Entity;
            }
            set
            {
                CPU previous = this.CPU;
                if ((previous != value))
                {
                    this.ValidateProperty("CPU", value);
                    if ((previous != null))
                    {
                        this._cpu.Entity = null;
                        previous.Assemblys.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.CPUId = value.Id;
                    }
                    else
                    {
                        this.CPUId = default(int);
                    }
                    this._cpu.Entity = value;
                    if ((value != null))
                    {
                        value.Assemblys.Add(this);
                    }
                    this.RaisePropertyChanged("CPU");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'CPUId' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public int CPUId
        {
            get
            {
                return this._cpuId;
            }
            set
            {
                if ((this._cpuId != value))
                {
                    this.OnCPUIdChanging(value);
                    this.RaiseDataMemberChanging("CPUId");
                    this.ValidateProperty("CPUId", value);
                    this._cpuId = value;
                    this.RaiseDataMemberChanged("CPUId");
                    this.OnCPUIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="GPU"/> entity.
        /// </summary>
        [Association("GPU_Assembly", "GPUId", "Id", IsForeignKey=true)]
        [XmlIgnore()]
        public GPU GPU
        {
            get
            {
                if ((this._gpu == null))
                {
                    this._gpu = new EntityRef<GPU>(this, "GPU", this.FilterGPU);
                }
                return this._gpu.Entity;
            }
            set
            {
                GPU previous = this.GPU;
                if ((previous != value))
                {
                    this.ValidateProperty("GPU", value);
                    if ((previous != null))
                    {
                        this._gpu.Entity = null;
                        previous.AssemblyCollection.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.GPUId = value.Id;
                    }
                    else
                    {
                        this.GPUId = default(int);
                    }
                    this._gpu.Entity = value;
                    if ((value != null))
                    {
                        value.AssemblyCollection.Add(this);
                    }
                    this.RaisePropertyChanged("GPU");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'GPUId' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public int GPUId
        {
            get
            {
                return this._gpuId;
            }
            set
            {
                if ((this._gpuId != value))
                {
                    this.OnGPUIdChanging(value);
                    this.RaiseDataMemberChanging("GPUId");
                    this.ValidateProperty("GPUId", value);
                    this._gpuId = value;
                    this.RaiseDataMemberChanged("GPUId");
                    this.OnGPUIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="HardDrive"/> entity.
        /// </summary>
        [Association("HardDrive_Assembly", "HardDriveId", "Id", IsForeignKey=true)]
        [XmlIgnore()]
        public HardDrive HardDrive
        {
            get
            {
                if ((this._hardDrive == null))
                {
                    this._hardDrive = new EntityRef<HardDrive>(this, "HardDrive", this.FilterHardDrive);
                }
                return this._hardDrive.Entity;
            }
            set
            {
                HardDrive previous = this.HardDrive;
                if ((previous != value))
                {
                    this.ValidateProperty("HardDrive", value);
                    if ((previous != null))
                    {
                        this._hardDrive.Entity = null;
                        previous.Assemblys.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.HardDriveId = value.Id;
                    }
                    else
                    {
                        this.HardDriveId = default(int);
                    }
                    this._hardDrive.Entity = value;
                    if ((value != null))
                    {
                        value.Assemblys.Add(this);
                    }
                    this.RaisePropertyChanged("HardDrive");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'HardDriveId' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public int HardDriveId
        {
            get
            {
                return this._hardDriveId;
            }
            set
            {
                if ((this._hardDriveId != value))
                {
                    this.OnHardDriveIdChanging(value);
                    this.RaiseDataMemberChanging("HardDriveId");
                    this.ValidateProperty("HardDriveId", value);
                    this._hardDriveId = value;
                    this.RaiseDataMemberChanged("HardDriveId");
                    this.OnHardDriveIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Id' value.
        /// </summary>
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int Id
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    this.OnIdChanging(value);
                    this.ValidateProperty("Id", value);
                    this._id = value;
                    this.RaisePropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Memory"/> entity.
        /// </summary>
        [Association("Memory_Assembly", "MemoryId", "Id", IsForeignKey=true)]
        [XmlIgnore()]
        public Memory Memory
        {
            get
            {
                if ((this._memory == null))
                {
                    this._memory = new EntityRef<Memory>(this, "Memory", this.FilterMemory);
                }
                return this._memory.Entity;
            }
            set
            {
                Memory previous = this.Memory;
                if ((previous != value))
                {
                    this.ValidateProperty("Memory", value);
                    if ((previous != null))
                    {
                        this._memory.Entity = null;
                        previous.Assemblys.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.MemoryId = value.Id;
                    }
                    else
                    {
                        this.MemoryId = default(int);
                    }
                    this._memory.Entity = value;
                    if ((value != null))
                    {
                        value.Assemblys.Add(this);
                    }
                    this.RaisePropertyChanged("Memory");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'MemoryId' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public int MemoryId
        {
            get
            {
                return this._memoryId;
            }
            set
            {
                if ((this._memoryId != value))
                {
                    this.OnMemoryIdChanging(value);
                    this.RaiseDataMemberChanging("MemoryId");
                    this.ValidateProperty("MemoryId", value);
                    this._memoryId = value;
                    this.RaiseDataMemberChanged("MemoryId");
                    this.OnMemoryIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Motherboard"/> entity.
        /// </summary>
        [Association("Motherboard_Assembly", "MotherBoardId", "Id", IsForeignKey=true)]
        [XmlIgnore()]
        public Motherboard Motherboard
        {
            get
            {
                if ((this._motherboard == null))
                {
                    this._motherboard = new EntityRef<Motherboard>(this, "Motherboard", this.FilterMotherboard);
                }
                return this._motherboard.Entity;
            }
            set
            {
                Motherboard previous = this.Motherboard;
                if ((previous != value))
                {
                    this.ValidateProperty("Motherboard", value);
                    if ((previous != null))
                    {
                        this._motherboard.Entity = null;
                        previous.Assemblys.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.MotherBoardId = value.Id;
                    }
                    else
                    {
                        this.MotherBoardId = default(int);
                    }
                    this._motherboard.Entity = value;
                    if ((value != null))
                    {
                        value.Assemblys.Add(this);
                    }
                    this.RaisePropertyChanged("Motherboard");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'MotherBoardId' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public int MotherBoardId
        {
            get
            {
                return this._motherBoardId;
            }
            set
            {
                if ((this._motherBoardId != value))
                {
                    this.OnMotherBoardIdChanging(value);
                    this.RaiseDataMemberChanging("MotherBoardId");
                    this.ValidateProperty("MotherBoardId", value);
                    this._motherBoardId = value;
                    this.RaiseDataMemberChanged("MotherBoardId");
                    this.OnMotherBoardIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="PSU"/> entity.
        /// </summary>
        [Association("PSU_Assembly", "PSUId", "Id", IsForeignKey=true)]
        [XmlIgnore()]
        public PSU PSU
        {
            get
            {
                if ((this._psu == null))
                {
                    this._psu = new EntityRef<PSU>(this, "PSU", this.FilterPSU);
                }
                return this._psu.Entity;
            }
            set
            {
                PSU previous = this.PSU;
                if ((previous != value))
                {
                    this.ValidateProperty("PSU", value);
                    if ((previous != null))
                    {
                        this._psu.Entity = null;
                        previous.Assemblys.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.PSUId = value.Id;
                    }
                    else
                    {
                        this.PSUId = default(int);
                    }
                    this._psu.Entity = value;
                    if ((value != null))
                    {
                        value.Assemblys.Add(this);
                    }
                    this.RaisePropertyChanged("PSU");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'PSUId' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public int PSUId
        {
            get
            {
                return this._psuId;
            }
            set
            {
                if ((this._psuId != value))
                {
                    this.OnPSUIdChanging(value);
                    this.RaiseDataMemberChanging("PSUId");
                    this.ValidateProperty("PSUId", value);
                    this._psuId = value;
                    this.RaiseDataMemberChanged("PSUId");
                    this.OnPSUIdChanged();
                }
            }
        }
        
        private bool FilterBody(Body entity)
        {
            return (entity.Id == this.BodyId);
        }
        
        private bool FilterCooler(Cooler entity)
        {
            return (entity.Id == this.CoolerId);
        }
        
        private bool FilterCPU(CPU entity)
        {
            return (entity.Id == this.CPUId);
        }
        
        private bool FilterGPU(GPU entity)
        {
            return (entity.Id == this.GPUId);
        }
        
        private bool FilterHardDrive(HardDrive entity)
        {
            return (entity.Id == this.HardDriveId);
        }
        
        private bool FilterMemory(Memory entity)
        {
            return (entity.Id == this.MemoryId);
        }
        
        private bool FilterMotherboard(Motherboard entity)
        {
            return (entity.Id == this.MotherBoardId);
        }
        
        private bool FilterPSU(PSU entity)
        {
            return (entity.Id == this.PSUId);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._id;
        }
    }
    
    /// <summary>
    /// The DomainContext corresponding to the 'AuthenticationService' DomainService.
    /// </summary>
    public sealed partial class AuthenticationContext : global::System.ServiceModel.DomainServices.Client.ApplicationServices.AuthenticationDomainContextBase
    {
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="AuthenticationContext"/> class.
        /// </summary>
        public AuthenticationContext() : 
                this(new WebDomainClient<IAuthenticationServiceContract>(new Uri("Lecon-Web-AuthenticationService.svc", UriKind.Relative)))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="AuthenticationContext"/> class with the specified service URI.
        /// </summary>
        /// <param name="serviceUri">The AuthenticationService service URI.</param>
        public AuthenticationContext(Uri serviceUri) : 
                this(new WebDomainClient<IAuthenticationServiceContract>(serviceUri))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="AuthenticationContext"/> class with the specified <paramref name="domainClient"/>.
        /// </summary>
        /// <param name="domainClient">The DomainClient instance to use for this DomainContext.</param>
        public AuthenticationContext(DomainClient domainClient) : 
                base(domainClient)
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets the set of <see cref="User"/> entity instances that have been loaded into this <see cref="AuthenticationContext"/> instance.
        /// </summary>
        public EntitySet<User> Users
        {
            get
            {
                return base.EntityContainer.GetEntitySet<User>();
            }
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="User"/> entity instances using the 'GetUser' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="User"/> entity instances.</returns>
        public EntityQuery<User> GetUserQuery()
        {
            this.ValidateMethod("GetUserQuery", null);
            return base.CreateQuery<User>("GetUser", null, false, false);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="User"/> entity instances using the 'Login' query.
        /// </summary>
        /// <param name="userName">The value for the 'userName' parameter of the query.</param>
        /// <param name="password">The value for the 'password' parameter of the query.</param>
        /// <param name="isPersistent">The value for the 'isPersistent' parameter of the query.</param>
        /// <param name="customData">The value for the 'customData' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="User"/> entity instances.</returns>
        public EntityQuery<User> LoginQuery(string userName, string password, bool isPersistent, string customData)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("userName", userName);
            parameters.Add("password", password);
            parameters.Add("isPersistent", isPersistent);
            parameters.Add("customData", customData);
            this.ValidateMethod("LoginQuery", parameters);
            return base.CreateQuery<User>("Login", parameters, true, false);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="User"/> entity instances using the 'Logout' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="User"/> entity instances.</returns>
        public EntityQuery<User> LogoutQuery()
        {
            this.ValidateMethod("LogoutQuery", null);
            return base.CreateQuery<User>("Logout", null, true, false);
        }
        
        /// <summary>
        /// Creates a new EntityContainer for this DomainContext's EntitySets.
        /// </summary>
        /// <returns>A new container instance.</returns>
        protected override EntityContainer CreateEntityContainer()
        {
            return new AuthenticationContextEntityContainer();
        }
        
        /// <summary>
        /// Service contract for the 'AuthenticationService' DomainService.
        /// </summary>
        [ServiceContract()]
        public interface IAuthenticationServiceContract
        {
            
            /// <summary>
            /// Asynchronously invokes the 'GetUser' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/AuthenticationService/GetUserDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/AuthenticationService/GetUser", ReplyAction="http://tempuri.org/AuthenticationService/GetUserResponse")]
            [WebGet()]
            IAsyncResult BeginGetUser(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetUser'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetUser'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetUser' operation.</returns>
            QueryResult<User> EndGetUser(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'Login' operation.
            /// </summary>
            /// <param name="userName">The value for the 'userName' parameter of this action.</param>
            /// <param name="password">The value for the 'password' parameter of this action.</param>
            /// <param name="isPersistent">The value for the 'isPersistent' parameter of this action.</param>
            /// <param name="customData">The value for the 'customData' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/AuthenticationService/LoginDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/AuthenticationService/Login", ReplyAction="http://tempuri.org/AuthenticationService/LoginResponse")]
            IAsyncResult BeginLogin(string userName, string password, bool isPersistent, string customData, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginLogin'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginLogin'.</param>
            /// <returns>The 'QueryResult' returned from the 'Login' operation.</returns>
            QueryResult<User> EndLogin(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'Logout' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/AuthenticationService/LogoutDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/AuthenticationService/Logout", ReplyAction="http://tempuri.org/AuthenticationService/LogoutResponse")]
            IAsyncResult BeginLogout(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginLogout'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginLogout'.</param>
            /// <returns>The 'QueryResult' returned from the 'Logout' operation.</returns>
            QueryResult<User> EndLogout(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'SubmitChanges' operation.
            /// </summary>
            /// <param name="changeSet">The change-set to submit.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/AuthenticationService/SubmitChangesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/AuthenticationService/SubmitChanges", ReplyAction="http://tempuri.org/AuthenticationService/SubmitChangesResponse")]
            IAsyncResult BeginSubmitChanges(IEnumerable<ChangeSetEntry> changeSet, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginSubmitChanges'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginSubmitChanges'.</param>
            /// <returns>The collection of change-set entry elements returned from 'SubmitChanges'.</returns>
            IEnumerable<ChangeSetEntry> EndSubmitChanges(IAsyncResult result);
        }
        
        internal sealed class AuthenticationContextEntityContainer : EntityContainer
        {
            
            public AuthenticationContextEntityContainer()
            {
                this.CreateEntitySet<User>(EntitySetOperations.Edit);
            }
        }
    }
    
    /// <summary>
    /// The 'Body' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/Lecon.Web")]
    public sealed partial class Body : Entity
    {
        
        private EntityCollection<Assembly> _assemblys;
        
        private EntityRef<Cooler> _cooler;
        
        private Nullable<int> _coolerId;
        
        private EntityRef<Device> _device;
        
        private int _deviceId;
        
        private EntityRef<FormFactor> _formFactor;
        
        private int _formFactorId;
        
        private int _id;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnCoolerIdChanging(Nullable<int> value);
        partial void OnCoolerIdChanged();
        partial void OnDeviceIdChanging(int value);
        partial void OnDeviceIdChanged();
        partial void OnFormFactorIdChanging(int value);
        partial void OnFormFactorIdChanged();
        partial void OnIdChanging(int value);
        partial void OnIdChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="Body"/> class.
        /// </summary>
        public Body()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="Assembly"/> entity instances.
        /// </summary>
        [Association("Body_Assembly", "Id", "BodyId")]
        [XmlIgnore()]
        public EntityCollection<Assembly> Assemblys
        {
            get
            {
                if ((this._assemblys == null))
                {
                    this._assemblys = new EntityCollection<Assembly>(this, "Assemblys", this.FilterAssemblys, this.AttachAssemblys, this.DetachAssemblys);
                }
                return this._assemblys;
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Cooler"/> entity.
        /// </summary>
        [Association("Cooler_Body", "CoolerId", "Id", IsForeignKey=true)]
        [XmlIgnore()]
        public Cooler Cooler
        {
            get
            {
                if ((this._cooler == null))
                {
                    this._cooler = new EntityRef<Cooler>(this, "Cooler", this.FilterCooler);
                }
                return this._cooler.Entity;
            }
            set
            {
                Cooler previous = this.Cooler;
                if ((previous != value))
                {
                    this.ValidateProperty("Cooler", value);
                    if ((previous != null))
                    {
                        this._cooler.Entity = null;
                        previous.Bodys.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.CoolerId = value.Id;
                    }
                    else
                    {
                        this.CoolerId = default(Nullable<int>);
                    }
                    this._cooler.Entity = value;
                    if ((value != null))
                    {
                        value.Bodys.Add(this);
                    }
                    this.RaisePropertyChanged("Cooler");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'CoolerId' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public Nullable<int> CoolerId
        {
            get
            {
                return this._coolerId;
            }
            set
            {
                if ((this._coolerId != value))
                {
                    this.OnCoolerIdChanging(value);
                    this.RaiseDataMemberChanging("CoolerId");
                    this.ValidateProperty("CoolerId", value);
                    this._coolerId = value;
                    this.RaiseDataMemberChanged("CoolerId");
                    this.OnCoolerIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Device"/> entity.
        /// </summary>
        [Association("Device_Body", "DeviceId", "Id", IsForeignKey=true)]
        [XmlIgnore()]
        public Device Device
        {
            get
            {
                if ((this._device == null))
                {
                    this._device = new EntityRef<Device>(this, "Device", this.FilterDevice);
                }
                return this._device.Entity;
            }
            set
            {
                Device previous = this.Device;
                if ((previous != value))
                {
                    this.ValidateProperty("Device", value);
                    if ((previous != null))
                    {
                        this._device.Entity = null;
                        previous.Bodys.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.DeviceId = value.Id;
                    }
                    else
                    {
                        this.DeviceId = default(int);
                    }
                    this._device.Entity = value;
                    if ((value != null))
                    {
                        value.Bodys.Add(this);
                    }
                    this.RaisePropertyChanged("Device");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'DeviceId' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public int DeviceId
        {
            get
            {
                return this._deviceId;
            }
            set
            {
                if ((this._deviceId != value))
                {
                    this.OnDeviceIdChanging(value);
                    this.RaiseDataMemberChanging("DeviceId");
                    this.ValidateProperty("DeviceId", value);
                    this._deviceId = value;
                    this.RaiseDataMemberChanged("DeviceId");
                    this.OnDeviceIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="FormFactor"/> entity.
        /// </summary>
        [Association("FormFactor_Body", "FormFactorId", "Id", IsForeignKey=true)]
        [XmlIgnore()]
        public FormFactor FormFactor
        {
            get
            {
                if ((this._formFactor == null))
                {
                    this._formFactor = new EntityRef<FormFactor>(this, "FormFactor", this.FilterFormFactor);
                }
                return this._formFactor.Entity;
            }
            set
            {
                FormFactor previous = this.FormFactor;
                if ((previous != value))
                {
                    this.ValidateProperty("FormFactor", value);
                    if ((previous != null))
                    {
                        this._formFactor.Entity = null;
                        previous.Bodys.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.FormFactorId = value.Id;
                    }
                    else
                    {
                        this.FormFactorId = default(int);
                    }
                    this._formFactor.Entity = value;
                    if ((value != null))
                    {
                        value.Bodys.Add(this);
                    }
                    this.RaisePropertyChanged("FormFactor");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'FormFactorId' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public int FormFactorId
        {
            get
            {
                return this._formFactorId;
            }
            set
            {
                if ((this._formFactorId != value))
                {
                    this.OnFormFactorIdChanging(value);
                    this.RaiseDataMemberChanging("FormFactorId");
                    this.ValidateProperty("FormFactorId", value);
                    this._formFactorId = value;
                    this.RaiseDataMemberChanged("FormFactorId");
                    this.OnFormFactorIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Id' value.
        /// </summary>
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int Id
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    this.OnIdChanging(value);
                    this.ValidateProperty("Id", value);
                    this._id = value;
                    this.RaisePropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }
        
        private void AttachAssemblys(Assembly entity)
        {
            entity.Body = this;
        }
        
        private void DetachAssemblys(Assembly entity)
        {
            entity.Body = null;
        }
        
        private bool FilterAssemblys(Assembly entity)
        {
            return (entity.BodyId == this.Id);
        }
        
        private bool FilterCooler(Cooler entity)
        {
            return (entity.Id == this.CoolerId);
        }
        
        private bool FilterDevice(Device entity)
        {
            return (entity.Id == this.DeviceId);
        }
        
        private bool FilterFormFactor(FormFactor entity)
        {
            return (entity.Id == this.FormFactorId);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._id;
        }
    }
    
    /// <summary>
    /// The 'Chipset' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/Lecon.Web")]
    public sealed partial class Chipset : Entity
    {
        
        private int _id;
        
        private EntityCollection<Motherboard> _motherboard;
        
        private string _name;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnIdChanging(int value);
        partial void OnIdChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="Chipset"/> class.
        /// </summary>
        public Chipset()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'Id' value.
        /// </summary>
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int Id
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    this.OnIdChanging(value);
                    this.ValidateProperty("Id", value);
                    this._id = value;
                    this.RaisePropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="Motherboard"/> entity instances.
        /// </summary>
        [Association("Chipset_Motherboard", "Id", "ChipsetId")]
        [XmlIgnore()]
        public EntityCollection<Motherboard> Motherboard
        {
            get
            {
                if ((this._motherboard == null))
                {
                    this._motherboard = new EntityCollection<Motherboard>(this, "Motherboard", this.FilterMotherboard, this.AttachMotherboard, this.DetachMotherboard);
                }
                return this._motherboard;
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Name' value.
        /// </summary>
        [DataMember()]
        [Required()]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                if ((this._name != value))
                {
                    this.OnNameChanging(value);
                    this.RaiseDataMemberChanging("Name");
                    this.ValidateProperty("Name", value);
                    this._name = value;
                    this.RaiseDataMemberChanged("Name");
                    this.OnNameChanged();
                }
            }
        }
        
        private void AttachMotherboard(Motherboard entity)
        {
            entity.Chipset = this;
        }
        
        private void DetachMotherboard(Motherboard entity)
        {
            entity.Chipset = null;
        }
        
        private bool FilterMotherboard(Motherboard entity)
        {
            return (entity.ChipsetId == this.Id);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._id;
        }
    }
    
    /// <summary>
    /// The 'Cooler' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/Lecon.Web")]
    public sealed partial class Cooler : Entity
    {
        
        private EntityCollection<Assembly> _assembly;
        
        private EntityCollection<Body> _bodys;
        
        private EntityRef<Device> _device;
        
        private int _deviceId;
        
        private EntityRef<DeviceType> _deviceType;
        
        private int _deviceTypeId;
        
        private EntityCollection<GPU> _gpUs;
        
        private int _id;
        
        private EntityRef<PowerType> _powerType;
        
        private int _powerTypeId;
        
        private short _rotation;
        
        private short _size;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnDeviceIdChanging(int value);
        partial void OnDeviceIdChanged();
        partial void OnDeviceTypeIdChanging(int value);
        partial void OnDeviceTypeIdChanged();
        partial void OnIdChanging(int value);
        partial void OnIdChanged();
        partial void OnPowerTypeIdChanging(int value);
        partial void OnPowerTypeIdChanged();
        partial void OnRotationChanging(short value);
        partial void OnRotationChanged();
        partial void OnSizeChanging(short value);
        partial void OnSizeChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="Cooler"/> class.
        /// </summary>
        public Cooler()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="Assembly"/> entity instances.
        /// </summary>
        [Association("Cooler_Assembly", "Id", "CoolerId")]
        [XmlIgnore()]
        public EntityCollection<Assembly> Assembly
        {
            get
            {
                if ((this._assembly == null))
                {
                    this._assembly = new EntityCollection<Assembly>(this, "Assembly", this.FilterAssembly, this.AttachAssembly, this.DetachAssembly);
                }
                return this._assembly;
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="Body"/> entity instances.
        /// </summary>
        [Association("Cooler_Body", "Id", "CoolerId")]
        [XmlIgnore()]
        public EntityCollection<Body> Bodys
        {
            get
            {
                if ((this._bodys == null))
                {
                    this._bodys = new EntityCollection<Body>(this, "Bodys", this.FilterBodys, this.AttachBodys, this.DetachBodys);
                }
                return this._bodys;
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Device"/> entity.
        /// </summary>
        [Association("Device_Cooler", "DeviceId", "Id", IsForeignKey=true)]
        [XmlIgnore()]
        public Device Device
        {
            get
            {
                if ((this._device == null))
                {
                    this._device = new EntityRef<Device>(this, "Device", this.FilterDevice);
                }
                return this._device.Entity;
            }
            set
            {
                Device previous = this.Device;
                if ((previous != value))
                {
                    this.ValidateProperty("Device", value);
                    if ((previous != null))
                    {
                        this._device.Entity = null;
                        previous.Coolers.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.DeviceId = value.Id;
                    }
                    else
                    {
                        this.DeviceId = default(int);
                    }
                    this._device.Entity = value;
                    if ((value != null))
                    {
                        value.Coolers.Add(this);
                    }
                    this.RaisePropertyChanged("Device");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'DeviceId' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public int DeviceId
        {
            get
            {
                return this._deviceId;
            }
            set
            {
                if ((this._deviceId != value))
                {
                    this.OnDeviceIdChanging(value);
                    this.RaiseDataMemberChanging("DeviceId");
                    this.ValidateProperty("DeviceId", value);
                    this._deviceId = value;
                    this.RaiseDataMemberChanged("DeviceId");
                    this.OnDeviceIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="DeviceType"/> entity.
        /// </summary>
        [Association("DeviceType_Cooler", "DeviceTypeId", "Id", IsForeignKey=true)]
        [XmlIgnore()]
        public DeviceType DeviceType
        {
            get
            {
                if ((this._deviceType == null))
                {
                    this._deviceType = new EntityRef<DeviceType>(this, "DeviceType", this.FilterDeviceType);
                }
                return this._deviceType.Entity;
            }
            set
            {
                DeviceType previous = this.DeviceType;
                if ((previous != value))
                {
                    this.ValidateProperty("DeviceType", value);
                    if ((previous != null))
                    {
                        this._deviceType.Entity = null;
                        previous.Coolers.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.DeviceTypeId = value.Id;
                    }
                    else
                    {
                        this.DeviceTypeId = default(int);
                    }
                    this._deviceType.Entity = value;
                    if ((value != null))
                    {
                        value.Coolers.Add(this);
                    }
                    this.RaisePropertyChanged("DeviceType");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'DeviceTypeId' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public int DeviceTypeId
        {
            get
            {
                return this._deviceTypeId;
            }
            set
            {
                if ((this._deviceTypeId != value))
                {
                    this.OnDeviceTypeIdChanging(value);
                    this.RaiseDataMemberChanging("DeviceTypeId");
                    this.ValidateProperty("DeviceTypeId", value);
                    this._deviceTypeId = value;
                    this.RaiseDataMemberChanged("DeviceTypeId");
                    this.OnDeviceTypeIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="GPU"/> entity instances.
        /// </summary>
        [Association("Cooler_GPU", "Id", "CoolerId")]
        [XmlIgnore()]
        public EntityCollection<GPU> GPUs
        {
            get
            {
                if ((this._gpUs == null))
                {
                    this._gpUs = new EntityCollection<GPU>(this, "GPUs", this.FilterGPUs, this.AttachGPUs, this.DetachGPUs);
                }
                return this._gpUs;
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Id' value.
        /// </summary>
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int Id
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    this.OnIdChanging(value);
                    this.ValidateProperty("Id", value);
                    this._id = value;
                    this.RaisePropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="PowerType"/> entity.
        /// </summary>
        [Association("PowerType_Cooler", "PowerTypeId", "Id", IsForeignKey=true)]
        [XmlIgnore()]
        public PowerType PowerType
        {
            get
            {
                if ((this._powerType == null))
                {
                    this._powerType = new EntityRef<PowerType>(this, "PowerType", this.FilterPowerType);
                }
                return this._powerType.Entity;
            }
            set
            {
                PowerType previous = this.PowerType;
                if ((previous != value))
                {
                    this.ValidateProperty("PowerType", value);
                    if ((previous != null))
                    {
                        this._powerType.Entity = null;
                        previous.Coolers.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.PowerTypeId = value.Id;
                    }
                    else
                    {
                        this.PowerTypeId = default(int);
                    }
                    this._powerType.Entity = value;
                    if ((value != null))
                    {
                        value.Coolers.Add(this);
                    }
                    this.RaisePropertyChanged("PowerType");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'PowerTypeId' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public int PowerTypeId
        {
            get
            {
                return this._powerTypeId;
            }
            set
            {
                if ((this._powerTypeId != value))
                {
                    this.OnPowerTypeIdChanging(value);
                    this.RaiseDataMemberChanging("PowerTypeId");
                    this.ValidateProperty("PowerTypeId", value);
                    this._powerTypeId = value;
                    this.RaiseDataMemberChanged("PowerTypeId");
                    this.OnPowerTypeIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Rotation' value.
        /// </summary>
        [DataMember()]
        public short Rotation
        {
            get
            {
                return this._rotation;
            }
            set
            {
                if ((this._rotation != value))
                {
                    this.OnRotationChanging(value);
                    this.RaiseDataMemberChanging("Rotation");
                    this.ValidateProperty("Rotation", value);
                    this._rotation = value;
                    this.RaiseDataMemberChanged("Rotation");
                    this.OnRotationChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Size' value.
        /// </summary>
        [DataMember()]
        public short Size
        {
            get
            {
                return this._size;
            }
            set
            {
                if ((this._size != value))
                {
                    this.OnSizeChanging(value);
                    this.RaiseDataMemberChanging("Size");
                    this.ValidateProperty("Size", value);
                    this._size = value;
                    this.RaiseDataMemberChanged("Size");
                    this.OnSizeChanged();
                }
            }
        }
        
        private void AttachAssembly(Assembly entity)
        {
            entity.Cooler = this;
        }
        
        private void DetachAssembly(Assembly entity)
        {
            entity.Cooler = null;
        }
        
        private bool FilterAssembly(Assembly entity)
        {
            return (entity.CoolerId == this.Id);
        }
        
        private void AttachBodys(Body entity)
        {
            entity.Cooler = this;
        }
        
        private void DetachBodys(Body entity)
        {
            entity.Cooler = null;
        }
        
        private bool FilterBodys(Body entity)
        {
            return (entity.CoolerId == this.Id);
        }
        
        private bool FilterDevice(Device entity)
        {
            return (entity.Id == this.DeviceId);
        }
        
        private bool FilterDeviceType(DeviceType entity)
        {
            return (entity.Id == this.DeviceTypeId);
        }
        
        private void AttachGPUs(GPU entity)
        {
            entity.Cooler = this;
        }
        
        private void DetachGPUs(GPU entity)
        {
            entity.Cooler = null;
        }
        
        private bool FilterGPUs(GPU entity)
        {
            return (entity.CoolerId == this.Id);
        }
        
        private bool FilterPowerType(PowerType entity)
        {
            return (entity.Id == this.PowerTypeId);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._id;
        }
    }
    
    /// <summary>
    /// The 'CPU' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/Lecon.Web")]
    public sealed partial class CPU : Entity
    {
        
        private EntityCollection<Assembly> _assemblys;
        
        private short _cores;
        
        private EntityRef<Device> _device;
        
        private int _deviceId;
        
        private double _frequency;
        
        private EntityRef<GPU> _gpu;
        
        private Nullable<int> _gpuId;
        
        private int _id;
        
        private EntityRef<Socket> _socket;
        
        private int _socketId;
        
        private short _сacheOne;
        
        private short _сacheThree;
        
        private short _сacheTwo;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnCoresChanging(short value);
        partial void OnCoresChanged();
        partial void OnDeviceIdChanging(int value);
        partial void OnDeviceIdChanged();
        partial void OnFrequencyChanging(double value);
        partial void OnFrequencyChanged();
        partial void OnGPUIdChanging(Nullable<int> value);
        partial void OnGPUIdChanged();
        partial void OnIdChanging(int value);
        partial void OnIdChanged();
        partial void OnSocketIdChanging(int value);
        partial void OnSocketIdChanged();
        partial void OnСacheOneChanging(short value);
        partial void OnСacheOneChanged();
        partial void OnСacheThreeChanging(short value);
        partial void OnСacheThreeChanged();
        partial void OnСacheTwoChanging(short value);
        partial void OnСacheTwoChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="CPU"/> class.
        /// </summary>
        public CPU()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="Assembly"/> entity instances.
        /// </summary>
        [Association("CPU_Assembly", "Id", "CPUId")]
        [XmlIgnore()]
        public EntityCollection<Assembly> Assemblys
        {
            get
            {
                if ((this._assemblys == null))
                {
                    this._assemblys = new EntityCollection<Assembly>(this, "Assemblys", this.FilterAssemblys, this.AttachAssemblys, this.DetachAssemblys);
                }
                return this._assemblys;
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Cores' value.
        /// </summary>
        [DataMember()]
        public short Cores
        {
            get
            {
                return this._cores;
            }
            set
            {
                if ((this._cores != value))
                {
                    this.OnCoresChanging(value);
                    this.RaiseDataMemberChanging("Cores");
                    this.ValidateProperty("Cores", value);
                    this._cores = value;
                    this.RaiseDataMemberChanged("Cores");
                    this.OnCoresChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Device"/> entity.
        /// </summary>
        [Association("Device_CPU", "DeviceId", "Id", IsForeignKey=true)]
        [XmlIgnore()]
        public Device Device
        {
            get
            {
                if ((this._device == null))
                {
                    this._device = new EntityRef<Device>(this, "Device", this.FilterDevice);
                }
                return this._device.Entity;
            }
            set
            {
                Device previous = this.Device;
                if ((previous != value))
                {
                    this.ValidateProperty("Device", value);
                    if ((previous != null))
                    {
                        this._device.Entity = null;
                        previous.CPUs.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.DeviceId = value.Id;
                    }
                    else
                    {
                        this.DeviceId = default(int);
                    }
                    this._device.Entity = value;
                    if ((value != null))
                    {
                        value.CPUs.Add(this);
                    }
                    this.RaisePropertyChanged("Device");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'DeviceId' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public int DeviceId
        {
            get
            {
                return this._deviceId;
            }
            set
            {
                if ((this._deviceId != value))
                {
                    this.OnDeviceIdChanging(value);
                    this.RaiseDataMemberChanging("DeviceId");
                    this.ValidateProperty("DeviceId", value);
                    this._deviceId = value;
                    this.RaiseDataMemberChanged("DeviceId");
                    this.OnDeviceIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Frequency' value.
        /// </summary>
        [DataMember()]
        public double Frequency
        {
            get
            {
                return this._frequency;
            }
            set
            {
                if ((this._frequency != value))
                {
                    this.OnFrequencyChanging(value);
                    this.RaiseDataMemberChanging("Frequency");
                    this.ValidateProperty("Frequency", value);
                    this._frequency = value;
                    this.RaiseDataMemberChanged("Frequency");
                    this.OnFrequencyChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="GPU"/> entity.
        /// </summary>
        [Association("GPU_CPU", "GPUId", "Id", IsForeignKey=true)]
        [XmlIgnore()]
        public GPU GPU
        {
            get
            {
                if ((this._gpu == null))
                {
                    this._gpu = new EntityRef<GPU>(this, "GPU", this.FilterGPU);
                }
                return this._gpu.Entity;
            }
            set
            {
                GPU previous = this.GPU;
                if ((previous != value))
                {
                    this.ValidateProperty("GPU", value);
                    if ((previous != null))
                    {
                        this._gpu.Entity = null;
                        previous.CPUs.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.GPUId = value.Id;
                    }
                    else
                    {
                        this.GPUId = default(Nullable<int>);
                    }
                    this._gpu.Entity = value;
                    if ((value != null))
                    {
                        value.CPUs.Add(this);
                    }
                    this.RaisePropertyChanged("GPU");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'GPUId' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public Nullable<int> GPUId
        {
            get
            {
                return this._gpuId;
            }
            set
            {
                if ((this._gpuId != value))
                {
                    this.OnGPUIdChanging(value);
                    this.RaiseDataMemberChanging("GPUId");
                    this.ValidateProperty("GPUId", value);
                    this._gpuId = value;
                    this.RaiseDataMemberChanged("GPUId");
                    this.OnGPUIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Id' value.
        /// </summary>
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int Id
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    this.OnIdChanging(value);
                    this.ValidateProperty("Id", value);
                    this._id = value;
                    this.RaisePropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Socket"/> entity.
        /// </summary>
        [Association("Socket_CPU", "SocketId", "Id", IsForeignKey=true)]
        [XmlIgnore()]
        public Socket Socket
        {
            get
            {
                if ((this._socket == null))
                {
                    this._socket = new EntityRef<Socket>(this, "Socket", this.FilterSocket);
                }
                return this._socket.Entity;
            }
            set
            {
                Socket previous = this.Socket;
                if ((previous != value))
                {
                    this.ValidateProperty("Socket", value);
                    if ((previous != null))
                    {
                        this._socket.Entity = null;
                        previous.CPUs.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.SocketId = value.Id;
                    }
                    else
                    {
                        this.SocketId = default(int);
                    }
                    this._socket.Entity = value;
                    if ((value != null))
                    {
                        value.CPUs.Add(this);
                    }
                    this.RaisePropertyChanged("Socket");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'SocketId' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public int SocketId
        {
            get
            {
                return this._socketId;
            }
            set
            {
                if ((this._socketId != value))
                {
                    this.OnSocketIdChanging(value);
                    this.RaiseDataMemberChanging("SocketId");
                    this.ValidateProperty("SocketId", value);
                    this._socketId = value;
                    this.RaiseDataMemberChanged("SocketId");
                    this.OnSocketIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'СacheOne' value.
        /// </summary>
        [DataMember()]
        public short СacheOne
        {
            get
            {
                return this._сacheOne;
            }
            set
            {
                if ((this._сacheOne != value))
                {
                    this.OnСacheOneChanging(value);
                    this.RaiseDataMemberChanging("СacheOne");
                    this.ValidateProperty("СacheOne", value);
                    this._сacheOne = value;
                    this.RaiseDataMemberChanged("СacheOne");
                    this.OnСacheOneChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'СacheThree' value.
        /// </summary>
        [DataMember()]
        public short СacheThree
        {
            get
            {
                return this._сacheThree;
            }
            set
            {
                if ((this._сacheThree != value))
                {
                    this.OnСacheThreeChanging(value);
                    this.RaiseDataMemberChanging("СacheThree");
                    this.ValidateProperty("СacheThree", value);
                    this._сacheThree = value;
                    this.RaiseDataMemberChanged("СacheThree");
                    this.OnСacheThreeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'СacheTwo' value.
        /// </summary>
        [DataMember()]
        public short СacheTwo
        {
            get
            {
                return this._сacheTwo;
            }
            set
            {
                if ((this._сacheTwo != value))
                {
                    this.OnСacheTwoChanging(value);
                    this.RaiseDataMemberChanging("СacheTwo");
                    this.ValidateProperty("СacheTwo", value);
                    this._сacheTwo = value;
                    this.RaiseDataMemberChanged("СacheTwo");
                    this.OnСacheTwoChanged();
                }
            }
        }
        
        private void AttachAssemblys(Assembly entity)
        {
            entity.CPU = this;
        }
        
        private void DetachAssemblys(Assembly entity)
        {
            entity.CPU = null;
        }
        
        private bool FilterAssemblys(Assembly entity)
        {
            return (entity.CPUId == this.Id);
        }
        
        private bool FilterDevice(Device entity)
        {
            return (entity.Id == this.DeviceId);
        }
        
        private bool FilterGPU(GPU entity)
        {
            return (entity.Id == this.GPUId);
        }
        
        private bool FilterSocket(Socket entity)
        {
            return (entity.Id == this.SocketId);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._id;
        }
    }
    
    public enum CreateUserStatus
    {
        
        Success = 0,
        
        InvalidUserName = 1,
        
        InvalidPassword = 2,
        
        InvalidQuestion = 3,
        
        InvalidAnswer = 4,
        
        InvalidEmail = 5,
        
        DuplicateUserName = 6,
        
        DuplicateEmail = 7,
        
        Failure = 8,
    }
    
    /// <summary>
    /// The 'Device' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/Lecon.Web")]
    public sealed partial class Device : Entity
    {
        
        private EntityCollection<Body> _bodys;
        
        private EntityCollection<Cooler> _coolers;
        
        private EntityCollection<CPU> _cpUs;
        
        private EntityCollection<GPU> _gpUs;
        
        private EntityCollection<HardDrive> _hardDrives;
        
        private int _id;
        
        private EntityRef<Manufacturer> _manufacturer;
        
        private int _manufacturerId;
        
        private EntityCollection<Memory> _memorys;
        
        private string _model;
        
        private EntityCollection<Motherboard> _motherboards;
        
        private double _price;
        
        private EntityCollection<PSU> _psUs;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnIdChanging(int value);
        partial void OnIdChanged();
        partial void OnManufacturerIdChanging(int value);
        partial void OnManufacturerIdChanged();
        partial void OnModelChanging(string value);
        partial void OnModelChanged();
        partial void OnPriceChanging(double value);
        partial void OnPriceChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="Device"/> class.
        /// </summary>
        public Device()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="Body"/> entity instances.
        /// </summary>
        [Association("Device_Body", "Id", "DeviceId")]
        [XmlIgnore()]
        public EntityCollection<Body> Bodys
        {
            get
            {
                if ((this._bodys == null))
                {
                    this._bodys = new EntityCollection<Body>(this, "Bodys", this.FilterBodys, this.AttachBodys, this.DetachBodys);
                }
                return this._bodys;
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="Cooler"/> entity instances.
        /// </summary>
        [Association("Device_Cooler", "Id", "DeviceId")]
        [XmlIgnore()]
        public EntityCollection<Cooler> Coolers
        {
            get
            {
                if ((this._coolers == null))
                {
                    this._coolers = new EntityCollection<Cooler>(this, "Coolers", this.FilterCoolers, this.AttachCoolers, this.DetachCoolers);
                }
                return this._coolers;
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="CPU"/> entity instances.
        /// </summary>
        [Association("Device_CPU", "Id", "DeviceId")]
        [XmlIgnore()]
        public EntityCollection<CPU> CPUs
        {
            get
            {
                if ((this._cpUs == null))
                {
                    this._cpUs = new EntityCollection<CPU>(this, "CPUs", this.FilterCPUs, this.AttachCPUs, this.DetachCPUs);
                }
                return this._cpUs;
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="GPU"/> entity instances.
        /// </summary>
        [Association("Device_GPU", "Id", "DeviceId")]
        [XmlIgnore()]
        public EntityCollection<GPU> GPUs
        {
            get
            {
                if ((this._gpUs == null))
                {
                    this._gpUs = new EntityCollection<GPU>(this, "GPUs", this.FilterGPUs, this.AttachGPUs, this.DetachGPUs);
                }
                return this._gpUs;
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="HardDrive"/> entity instances.
        /// </summary>
        [Association("Device_HardDrive", "Id", "DeviceId")]
        [XmlIgnore()]
        public EntityCollection<HardDrive> HardDrives
        {
            get
            {
                if ((this._hardDrives == null))
                {
                    this._hardDrives = new EntityCollection<HardDrive>(this, "HardDrives", this.FilterHardDrives, this.AttachHardDrives, this.DetachHardDrives);
                }
                return this._hardDrives;
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Id' value.
        /// </summary>
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int Id
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    this.OnIdChanging(value);
                    this.ValidateProperty("Id", value);
                    this._id = value;
                    this.RaisePropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Manufacturer"/> entity.
        /// </summary>
        [Association("Manufacturer_Device", "ManufacturerId", "Id", IsForeignKey=true)]
        [XmlIgnore()]
        public Manufacturer Manufacturer
        {
            get
            {
                if ((this._manufacturer == null))
                {
                    this._manufacturer = new EntityRef<Manufacturer>(this, "Manufacturer", this.FilterManufacturer);
                }
                return this._manufacturer.Entity;
            }
            set
            {
                Manufacturer previous = this.Manufacturer;
                if ((previous != value))
                {
                    this.ValidateProperty("Manufacturer", value);
                    if ((previous != null))
                    {
                        this._manufacturer.Entity = null;
                        previous.Devices.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.ManufacturerId = value.Id;
                    }
                    else
                    {
                        this.ManufacturerId = default(int);
                    }
                    this._manufacturer.Entity = value;
                    if ((value != null))
                    {
                        value.Devices.Add(this);
                    }
                    this.RaisePropertyChanged("Manufacturer");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ManufacturerId' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public int ManufacturerId
        {
            get
            {
                return this._manufacturerId;
            }
            set
            {
                if ((this._manufacturerId != value))
                {
                    this.OnManufacturerIdChanging(value);
                    this.RaiseDataMemberChanging("ManufacturerId");
                    this.ValidateProperty("ManufacturerId", value);
                    this._manufacturerId = value;
                    this.RaiseDataMemberChanged("ManufacturerId");
                    this.OnManufacturerIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="Memory"/> entity instances.
        /// </summary>
        [Association("Device_Memory", "Id", "DeviceId")]
        [XmlIgnore()]
        public EntityCollection<Memory> Memorys
        {
            get
            {
                if ((this._memorys == null))
                {
                    this._memorys = new EntityCollection<Memory>(this, "Memorys", this.FilterMemorys, this.AttachMemorys, this.DetachMemorys);
                }
                return this._memorys;
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Model' value.
        /// </summary>
        [DataMember()]
        [Required()]
        public string Model
        {
            get
            {
                return this._model;
            }
            set
            {
                if ((this._model != value))
                {
                    this.OnModelChanging(value);
                    this.RaiseDataMemberChanging("Model");
                    this.ValidateProperty("Model", value);
                    this._model = value;
                    this.RaiseDataMemberChanged("Model");
                    this.OnModelChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="Motherboard"/> entity instances.
        /// </summary>
        [Association("Device_Motherboard", "Id", "DeviceId")]
        [XmlIgnore()]
        public EntityCollection<Motherboard> Motherboards
        {
            get
            {
                if ((this._motherboards == null))
                {
                    this._motherboards = new EntityCollection<Motherboard>(this, "Motherboards", this.FilterMotherboards, this.AttachMotherboards, this.DetachMotherboards);
                }
                return this._motherboards;
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Price' value.
        /// </summary>
        [DataMember()]
        public double Price
        {
            get
            {
                return this._price;
            }
            set
            {
                if ((this._price != value))
                {
                    this.OnPriceChanging(value);
                    this.RaiseDataMemberChanging("Price");
                    this.ValidateProperty("Price", value);
                    this._price = value;
                    this.RaiseDataMemberChanged("Price");
                    this.OnPriceChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="PSU"/> entity instances.
        /// </summary>
        [Association("Device_PSU", "Id", "DeviceId")]
        [XmlIgnore()]
        public EntityCollection<PSU> PSUs
        {
            get
            {
                if ((this._psUs == null))
                {
                    this._psUs = new EntityCollection<PSU>(this, "PSUs", this.FilterPSUs, this.AttachPSUs, this.DetachPSUs);
                }
                return this._psUs;
            }
        }
        
        private void AttachBodys(Body entity)
        {
            entity.Device = this;
        }
        
        private void DetachBodys(Body entity)
        {
            entity.Device = null;
        }
        
        private bool FilterBodys(Body entity)
        {
            return (entity.DeviceId == this.Id);
        }
        
        private void AttachCoolers(Cooler entity)
        {
            entity.Device = this;
        }
        
        private void DetachCoolers(Cooler entity)
        {
            entity.Device = null;
        }
        
        private bool FilterCoolers(Cooler entity)
        {
            return (entity.DeviceId == this.Id);
        }
        
        private void AttachCPUs(CPU entity)
        {
            entity.Device = this;
        }
        
        private void DetachCPUs(CPU entity)
        {
            entity.Device = null;
        }
        
        private bool FilterCPUs(CPU entity)
        {
            return (entity.DeviceId == this.Id);
        }
        
        private void AttachGPUs(GPU entity)
        {
            entity.Device = this;
        }
        
        private void DetachGPUs(GPU entity)
        {
            entity.Device = null;
        }
        
        private bool FilterGPUs(GPU entity)
        {
            return (entity.DeviceId == this.Id);
        }
        
        private void AttachHardDrives(HardDrive entity)
        {
            entity.Device = this;
        }
        
        private void DetachHardDrives(HardDrive entity)
        {
            entity.Device = null;
        }
        
        private bool FilterHardDrives(HardDrive entity)
        {
            return (entity.DeviceId == this.Id);
        }
        
        private bool FilterManufacturer(Manufacturer entity)
        {
            return (entity.Id == this.ManufacturerId);
        }
        
        private void AttachMemorys(Memory entity)
        {
            entity.Device = this;
        }
        
        private void DetachMemorys(Memory entity)
        {
            entity.Device = null;
        }
        
        private bool FilterMemorys(Memory entity)
        {
            return (entity.DeviceId == this.Id);
        }
        
        private void AttachMotherboards(Motherboard entity)
        {
            entity.Device = this;
        }
        
        private void DetachMotherboards(Motherboard entity)
        {
            entity.Device = null;
        }
        
        private bool FilterMotherboards(Motherboard entity)
        {
            return (entity.DeviceId == this.Id);
        }
        
        private void AttachPSUs(PSU entity)
        {
            entity.Device = this;
        }
        
        private void DetachPSUs(PSU entity)
        {
            entity.Device = null;
        }
        
        private bool FilterPSUs(PSU entity)
        {
            return (entity.DeviceId == this.Id);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._id;
        }
    }
    
    /// <summary>
    /// The 'DeviceType' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/Lecon.Web")]
    public sealed partial class DeviceType : Entity
    {
        
        private EntityCollection<Cooler> _coolers;
        
        private int _id;
        
        private string _name;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnIdChanging(int value);
        partial void OnIdChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="DeviceType"/> class.
        /// </summary>
        public DeviceType()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="Cooler"/> entity instances.
        /// </summary>
        [Association("DeviceType_Cooler", "Id", "DeviceTypeId")]
        [XmlIgnore()]
        public EntityCollection<Cooler> Coolers
        {
            get
            {
                if ((this._coolers == null))
                {
                    this._coolers = new EntityCollection<Cooler>(this, "Coolers", this.FilterCoolers, this.AttachCoolers, this.DetachCoolers);
                }
                return this._coolers;
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Id' value.
        /// </summary>
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int Id
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    this.OnIdChanging(value);
                    this.ValidateProperty("Id", value);
                    this._id = value;
                    this.RaisePropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Name' value.
        /// </summary>
        [DataMember()]
        [Required()]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                if ((this._name != value))
                {
                    this.OnNameChanging(value);
                    this.RaiseDataMemberChanging("Name");
                    this.ValidateProperty("Name", value);
                    this._name = value;
                    this.RaiseDataMemberChanged("Name");
                    this.OnNameChanged();
                }
            }
        }
        
        private void AttachCoolers(Cooler entity)
        {
            entity.DeviceType = this;
        }
        
        private void DetachCoolers(Cooler entity)
        {
            entity.DeviceType = null;
        }
        
        private bool FilterCoolers(Cooler entity)
        {
            return (entity.DeviceTypeId == this.Id);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._id;
        }
    }
    
    /// <summary>
    /// The 'FormFactor' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/Lecon.Web")]
    public sealed partial class FormFactor : Entity
    {
        
        private EntityCollection<Body> _bodys;
        
        private int _id;
        
        private EntityCollection<Motherboard> _motherboards;
        
        private string _name;
        
        private EntityCollection<PSU> _psUs;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnIdChanging(int value);
        partial void OnIdChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="FormFactor"/> class.
        /// </summary>
        public FormFactor()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="Body"/> entity instances.
        /// </summary>
        [Association("FormFactor_Body", "Id", "FormFactorId")]
        [XmlIgnore()]
        public EntityCollection<Body> Bodys
        {
            get
            {
                if ((this._bodys == null))
                {
                    this._bodys = new EntityCollection<Body>(this, "Bodys", this.FilterBodys, this.AttachBodys, this.DetachBodys);
                }
                return this._bodys;
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Id' value.
        /// </summary>
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int Id
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    this.OnIdChanging(value);
                    this.ValidateProperty("Id", value);
                    this._id = value;
                    this.RaisePropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="Motherboard"/> entity instances.
        /// </summary>
        [Association("FormFactor_Motherboard", "Id", "FormFactorId")]
        [XmlIgnore()]
        public EntityCollection<Motherboard> Motherboards
        {
            get
            {
                if ((this._motherboards == null))
                {
                    this._motherboards = new EntityCollection<Motherboard>(this, "Motherboards", this.FilterMotherboards, this.AttachMotherboards, this.DetachMotherboards);
                }
                return this._motherboards;
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Name' value.
        /// </summary>
        [DataMember()]
        [Required()]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                if ((this._name != value))
                {
                    this.OnNameChanging(value);
                    this.RaiseDataMemberChanging("Name");
                    this.ValidateProperty("Name", value);
                    this._name = value;
                    this.RaiseDataMemberChanged("Name");
                    this.OnNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="PSU"/> entity instances.
        /// </summary>
        [Association("FormFactor_PSU", "Id", "FormFactorId")]
        [XmlIgnore()]
        public EntityCollection<PSU> PSUs
        {
            get
            {
                if ((this._psUs == null))
                {
                    this._psUs = new EntityCollection<PSU>(this, "PSUs", this.FilterPSUs, this.AttachPSUs, this.DetachPSUs);
                }
                return this._psUs;
            }
        }
        
        private void AttachBodys(Body entity)
        {
            entity.FormFactor = this;
        }
        
        private void DetachBodys(Body entity)
        {
            entity.FormFactor = null;
        }
        
        private bool FilterBodys(Body entity)
        {
            return (entity.FormFactorId == this.Id);
        }
        
        private void AttachMotherboards(Motherboard entity)
        {
            entity.FormFactor = this;
        }
        
        private void DetachMotherboards(Motherboard entity)
        {
            entity.FormFactor = null;
        }
        
        private bool FilterMotherboards(Motherboard entity)
        {
            return (entity.FormFactorId == this.Id);
        }
        
        private void AttachPSUs(PSU entity)
        {
            entity.FormFactor = this;
        }
        
        private void DetachPSUs(PSU entity)
        {
            entity.FormFactor = null;
        }
        
        private bool FilterPSUs(PSU entity)
        {
            return (entity.FormFactorId == this.Id);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._id;
        }
    }
    
    /// <summary>
    /// The 'GPU' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/Lecon.Web")]
    public sealed partial class GPU : Entity
    {
        
        private bool _additionalPower;
        
        private EntityCollection<Assembly> _assemblyCollection;
        
        private EntityRef<Cooler> _cooler;
        
        private int _coolerId;
        
        private EntityCollection<CPU> _cpUs;
        
        private EntityRef<Device> _device;
        
        private int _deviceId;
        
        private EntityRef<GraphicChip> _graphicChip;
        
        private int _graphicChipId;
        
        private int _id;
        
        private EntityCollection<Motherboard> _motherboards;
        
        private short _power;
        
        private short _size;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnAdditionalPowerChanging(bool value);
        partial void OnAdditionalPowerChanged();
        partial void OnCoolerIdChanging(int value);
        partial void OnCoolerIdChanged();
        partial void OnDeviceIdChanging(int value);
        partial void OnDeviceIdChanged();
        partial void OnGraphicChipIdChanging(int value);
        partial void OnGraphicChipIdChanged();
        partial void OnIdChanging(int value);
        partial void OnIdChanged();
        partial void OnPowerChanging(short value);
        partial void OnPowerChanged();
        partial void OnSizeChanging(short value);
        partial void OnSizeChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="GPU"/> class.
        /// </summary>
        public GPU()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'AdditionalPower' value.
        /// </summary>
        [DataMember()]
        public bool AdditionalPower
        {
            get
            {
                return this._additionalPower;
            }
            set
            {
                if ((this._additionalPower != value))
                {
                    this.OnAdditionalPowerChanging(value);
                    this.RaiseDataMemberChanging("AdditionalPower");
                    this.ValidateProperty("AdditionalPower", value);
                    this._additionalPower = value;
                    this.RaiseDataMemberChanged("AdditionalPower");
                    this.OnAdditionalPowerChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="Assembly"/> entity instances.
        /// </summary>
        [Association("GPU_Assembly", "Id", "GPUId")]
        [XmlIgnore()]
        public EntityCollection<Assembly> AssemblyCollection
        {
            get
            {
                if ((this._assemblyCollection == null))
                {
                    this._assemblyCollection = new EntityCollection<Assembly>(this, "AssemblyCollection", this.FilterAssemblyCollection, this.AttachAssemblyCollection, this.DetachAssemblyCollection);
                }
                return this._assemblyCollection;
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Cooler"/> entity.
        /// </summary>
        [Association("Cooler_GPU", "CoolerId", "Id", IsForeignKey=true)]
        [XmlIgnore()]
        public Cooler Cooler
        {
            get
            {
                if ((this._cooler == null))
                {
                    this._cooler = new EntityRef<Cooler>(this, "Cooler", this.FilterCooler);
                }
                return this._cooler.Entity;
            }
            set
            {
                Cooler previous = this.Cooler;
                if ((previous != value))
                {
                    this.ValidateProperty("Cooler", value);
                    if ((previous != null))
                    {
                        this._cooler.Entity = null;
                        previous.GPUs.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.CoolerId = value.Id;
                    }
                    else
                    {
                        this.CoolerId = default(int);
                    }
                    this._cooler.Entity = value;
                    if ((value != null))
                    {
                        value.GPUs.Add(this);
                    }
                    this.RaisePropertyChanged("Cooler");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'CoolerId' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public int CoolerId
        {
            get
            {
                return this._coolerId;
            }
            set
            {
                if ((this._coolerId != value))
                {
                    this.OnCoolerIdChanging(value);
                    this.RaiseDataMemberChanging("CoolerId");
                    this.ValidateProperty("CoolerId", value);
                    this._coolerId = value;
                    this.RaiseDataMemberChanged("CoolerId");
                    this.OnCoolerIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="CPU"/> entity instances.
        /// </summary>
        [Association("GPU_CPU", "Id", "GPUId")]
        [XmlIgnore()]
        public EntityCollection<CPU> CPUs
        {
            get
            {
                if ((this._cpUs == null))
                {
                    this._cpUs = new EntityCollection<CPU>(this, "CPUs", this.FilterCPUs, this.AttachCPUs, this.DetachCPUs);
                }
                return this._cpUs;
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Device"/> entity.
        /// </summary>
        [Association("Device_GPU", "DeviceId", "Id", IsForeignKey=true)]
        [XmlIgnore()]
        public Device Device
        {
            get
            {
                if ((this._device == null))
                {
                    this._device = new EntityRef<Device>(this, "Device", this.FilterDevice);
                }
                return this._device.Entity;
            }
            set
            {
                Device previous = this.Device;
                if ((previous != value))
                {
                    this.ValidateProperty("Device", value);
                    if ((previous != null))
                    {
                        this._device.Entity = null;
                        previous.GPUs.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.DeviceId = value.Id;
                    }
                    else
                    {
                        this.DeviceId = default(int);
                    }
                    this._device.Entity = value;
                    if ((value != null))
                    {
                        value.GPUs.Add(this);
                    }
                    this.RaisePropertyChanged("Device");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'DeviceId' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public int DeviceId
        {
            get
            {
                return this._deviceId;
            }
            set
            {
                if ((this._deviceId != value))
                {
                    this.OnDeviceIdChanging(value);
                    this.RaiseDataMemberChanging("DeviceId");
                    this.ValidateProperty("DeviceId", value);
                    this._deviceId = value;
                    this.RaiseDataMemberChanged("DeviceId");
                    this.OnDeviceIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="GraphicChip"/> entity.
        /// </summary>
        [Association("GraphicChip_GPU", "GraphicChipId", "Id", IsForeignKey=true)]
        [XmlIgnore()]
        public GraphicChip GraphicChip
        {
            get
            {
                if ((this._graphicChip == null))
                {
                    this._graphicChip = new EntityRef<GraphicChip>(this, "GraphicChip", this.FilterGraphicChip);
                }
                return this._graphicChip.Entity;
            }
            set
            {
                GraphicChip previous = this.GraphicChip;
                if ((previous != value))
                {
                    this.ValidateProperty("GraphicChip", value);
                    if ((previous != null))
                    {
                        this._graphicChip.Entity = null;
                        previous.GPUs.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.GraphicChipId = value.Id;
                    }
                    else
                    {
                        this.GraphicChipId = default(int);
                    }
                    this._graphicChip.Entity = value;
                    if ((value != null))
                    {
                        value.GPUs.Add(this);
                    }
                    this.RaisePropertyChanged("GraphicChip");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'GraphicChipId' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public int GraphicChipId
        {
            get
            {
                return this._graphicChipId;
            }
            set
            {
                if ((this._graphicChipId != value))
                {
                    this.OnGraphicChipIdChanging(value);
                    this.RaiseDataMemberChanging("GraphicChipId");
                    this.ValidateProperty("GraphicChipId", value);
                    this._graphicChipId = value;
                    this.RaiseDataMemberChanged("GraphicChipId");
                    this.OnGraphicChipIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Id' value.
        /// </summary>
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int Id
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    this.OnIdChanging(value);
                    this.ValidateProperty("Id", value);
                    this._id = value;
                    this.RaisePropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="Motherboard"/> entity instances.
        /// </summary>
        [Association("GPU_Motherboard", "Id", "GPUId")]
        [XmlIgnore()]
        public EntityCollection<Motherboard> Motherboards
        {
            get
            {
                if ((this._motherboards == null))
                {
                    this._motherboards = new EntityCollection<Motherboard>(this, "Motherboards", this.FilterMotherboards, this.AttachMotherboards, this.DetachMotherboards);
                }
                return this._motherboards;
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Power' value.
        /// </summary>
        [DataMember()]
        public short Power
        {
            get
            {
                return this._power;
            }
            set
            {
                if ((this._power != value))
                {
                    this.OnPowerChanging(value);
                    this.RaiseDataMemberChanging("Power");
                    this.ValidateProperty("Power", value);
                    this._power = value;
                    this.RaiseDataMemberChanged("Power");
                    this.OnPowerChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Size' value.
        /// </summary>
        [DataMember()]
        public short Size
        {
            get
            {
                return this._size;
            }
            set
            {
                if ((this._size != value))
                {
                    this.OnSizeChanging(value);
                    this.RaiseDataMemberChanging("Size");
                    this.ValidateProperty("Size", value);
                    this._size = value;
                    this.RaiseDataMemberChanged("Size");
                    this.OnSizeChanged();
                }
            }
        }
        
        private void AttachAssemblyCollection(Assembly entity)
        {
            entity.GPU = this;
        }
        
        private void DetachAssemblyCollection(Assembly entity)
        {
            entity.GPU = null;
        }
        
        private bool FilterAssemblyCollection(Assembly entity)
        {
            return (entity.GPUId == this.Id);
        }
        
        private bool FilterCooler(Cooler entity)
        {
            return (entity.Id == this.CoolerId);
        }
        
        private void AttachCPUs(CPU entity)
        {
            entity.GPU = this;
        }
        
        private void DetachCPUs(CPU entity)
        {
            entity.GPU = null;
        }
        
        private bool FilterCPUs(CPU entity)
        {
            return (entity.GPUId == this.Id);
        }
        
        private bool FilterDevice(Device entity)
        {
            return (entity.Id == this.DeviceId);
        }
        
        private bool FilterGraphicChip(GraphicChip entity)
        {
            return (entity.Id == this.GraphicChipId);
        }
        
        private void AttachMotherboards(Motherboard entity)
        {
            entity.GPU = this;
        }
        
        private void DetachMotherboards(Motherboard entity)
        {
            entity.GPU = null;
        }
        
        private bool FilterMotherboards(Motherboard entity)
        {
            return (entity.GPUId == this.Id);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._id;
        }
    }
    
    /// <summary>
    /// The 'GraphicChip' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/Lecon.Web")]
    public sealed partial class GraphicChip : Entity
    {
        
        private double _frequency;
        
        private EntityCollection<GPU> _gpUs;
        
        private int _id;
        
        private string _name;
        
        private short _сapacity;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnFrequencyChanging(double value);
        partial void OnFrequencyChanged();
        partial void OnIdChanging(int value);
        partial void OnIdChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        partial void OnСapacityChanging(short value);
        partial void OnСapacityChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="GraphicChip"/> class.
        /// </summary>
        public GraphicChip()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'Frequency' value.
        /// </summary>
        [DataMember()]
        public double Frequency
        {
            get
            {
                return this._frequency;
            }
            set
            {
                if ((this._frequency != value))
                {
                    this.OnFrequencyChanging(value);
                    this.RaiseDataMemberChanging("Frequency");
                    this.ValidateProperty("Frequency", value);
                    this._frequency = value;
                    this.RaiseDataMemberChanged("Frequency");
                    this.OnFrequencyChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="GPU"/> entity instances.
        /// </summary>
        [Association("GraphicChip_GPU", "Id", "GraphicChipId")]
        [XmlIgnore()]
        public EntityCollection<GPU> GPUs
        {
            get
            {
                if ((this._gpUs == null))
                {
                    this._gpUs = new EntityCollection<GPU>(this, "GPUs", this.FilterGPUs, this.AttachGPUs, this.DetachGPUs);
                }
                return this._gpUs;
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Id' value.
        /// </summary>
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int Id
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    this.OnIdChanging(value);
                    this.ValidateProperty("Id", value);
                    this._id = value;
                    this.RaisePropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Name' value.
        /// </summary>
        [DataMember()]
        [Required()]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                if ((this._name != value))
                {
                    this.OnNameChanging(value);
                    this.RaiseDataMemberChanging("Name");
                    this.ValidateProperty("Name", value);
                    this._name = value;
                    this.RaiseDataMemberChanged("Name");
                    this.OnNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Сapacity' value.
        /// </summary>
        [DataMember()]
        public short Сapacity
        {
            get
            {
                return this._сapacity;
            }
            set
            {
                if ((this._сapacity != value))
                {
                    this.OnСapacityChanging(value);
                    this.RaiseDataMemberChanging("Сapacity");
                    this.ValidateProperty("Сapacity", value);
                    this._сapacity = value;
                    this.RaiseDataMemberChanged("Сapacity");
                    this.OnСapacityChanged();
                }
            }
        }
        
        private void AttachGPUs(GPU entity)
        {
            entity.GraphicChip = this;
        }
        
        private void DetachGPUs(GPU entity)
        {
            entity.GraphicChip = null;
        }
        
        private bool FilterGPUs(GPU entity)
        {
            return (entity.GraphicChipId == this.Id);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._id;
        }
    }
    
    /// <summary>
    /// The 'HardDrive' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/Lecon.Web")]
    public sealed partial class HardDrive : Entity
    {
        
        private EntityCollection<Assembly> _assemblys;
        
        private short _cache;
        
        private EntityRef<Device> _device;
        
        private int _deviceId;
        
        private int _id;
        
        private EntityRef<PowerType> _powerType;
        
        private int _powerTypeId;
        
        private short _rotation;
        
        private short _size;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnCacheChanging(short value);
        partial void OnCacheChanged();
        partial void OnDeviceIdChanging(int value);
        partial void OnDeviceIdChanged();
        partial void OnIdChanging(int value);
        partial void OnIdChanged();
        partial void OnPowerTypeIdChanging(int value);
        partial void OnPowerTypeIdChanged();
        partial void OnRotationChanging(short value);
        partial void OnRotationChanged();
        partial void OnSizeChanging(short value);
        partial void OnSizeChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="HardDrive"/> class.
        /// </summary>
        public HardDrive()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="Assembly"/> entity instances.
        /// </summary>
        [Association("HardDrive_Assembly", "Id", "HardDriveId")]
        [XmlIgnore()]
        public EntityCollection<Assembly> Assemblys
        {
            get
            {
                if ((this._assemblys == null))
                {
                    this._assemblys = new EntityCollection<Assembly>(this, "Assemblys", this.FilterAssemblys, this.AttachAssemblys, this.DetachAssemblys);
                }
                return this._assemblys;
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Cache' value.
        /// </summary>
        [DataMember()]
        public short Cache
        {
            get
            {
                return this._cache;
            }
            set
            {
                if ((this._cache != value))
                {
                    this.OnCacheChanging(value);
                    this.RaiseDataMemberChanging("Cache");
                    this.ValidateProperty("Cache", value);
                    this._cache = value;
                    this.RaiseDataMemberChanged("Cache");
                    this.OnCacheChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Device"/> entity.
        /// </summary>
        [Association("Device_HardDrive", "DeviceId", "Id", IsForeignKey=true)]
        [XmlIgnore()]
        public Device Device
        {
            get
            {
                if ((this._device == null))
                {
                    this._device = new EntityRef<Device>(this, "Device", this.FilterDevice);
                }
                return this._device.Entity;
            }
            set
            {
                Device previous = this.Device;
                if ((previous != value))
                {
                    this.ValidateProperty("Device", value);
                    if ((previous != null))
                    {
                        this._device.Entity = null;
                        previous.HardDrives.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.DeviceId = value.Id;
                    }
                    else
                    {
                        this.DeviceId = default(int);
                    }
                    this._device.Entity = value;
                    if ((value != null))
                    {
                        value.HardDrives.Add(this);
                    }
                    this.RaisePropertyChanged("Device");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'DeviceId' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public int DeviceId
        {
            get
            {
                return this._deviceId;
            }
            set
            {
                if ((this._deviceId != value))
                {
                    this.OnDeviceIdChanging(value);
                    this.RaiseDataMemberChanging("DeviceId");
                    this.ValidateProperty("DeviceId", value);
                    this._deviceId = value;
                    this.RaiseDataMemberChanged("DeviceId");
                    this.OnDeviceIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Id' value.
        /// </summary>
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int Id
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    this.OnIdChanging(value);
                    this.ValidateProperty("Id", value);
                    this._id = value;
                    this.RaisePropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="PowerType"/> entity.
        /// </summary>
        [Association("PowerType_HardDrive", "PowerTypeId", "Id", IsForeignKey=true)]
        [XmlIgnore()]
        public PowerType PowerType
        {
            get
            {
                if ((this._powerType == null))
                {
                    this._powerType = new EntityRef<PowerType>(this, "PowerType", this.FilterPowerType);
                }
                return this._powerType.Entity;
            }
            set
            {
                PowerType previous = this.PowerType;
                if ((previous != value))
                {
                    this.ValidateProperty("PowerType", value);
                    if ((previous != null))
                    {
                        this._powerType.Entity = null;
                        previous.HardDrives.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.PowerTypeId = value.Id;
                    }
                    else
                    {
                        this.PowerTypeId = default(int);
                    }
                    this._powerType.Entity = value;
                    if ((value != null))
                    {
                        value.HardDrives.Add(this);
                    }
                    this.RaisePropertyChanged("PowerType");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'PowerTypeId' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public int PowerTypeId
        {
            get
            {
                return this._powerTypeId;
            }
            set
            {
                if ((this._powerTypeId != value))
                {
                    this.OnPowerTypeIdChanging(value);
                    this.RaiseDataMemberChanging("PowerTypeId");
                    this.ValidateProperty("PowerTypeId", value);
                    this._powerTypeId = value;
                    this.RaiseDataMemberChanged("PowerTypeId");
                    this.OnPowerTypeIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Rotation' value.
        /// </summary>
        [DataMember()]
        public short Rotation
        {
            get
            {
                return this._rotation;
            }
            set
            {
                if ((this._rotation != value))
                {
                    this.OnRotationChanging(value);
                    this.RaiseDataMemberChanging("Rotation");
                    this.ValidateProperty("Rotation", value);
                    this._rotation = value;
                    this.RaiseDataMemberChanged("Rotation");
                    this.OnRotationChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Size' value.
        /// </summary>
        [DataMember()]
        public short Size
        {
            get
            {
                return this._size;
            }
            set
            {
                if ((this._size != value))
                {
                    this.OnSizeChanging(value);
                    this.RaiseDataMemberChanging("Size");
                    this.ValidateProperty("Size", value);
                    this._size = value;
                    this.RaiseDataMemberChanged("Size");
                    this.OnSizeChanged();
                }
            }
        }
        
        private void AttachAssemblys(Assembly entity)
        {
            entity.HardDrive = this;
        }
        
        private void DetachAssemblys(Assembly entity)
        {
            entity.HardDrive = null;
        }
        
        private bool FilterAssemblys(Assembly entity)
        {
            return (entity.HardDriveId == this.Id);
        }
        
        private bool FilterDevice(Device entity)
        {
            return (entity.Id == this.DeviceId);
        }
        
        private bool FilterPowerType(PowerType entity)
        {
            return (entity.Id == this.PowerTypeId);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._id;
        }
    }
    
    /// <summary>
    /// The DomainContext corresponding to the 'LeconDomainService' DomainService.
    /// </summary>
    public sealed partial class LeconDomainContext : DomainContext
    {
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="LeconDomainContext"/> class.
        /// </summary>
        public LeconDomainContext() : 
                this(new WebDomainClient<ILeconDomainServiceContract>(new Uri("Lecon-Web-LeconDomainService.svc", UriKind.Relative)))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="LeconDomainContext"/> class with the specified service URI.
        /// </summary>
        /// <param name="serviceUri">The LeconDomainService service URI.</param>
        public LeconDomainContext(Uri serviceUri) : 
                this(new WebDomainClient<ILeconDomainServiceContract>(serviceUri))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="LeconDomainContext"/> class with the specified <paramref name="domainClient"/>.
        /// </summary>
        /// <param name="domainClient">The DomainClient instance to use for this DomainContext.</param>
        public LeconDomainContext(DomainClient domainClient) : 
                base(domainClient)
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets the set of <see cref="Assembly"/> entity instances that have been loaded into this <see cref="LeconDomainContext"/> instance.
        /// </summary>
        public EntitySet<Assembly> Assemblies
        {
            get
            {
                return base.EntityContainer.GetEntitySet<Assembly>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="Body"/> entity instances that have been loaded into this <see cref="LeconDomainContext"/> instance.
        /// </summary>
        public EntitySet<Body> Bodies
        {
            get
            {
                return base.EntityContainer.GetEntitySet<Body>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="Chipset"/> entity instances that have been loaded into this <see cref="LeconDomainContext"/> instance.
        /// </summary>
        public EntitySet<Chipset> Chipsets
        {
            get
            {
                return base.EntityContainer.GetEntitySet<Chipset>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="Cooler"/> entity instances that have been loaded into this <see cref="LeconDomainContext"/> instance.
        /// </summary>
        public EntitySet<Cooler> Coolers
        {
            get
            {
                return base.EntityContainer.GetEntitySet<Cooler>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="CPU"/> entity instances that have been loaded into this <see cref="LeconDomainContext"/> instance.
        /// </summary>
        public EntitySet<CPU> CPUs
        {
            get
            {
                return base.EntityContainer.GetEntitySet<CPU>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="Device"/> entity instances that have been loaded into this <see cref="LeconDomainContext"/> instance.
        /// </summary>
        public EntitySet<Device> Devices
        {
            get
            {
                return base.EntityContainer.GetEntitySet<Device>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="DeviceType"/> entity instances that have been loaded into this <see cref="LeconDomainContext"/> instance.
        /// </summary>
        public EntitySet<DeviceType> DeviceTypes
        {
            get
            {
                return base.EntityContainer.GetEntitySet<DeviceType>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="FormFactor"/> entity instances that have been loaded into this <see cref="LeconDomainContext"/> instance.
        /// </summary>
        public EntitySet<FormFactor> FormFactors
        {
            get
            {
                return base.EntityContainer.GetEntitySet<FormFactor>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="GPU"/> entity instances that have been loaded into this <see cref="LeconDomainContext"/> instance.
        /// </summary>
        public EntitySet<GPU> GPUs
        {
            get
            {
                return base.EntityContainer.GetEntitySet<GPU>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="GraphicChip"/> entity instances that have been loaded into this <see cref="LeconDomainContext"/> instance.
        /// </summary>
        public EntitySet<GraphicChip> GraphicChips
        {
            get
            {
                return base.EntityContainer.GetEntitySet<GraphicChip>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="HardDrive"/> entity instances that have been loaded into this <see cref="LeconDomainContext"/> instance.
        /// </summary>
        public EntitySet<HardDrive> HardDrives
        {
            get
            {
                return base.EntityContainer.GetEntitySet<HardDrive>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="Manufacturer"/> entity instances that have been loaded into this <see cref="LeconDomainContext"/> instance.
        /// </summary>
        public EntitySet<Manufacturer> Manufacturers
        {
            get
            {
                return base.EntityContainer.GetEntitySet<Manufacturer>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="Memory"/> entity instances that have been loaded into this <see cref="LeconDomainContext"/> instance.
        /// </summary>
        public EntitySet<Memory> Memories
        {
            get
            {
                return base.EntityContainer.GetEntitySet<Memory>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="MemoryType"/> entity instances that have been loaded into this <see cref="LeconDomainContext"/> instance.
        /// </summary>
        public EntitySet<MemoryType> MemoryTypes
        {
            get
            {
                return base.EntityContainer.GetEntitySet<MemoryType>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="Motherboard"/> entity instances that have been loaded into this <see cref="LeconDomainContext"/> instance.
        /// </summary>
        public EntitySet<Motherboard> Motherboards
        {
            get
            {
                return base.EntityContainer.GetEntitySet<Motherboard>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="PowerType"/> entity instances that have been loaded into this <see cref="LeconDomainContext"/> instance.
        /// </summary>
        public EntitySet<PowerType> PowerTypes
        {
            get
            {
                return base.EntityContainer.GetEntitySet<PowerType>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="PSU"/> entity instances that have been loaded into this <see cref="LeconDomainContext"/> instance.
        /// </summary>
        public EntitySet<PSU> PSUs
        {
            get
            {
                return base.EntityContainer.GetEntitySet<PSU>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="Socket"/> entity instances that have been loaded into this <see cref="LeconDomainContext"/> instance.
        /// </summary>
        public EntitySet<Socket> Sockets
        {
            get
            {
                return base.EntityContainer.GetEntitySet<Socket>();
            }
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="Assembly"/> entity instances using the 'GetAssemblys' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="Assembly"/> entity instances.</returns>
        public EntityQuery<Assembly> GetAssemblysQuery()
        {
            this.ValidateMethod("GetAssemblysQuery", null);
            return base.CreateQuery<Assembly>("GetAssemblys", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="Body"/> entity instances using the 'GetBodys' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="Body"/> entity instances.</returns>
        public EntityQuery<Body> GetBodysQuery()
        {
            this.ValidateMethod("GetBodysQuery", null);
            return base.CreateQuery<Body>("GetBodys", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="Chipset"/> entity instances using the 'GetChipsets' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="Chipset"/> entity instances.</returns>
        public EntityQuery<Chipset> GetChipsetsQuery()
        {
            this.ValidateMethod("GetChipsetsQuery", null);
            return base.CreateQuery<Chipset>("GetChipsets", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="Cooler"/> entity instances using the 'GetCoolers' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="Cooler"/> entity instances.</returns>
        public EntityQuery<Cooler> GetCoolersQuery()
        {
            this.ValidateMethod("GetCoolersQuery", null);
            return base.CreateQuery<Cooler>("GetCoolers", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="CPU"/> entity instances using the 'GetCPUs' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="CPU"/> entity instances.</returns>
        public EntityQuery<CPU> GetCPUsQuery()
        {
            this.ValidateMethod("GetCPUsQuery", null);
            return base.CreateQuery<CPU>("GetCPUs", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="Device"/> entity instances using the 'GetDevices' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="Device"/> entity instances.</returns>
        public EntityQuery<Device> GetDevicesQuery()
        {
            this.ValidateMethod("GetDevicesQuery", null);
            return base.CreateQuery<Device>("GetDevices", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="DeviceType"/> entity instances using the 'GetDeviceTypes' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="DeviceType"/> entity instances.</returns>
        public EntityQuery<DeviceType> GetDeviceTypesQuery()
        {
            this.ValidateMethod("GetDeviceTypesQuery", null);
            return base.CreateQuery<DeviceType>("GetDeviceTypes", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="FormFactor"/> entity instances using the 'GetFormFactors' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="FormFactor"/> entity instances.</returns>
        public EntityQuery<FormFactor> GetFormFactorsQuery()
        {
            this.ValidateMethod("GetFormFactorsQuery", null);
            return base.CreateQuery<FormFactor>("GetFormFactors", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="GPU"/> entity instances using the 'GetGPUs' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="GPU"/> entity instances.</returns>
        public EntityQuery<GPU> GetGPUsQuery()
        {
            this.ValidateMethod("GetGPUsQuery", null);
            return base.CreateQuery<GPU>("GetGPUs", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="GraphicChip"/> entity instances using the 'GetGraphicChips' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="GraphicChip"/> entity instances.</returns>
        public EntityQuery<GraphicChip> GetGraphicChipsQuery()
        {
            this.ValidateMethod("GetGraphicChipsQuery", null);
            return base.CreateQuery<GraphicChip>("GetGraphicChips", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="HardDrive"/> entity instances using the 'GetHardDrives' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="HardDrive"/> entity instances.</returns>
        public EntityQuery<HardDrive> GetHardDrivesQuery()
        {
            this.ValidateMethod("GetHardDrivesQuery", null);
            return base.CreateQuery<HardDrive>("GetHardDrives", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="Manufacturer"/> entity instances using the 'GetManufacturers' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="Manufacturer"/> entity instances.</returns>
        public EntityQuery<Manufacturer> GetManufacturersQuery()
        {
            this.ValidateMethod("GetManufacturersQuery", null);
            return base.CreateQuery<Manufacturer>("GetManufacturers", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="Memory"/> entity instances using the 'GetMemorys' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="Memory"/> entity instances.</returns>
        public EntityQuery<Memory> GetMemorysQuery()
        {
            this.ValidateMethod("GetMemorysQuery", null);
            return base.CreateQuery<Memory>("GetMemorys", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="MemoryType"/> entity instances using the 'GetMemoryTypes' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="MemoryType"/> entity instances.</returns>
        public EntityQuery<MemoryType> GetMemoryTypesQuery()
        {
            this.ValidateMethod("GetMemoryTypesQuery", null);
            return base.CreateQuery<MemoryType>("GetMemoryTypes", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="Motherboard"/> entity instances using the 'GetMotherboards' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="Motherboard"/> entity instances.</returns>
        public EntityQuery<Motherboard> GetMotherboardsQuery()
        {
            this.ValidateMethod("GetMotherboardsQuery", null);
            return base.CreateQuery<Motherboard>("GetMotherboards", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="PowerType"/> entity instances using the 'GetPowerTypes' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="PowerType"/> entity instances.</returns>
        public EntityQuery<PowerType> GetPowerTypesQuery()
        {
            this.ValidateMethod("GetPowerTypesQuery", null);
            return base.CreateQuery<PowerType>("GetPowerTypes", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="PSU"/> entity instances using the 'GetPSUs' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="PSU"/> entity instances.</returns>
        public EntityQuery<PSU> GetPSUsQuery()
        {
            this.ValidateMethod("GetPSUsQuery", null);
            return base.CreateQuery<PSU>("GetPSUs", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="Socket"/> entity instances using the 'GetSockets' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="Socket"/> entity instances.</returns>
        public EntityQuery<Socket> GetSocketsQuery()
        {
            this.ValidateMethod("GetSocketsQuery", null);
            return base.CreateQuery<Socket>("GetSockets", null, false, true);
        }
        
        /// <summary>
        /// Creates a new EntityContainer for this DomainContext's EntitySets.
        /// </summary>
        /// <returns>A new container instance.</returns>
        protected override EntityContainer CreateEntityContainer()
        {
            return new LeconDomainContextEntityContainer();
        }
        
        /// <summary>
        /// Service contract for the 'LeconDomainService' DomainService.
        /// </summary>
        [ServiceContract()]
        public interface ILeconDomainServiceContract
        {
            
            /// <summary>
            /// Asynchronously invokes the 'GetAssemblys' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/LeconDomainService/GetAssemblysDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/LeconDomainService/GetAssemblys", ReplyAction="http://tempuri.org/LeconDomainService/GetAssemblysResponse")]
            [WebGet()]
            IAsyncResult BeginGetAssemblys(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetAssemblys'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetAssemblys'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetAssemblys' operation.</returns>
            QueryResult<Assembly> EndGetAssemblys(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetBodys' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/LeconDomainService/GetBodysDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/LeconDomainService/GetBodys", ReplyAction="http://tempuri.org/LeconDomainService/GetBodysResponse")]
            [WebGet()]
            IAsyncResult BeginGetBodys(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetBodys'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetBodys'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetBodys' operation.</returns>
            QueryResult<Body> EndGetBodys(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetChipsets' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/LeconDomainService/GetChipsetsDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/LeconDomainService/GetChipsets", ReplyAction="http://tempuri.org/LeconDomainService/GetChipsetsResponse")]
            [WebGet()]
            IAsyncResult BeginGetChipsets(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetChipsets'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetChipsets'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetChipsets' operation.</returns>
            QueryResult<Chipset> EndGetChipsets(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetCoolers' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/LeconDomainService/GetCoolersDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/LeconDomainService/GetCoolers", ReplyAction="http://tempuri.org/LeconDomainService/GetCoolersResponse")]
            [WebGet()]
            IAsyncResult BeginGetCoolers(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetCoolers'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetCoolers'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetCoolers' operation.</returns>
            QueryResult<Cooler> EndGetCoolers(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetCPUs' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/LeconDomainService/GetCPUsDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/LeconDomainService/GetCPUs", ReplyAction="http://tempuri.org/LeconDomainService/GetCPUsResponse")]
            [WebGet()]
            IAsyncResult BeginGetCPUs(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetCPUs'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetCPUs'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetCPUs' operation.</returns>
            QueryResult<CPU> EndGetCPUs(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetDevices' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/LeconDomainService/GetDevicesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/LeconDomainService/GetDevices", ReplyAction="http://tempuri.org/LeconDomainService/GetDevicesResponse")]
            [WebGet()]
            IAsyncResult BeginGetDevices(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetDevices'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetDevices'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetDevices' operation.</returns>
            QueryResult<Device> EndGetDevices(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetDeviceTypes' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/LeconDomainService/GetDeviceTypesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/LeconDomainService/GetDeviceTypes", ReplyAction="http://tempuri.org/LeconDomainService/GetDeviceTypesResponse")]
            [WebGet()]
            IAsyncResult BeginGetDeviceTypes(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetDeviceTypes'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetDeviceTypes'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetDeviceTypes' operation.</returns>
            QueryResult<DeviceType> EndGetDeviceTypes(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetFormFactors' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/LeconDomainService/GetFormFactorsDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/LeconDomainService/GetFormFactors", ReplyAction="http://tempuri.org/LeconDomainService/GetFormFactorsResponse")]
            [WebGet()]
            IAsyncResult BeginGetFormFactors(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetFormFactors'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetFormFactors'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetFormFactors' operation.</returns>
            QueryResult<FormFactor> EndGetFormFactors(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetGPUs' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/LeconDomainService/GetGPUsDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/LeconDomainService/GetGPUs", ReplyAction="http://tempuri.org/LeconDomainService/GetGPUsResponse")]
            [WebGet()]
            IAsyncResult BeginGetGPUs(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetGPUs'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetGPUs'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetGPUs' operation.</returns>
            QueryResult<GPU> EndGetGPUs(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetGraphicChips' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/LeconDomainService/GetGraphicChipsDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/LeconDomainService/GetGraphicChips", ReplyAction="http://tempuri.org/LeconDomainService/GetGraphicChipsResponse")]
            [WebGet()]
            IAsyncResult BeginGetGraphicChips(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetGraphicChips'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetGraphicChips'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetGraphicChips' operation.</returns>
            QueryResult<GraphicChip> EndGetGraphicChips(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetHardDrives' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/LeconDomainService/GetHardDrivesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/LeconDomainService/GetHardDrives", ReplyAction="http://tempuri.org/LeconDomainService/GetHardDrivesResponse")]
            [WebGet()]
            IAsyncResult BeginGetHardDrives(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetHardDrives'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetHardDrives'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetHardDrives' operation.</returns>
            QueryResult<HardDrive> EndGetHardDrives(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetManufacturers' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/LeconDomainService/GetManufacturersDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/LeconDomainService/GetManufacturers", ReplyAction="http://tempuri.org/LeconDomainService/GetManufacturersResponse")]
            [WebGet()]
            IAsyncResult BeginGetManufacturers(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetManufacturers'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetManufacturers'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetManufacturers' operation.</returns>
            QueryResult<Manufacturer> EndGetManufacturers(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetMemorys' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/LeconDomainService/GetMemorysDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/LeconDomainService/GetMemorys", ReplyAction="http://tempuri.org/LeconDomainService/GetMemorysResponse")]
            [WebGet()]
            IAsyncResult BeginGetMemorys(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetMemorys'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetMemorys'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetMemorys' operation.</returns>
            QueryResult<Memory> EndGetMemorys(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetMemoryTypes' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/LeconDomainService/GetMemoryTypesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/LeconDomainService/GetMemoryTypes", ReplyAction="http://tempuri.org/LeconDomainService/GetMemoryTypesResponse")]
            [WebGet()]
            IAsyncResult BeginGetMemoryTypes(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetMemoryTypes'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetMemoryTypes'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetMemoryTypes' operation.</returns>
            QueryResult<MemoryType> EndGetMemoryTypes(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetMotherboards' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/LeconDomainService/GetMotherboardsDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/LeconDomainService/GetMotherboards", ReplyAction="http://tempuri.org/LeconDomainService/GetMotherboardsResponse")]
            [WebGet()]
            IAsyncResult BeginGetMotherboards(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetMotherboards'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetMotherboards'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetMotherboards' operation.</returns>
            QueryResult<Motherboard> EndGetMotherboards(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetPowerTypes' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/LeconDomainService/GetPowerTypesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/LeconDomainService/GetPowerTypes", ReplyAction="http://tempuri.org/LeconDomainService/GetPowerTypesResponse")]
            [WebGet()]
            IAsyncResult BeginGetPowerTypes(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetPowerTypes'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetPowerTypes'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetPowerTypes' operation.</returns>
            QueryResult<PowerType> EndGetPowerTypes(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetPSUs' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/LeconDomainService/GetPSUsDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/LeconDomainService/GetPSUs", ReplyAction="http://tempuri.org/LeconDomainService/GetPSUsResponse")]
            [WebGet()]
            IAsyncResult BeginGetPSUs(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetPSUs'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetPSUs'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetPSUs' operation.</returns>
            QueryResult<PSU> EndGetPSUs(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetSockets' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/LeconDomainService/GetSocketsDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/LeconDomainService/GetSockets", ReplyAction="http://tempuri.org/LeconDomainService/GetSocketsResponse")]
            [WebGet()]
            IAsyncResult BeginGetSockets(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetSockets'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetSockets'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetSockets' operation.</returns>
            QueryResult<Socket> EndGetSockets(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'SubmitChanges' operation.
            /// </summary>
            /// <param name="changeSet">The change-set to submit.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/LeconDomainService/SubmitChangesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/LeconDomainService/SubmitChanges", ReplyAction="http://tempuri.org/LeconDomainService/SubmitChangesResponse")]
            IAsyncResult BeginSubmitChanges(IEnumerable<ChangeSetEntry> changeSet, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginSubmitChanges'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginSubmitChanges'.</param>
            /// <returns>The collection of change-set entry elements returned from 'SubmitChanges'.</returns>
            IEnumerable<ChangeSetEntry> EndSubmitChanges(IAsyncResult result);
        }
        
        internal sealed class LeconDomainContextEntityContainer : EntityContainer
        {
            
            public LeconDomainContextEntityContainer()
            {
                this.CreateEntitySet<Assembly>(EntitySetOperations.All);
                this.CreateEntitySet<Body>(EntitySetOperations.All);
                this.CreateEntitySet<Chipset>(EntitySetOperations.All);
                this.CreateEntitySet<Cooler>(EntitySetOperations.All);
                this.CreateEntitySet<CPU>(EntitySetOperations.All);
                this.CreateEntitySet<Device>(EntitySetOperations.All);
                this.CreateEntitySet<DeviceType>(EntitySetOperations.All);
                this.CreateEntitySet<FormFactor>(EntitySetOperations.All);
                this.CreateEntitySet<GPU>(EntitySetOperations.All);
                this.CreateEntitySet<GraphicChip>(EntitySetOperations.All);
                this.CreateEntitySet<HardDrive>(EntitySetOperations.All);
                this.CreateEntitySet<Manufacturer>(EntitySetOperations.All);
                this.CreateEntitySet<Memory>(EntitySetOperations.All);
                this.CreateEntitySet<MemoryType>(EntitySetOperations.All);
                this.CreateEntitySet<Motherboard>(EntitySetOperations.All);
                this.CreateEntitySet<PowerType>(EntitySetOperations.All);
                this.CreateEntitySet<PSU>(EntitySetOperations.All);
                this.CreateEntitySet<Socket>(EntitySetOperations.All);
            }
        }
    }
    
    /// <summary>
    /// The 'Manufacturer' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/Lecon.Web")]
    public sealed partial class Manufacturer : Entity
    {
        
        private EntityCollection<Device> _devices;
        
        private int _id;
        
        private string _name;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnIdChanging(int value);
        partial void OnIdChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="Manufacturer"/> class.
        /// </summary>
        public Manufacturer()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="Device"/> entity instances.
        /// </summary>
        [Association("Manufacturer_Device", "Id", "ManufacturerId")]
        [XmlIgnore()]
        public EntityCollection<Device> Devices
        {
            get
            {
                if ((this._devices == null))
                {
                    this._devices = new EntityCollection<Device>(this, "Devices", this.FilterDevices, this.AttachDevices, this.DetachDevices);
                }
                return this._devices;
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Id' value.
        /// </summary>
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int Id
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    this.OnIdChanging(value);
                    this.ValidateProperty("Id", value);
                    this._id = value;
                    this.RaisePropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Name' value.
        /// </summary>
        [DataMember()]
        [Required()]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                if ((this._name != value))
                {
                    this.OnNameChanging(value);
                    this.RaiseDataMemberChanging("Name");
                    this.ValidateProperty("Name", value);
                    this._name = value;
                    this.RaiseDataMemberChanged("Name");
                    this.OnNameChanged();
                }
            }
        }
        
        private void AttachDevices(Device entity)
        {
            entity.Manufacturer = this;
        }
        
        private void DetachDevices(Device entity)
        {
            entity.Manufacturer = null;
        }
        
        private bool FilterDevices(Device entity)
        {
            return (entity.ManufacturerId == this.Id);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._id;
        }
    }
    
    /// <summary>
    /// The 'Memory' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/Lecon.Web")]
    public sealed partial class Memory : Entity
    {
        
        private EntityCollection<Assembly> _assemblys;
        
        private EntityRef<Device> _device;
        
        private int _deviceId;
        
        private short _frequency;
        
        private int _id;
        
        private EntityRef<MemoryType> _memoryType;
        
        private int _memoryTypeId;
        
        private short _size;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnDeviceIdChanging(int value);
        partial void OnDeviceIdChanged();
        partial void OnFrequencyChanging(short value);
        partial void OnFrequencyChanged();
        partial void OnIdChanging(int value);
        partial void OnIdChanged();
        partial void OnMemoryTypeIdChanging(int value);
        partial void OnMemoryTypeIdChanged();
        partial void OnSizeChanging(short value);
        partial void OnSizeChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="Memory"/> class.
        /// </summary>
        public Memory()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="Assembly"/> entity instances.
        /// </summary>
        [Association("Memory_Assembly", "Id", "MemoryId")]
        [XmlIgnore()]
        public EntityCollection<Assembly> Assemblys
        {
            get
            {
                if ((this._assemblys == null))
                {
                    this._assemblys = new EntityCollection<Assembly>(this, "Assemblys", this.FilterAssemblys, this.AttachAssemblys, this.DetachAssemblys);
                }
                return this._assemblys;
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Device"/> entity.
        /// </summary>
        [Association("Device_Memory", "DeviceId", "Id", IsForeignKey=true)]
        [XmlIgnore()]
        public Device Device
        {
            get
            {
                if ((this._device == null))
                {
                    this._device = new EntityRef<Device>(this, "Device", this.FilterDevice);
                }
                return this._device.Entity;
            }
            set
            {
                Device previous = this.Device;
                if ((previous != value))
                {
                    this.ValidateProperty("Device", value);
                    if ((previous != null))
                    {
                        this._device.Entity = null;
                        previous.Memorys.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.DeviceId = value.Id;
                    }
                    else
                    {
                        this.DeviceId = default(int);
                    }
                    this._device.Entity = value;
                    if ((value != null))
                    {
                        value.Memorys.Add(this);
                    }
                    this.RaisePropertyChanged("Device");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'DeviceId' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public int DeviceId
        {
            get
            {
                return this._deviceId;
            }
            set
            {
                if ((this._deviceId != value))
                {
                    this.OnDeviceIdChanging(value);
                    this.RaiseDataMemberChanging("DeviceId");
                    this.ValidateProperty("DeviceId", value);
                    this._deviceId = value;
                    this.RaiseDataMemberChanged("DeviceId");
                    this.OnDeviceIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Frequency' value.
        /// </summary>
        [DataMember()]
        public short Frequency
        {
            get
            {
                return this._frequency;
            }
            set
            {
                if ((this._frequency != value))
                {
                    this.OnFrequencyChanging(value);
                    this.RaiseDataMemberChanging("Frequency");
                    this.ValidateProperty("Frequency", value);
                    this._frequency = value;
                    this.RaiseDataMemberChanged("Frequency");
                    this.OnFrequencyChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Id' value.
        /// </summary>
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int Id
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    this.OnIdChanging(value);
                    this.ValidateProperty("Id", value);
                    this._id = value;
                    this.RaisePropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="MemoryType"/> entity.
        /// </summary>
        [Association("MemoryType_Memory", "MemoryTypeId", "Id", IsForeignKey=true)]
        [XmlIgnore()]
        public MemoryType MemoryType
        {
            get
            {
                if ((this._memoryType == null))
                {
                    this._memoryType = new EntityRef<MemoryType>(this, "MemoryType", this.FilterMemoryType);
                }
                return this._memoryType.Entity;
            }
            set
            {
                MemoryType previous = this.MemoryType;
                if ((previous != value))
                {
                    this.ValidateProperty("MemoryType", value);
                    if ((previous != null))
                    {
                        this._memoryType.Entity = null;
                        previous.Memorys.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.MemoryTypeId = value.Id;
                    }
                    else
                    {
                        this.MemoryTypeId = default(int);
                    }
                    this._memoryType.Entity = value;
                    if ((value != null))
                    {
                        value.Memorys.Add(this);
                    }
                    this.RaisePropertyChanged("MemoryType");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'MemoryTypeId' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public int MemoryTypeId
        {
            get
            {
                return this._memoryTypeId;
            }
            set
            {
                if ((this._memoryTypeId != value))
                {
                    this.OnMemoryTypeIdChanging(value);
                    this.RaiseDataMemberChanging("MemoryTypeId");
                    this.ValidateProperty("MemoryTypeId", value);
                    this._memoryTypeId = value;
                    this.RaiseDataMemberChanged("MemoryTypeId");
                    this.OnMemoryTypeIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Size' value.
        /// </summary>
        [DataMember()]
        public short Size
        {
            get
            {
                return this._size;
            }
            set
            {
                if ((this._size != value))
                {
                    this.OnSizeChanging(value);
                    this.RaiseDataMemberChanging("Size");
                    this.ValidateProperty("Size", value);
                    this._size = value;
                    this.RaiseDataMemberChanged("Size");
                    this.OnSizeChanged();
                }
            }
        }
        
        private void AttachAssemblys(Assembly entity)
        {
            entity.Memory = this;
        }
        
        private void DetachAssemblys(Assembly entity)
        {
            entity.Memory = null;
        }
        
        private bool FilterAssemblys(Assembly entity)
        {
            return (entity.MemoryId == this.Id);
        }
        
        private bool FilterDevice(Device entity)
        {
            return (entity.Id == this.DeviceId);
        }
        
        private bool FilterMemoryType(MemoryType entity)
        {
            return (entity.Id == this.MemoryTypeId);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._id;
        }
    }
    
    /// <summary>
    /// The 'MemoryType' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/Lecon.Web")]
    public sealed partial class MemoryType : Entity
    {
        
        private int _id;
        
        private EntityCollection<Memory> _memorys;
        
        private EntityCollection<Motherboard> _motherboard;
        
        private string _name;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnIdChanging(int value);
        partial void OnIdChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="MemoryType"/> class.
        /// </summary>
        public MemoryType()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'Id' value.
        /// </summary>
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int Id
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    this.OnIdChanging(value);
                    this.ValidateProperty("Id", value);
                    this._id = value;
                    this.RaisePropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="Memory"/> entity instances.
        /// </summary>
        [Association("MemoryType_Memory", "Id", "MemoryTypeId")]
        [XmlIgnore()]
        public EntityCollection<Memory> Memorys
        {
            get
            {
                if ((this._memorys == null))
                {
                    this._memorys = new EntityCollection<Memory>(this, "Memorys", this.FilterMemorys, this.AttachMemorys, this.DetachMemorys);
                }
                return this._memorys;
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="Motherboard"/> entity instances.
        /// </summary>
        [Association("MemoryType_Motherboard", "Id", "MemoryTypeId")]
        [XmlIgnore()]
        public EntityCollection<Motherboard> Motherboard
        {
            get
            {
                if ((this._motherboard == null))
                {
                    this._motherboard = new EntityCollection<Motherboard>(this, "Motherboard", this.FilterMotherboard, this.AttachMotherboard, this.DetachMotherboard);
                }
                return this._motherboard;
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Name' value.
        /// </summary>
        [DataMember()]
        [Required()]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                if ((this._name != value))
                {
                    this.OnNameChanging(value);
                    this.RaiseDataMemberChanging("Name");
                    this.ValidateProperty("Name", value);
                    this._name = value;
                    this.RaiseDataMemberChanged("Name");
                    this.OnNameChanged();
                }
            }
        }
        
        private void AttachMemorys(Memory entity)
        {
            entity.MemoryType = this;
        }
        
        private void DetachMemorys(Memory entity)
        {
            entity.MemoryType = null;
        }
        
        private bool FilterMemorys(Memory entity)
        {
            return (entity.MemoryTypeId == this.Id);
        }
        
        private void AttachMotherboard(Motherboard entity)
        {
            entity.MemoryType = this;
        }
        
        private void DetachMotherboard(Motherboard entity)
        {
            entity.MemoryType = null;
        }
        
        private bool FilterMotherboard(Motherboard entity)
        {
            return (entity.MemoryTypeId == this.Id);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._id;
        }
    }
    
    /// <summary>
    /// The 'Motherboard' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/Lecon.Web")]
    public sealed partial class Motherboard : Entity
    {
        
        private EntityCollection<Assembly> _assemblys;
        
        private EntityRef<Chipset> _chipset;
        
        private int _chipsetId;
        
        private EntityRef<Device> _device;
        
        private int _deviceId;
        
        private EntityRef<FormFactor> _formFactor;
        
        private int _formFactorId;
        
        private short _frequency;
        
        private EntityRef<GPU> _gpu;
        
        private Nullable<int> _gpuId;
        
        private int _id;
        
        private EntityRef<MemoryType> _memoryType;
        
        private int _memoryTypeId;
        
        private EntityRef<PowerType> _powerType;
        
        private int _powerTypeId;
        
        private short _sata;
        
        private EntityRef<Socket> _socket;
        
        private int _socketId;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnChipsetIdChanging(int value);
        partial void OnChipsetIdChanged();
        partial void OnDeviceIdChanging(int value);
        partial void OnDeviceIdChanged();
        partial void OnFormFactorIdChanging(int value);
        partial void OnFormFactorIdChanged();
        partial void OnFrequencyChanging(short value);
        partial void OnFrequencyChanged();
        partial void OnGPUIdChanging(Nullable<int> value);
        partial void OnGPUIdChanged();
        partial void OnIdChanging(int value);
        partial void OnIdChanged();
        partial void OnMemoryTypeIdChanging(int value);
        partial void OnMemoryTypeIdChanged();
        partial void OnPowerTypeIdChanging(int value);
        partial void OnPowerTypeIdChanged();
        partial void OnSATAChanging(short value);
        partial void OnSATAChanged();
        partial void OnSocketIdChanging(int value);
        partial void OnSocketIdChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="Motherboard"/> class.
        /// </summary>
        public Motherboard()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="Assembly"/> entity instances.
        /// </summary>
        [Association("Motherboard_Assembly", "Id", "MotherBoardId")]
        [XmlIgnore()]
        public EntityCollection<Assembly> Assemblys
        {
            get
            {
                if ((this._assemblys == null))
                {
                    this._assemblys = new EntityCollection<Assembly>(this, "Assemblys", this.FilterAssemblys, this.AttachAssemblys, this.DetachAssemblys);
                }
                return this._assemblys;
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Chipset"/> entity.
        /// </summary>
        [Association("Chipset_Motherboard", "ChipsetId", "Id", IsForeignKey=true)]
        [XmlIgnore()]
        public Chipset Chipset
        {
            get
            {
                if ((this._chipset == null))
                {
                    this._chipset = new EntityRef<Chipset>(this, "Chipset", this.FilterChipset);
                }
                return this._chipset.Entity;
            }
            set
            {
                Chipset previous = this.Chipset;
                if ((previous != value))
                {
                    this.ValidateProperty("Chipset", value);
                    if ((previous != null))
                    {
                        this._chipset.Entity = null;
                        previous.Motherboard.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.ChipsetId = value.Id;
                    }
                    else
                    {
                        this.ChipsetId = default(int);
                    }
                    this._chipset.Entity = value;
                    if ((value != null))
                    {
                        value.Motherboard.Add(this);
                    }
                    this.RaisePropertyChanged("Chipset");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ChipsetId' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public int ChipsetId
        {
            get
            {
                return this._chipsetId;
            }
            set
            {
                if ((this._chipsetId != value))
                {
                    this.OnChipsetIdChanging(value);
                    this.RaiseDataMemberChanging("ChipsetId");
                    this.ValidateProperty("ChipsetId", value);
                    this._chipsetId = value;
                    this.RaiseDataMemberChanged("ChipsetId");
                    this.OnChipsetIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Device"/> entity.
        /// </summary>
        [Association("Device_Motherboard", "DeviceId", "Id", IsForeignKey=true)]
        [XmlIgnore()]
        public Device Device
        {
            get
            {
                if ((this._device == null))
                {
                    this._device = new EntityRef<Device>(this, "Device", this.FilterDevice);
                }
                return this._device.Entity;
            }
            set
            {
                Device previous = this.Device;
                if ((previous != value))
                {
                    this.ValidateProperty("Device", value);
                    if ((previous != null))
                    {
                        this._device.Entity = null;
                        previous.Motherboards.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.DeviceId = value.Id;
                    }
                    else
                    {
                        this.DeviceId = default(int);
                    }
                    this._device.Entity = value;
                    if ((value != null))
                    {
                        value.Motherboards.Add(this);
                    }
                    this.RaisePropertyChanged("Device");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'DeviceId' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public int DeviceId
        {
            get
            {
                return this._deviceId;
            }
            set
            {
                if ((this._deviceId != value))
                {
                    this.OnDeviceIdChanging(value);
                    this.RaiseDataMemberChanging("DeviceId");
                    this.ValidateProperty("DeviceId", value);
                    this._deviceId = value;
                    this.RaiseDataMemberChanged("DeviceId");
                    this.OnDeviceIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="FormFactor"/> entity.
        /// </summary>
        [Association("FormFactor_Motherboard", "FormFactorId", "Id", IsForeignKey=true)]
        [XmlIgnore()]
        public FormFactor FormFactor
        {
            get
            {
                if ((this._formFactor == null))
                {
                    this._formFactor = new EntityRef<FormFactor>(this, "FormFactor", this.FilterFormFactor);
                }
                return this._formFactor.Entity;
            }
            set
            {
                FormFactor previous = this.FormFactor;
                if ((previous != value))
                {
                    this.ValidateProperty("FormFactor", value);
                    if ((previous != null))
                    {
                        this._formFactor.Entity = null;
                        previous.Motherboards.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.FormFactorId = value.Id;
                    }
                    else
                    {
                        this.FormFactorId = default(int);
                    }
                    this._formFactor.Entity = value;
                    if ((value != null))
                    {
                        value.Motherboards.Add(this);
                    }
                    this.RaisePropertyChanged("FormFactor");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'FormFactorId' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public int FormFactorId
        {
            get
            {
                return this._formFactorId;
            }
            set
            {
                if ((this._formFactorId != value))
                {
                    this.OnFormFactorIdChanging(value);
                    this.RaiseDataMemberChanging("FormFactorId");
                    this.ValidateProperty("FormFactorId", value);
                    this._formFactorId = value;
                    this.RaiseDataMemberChanged("FormFactorId");
                    this.OnFormFactorIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Frequency' value.
        /// </summary>
        [DataMember()]
        public short Frequency
        {
            get
            {
                return this._frequency;
            }
            set
            {
                if ((this._frequency != value))
                {
                    this.OnFrequencyChanging(value);
                    this.RaiseDataMemberChanging("Frequency");
                    this.ValidateProperty("Frequency", value);
                    this._frequency = value;
                    this.RaiseDataMemberChanged("Frequency");
                    this.OnFrequencyChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="GPU"/> entity.
        /// </summary>
        [Association("GPU_Motherboard", "GPUId", "Id", IsForeignKey=true)]
        [XmlIgnore()]
        public GPU GPU
        {
            get
            {
                if ((this._gpu == null))
                {
                    this._gpu = new EntityRef<GPU>(this, "GPU", this.FilterGPU);
                }
                return this._gpu.Entity;
            }
            set
            {
                GPU previous = this.GPU;
                if ((previous != value))
                {
                    this.ValidateProperty("GPU", value);
                    if ((previous != null))
                    {
                        this._gpu.Entity = null;
                        previous.Motherboards.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.GPUId = value.Id;
                    }
                    else
                    {
                        this.GPUId = default(Nullable<int>);
                    }
                    this._gpu.Entity = value;
                    if ((value != null))
                    {
                        value.Motherboards.Add(this);
                    }
                    this.RaisePropertyChanged("GPU");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'GPUId' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public Nullable<int> GPUId
        {
            get
            {
                return this._gpuId;
            }
            set
            {
                if ((this._gpuId != value))
                {
                    this.OnGPUIdChanging(value);
                    this.RaiseDataMemberChanging("GPUId");
                    this.ValidateProperty("GPUId", value);
                    this._gpuId = value;
                    this.RaiseDataMemberChanged("GPUId");
                    this.OnGPUIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Id' value.
        /// </summary>
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int Id
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    this.OnIdChanging(value);
                    this.ValidateProperty("Id", value);
                    this._id = value;
                    this.RaisePropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="MemoryType"/> entity.
        /// </summary>
        [Association("MemoryType_Motherboard", "MemoryTypeId", "Id", IsForeignKey=true)]
        [XmlIgnore()]
        public MemoryType MemoryType
        {
            get
            {
                if ((this._memoryType == null))
                {
                    this._memoryType = new EntityRef<MemoryType>(this, "MemoryType", this.FilterMemoryType);
                }
                return this._memoryType.Entity;
            }
            set
            {
                MemoryType previous = this.MemoryType;
                if ((previous != value))
                {
                    this.ValidateProperty("MemoryType", value);
                    if ((previous != null))
                    {
                        this._memoryType.Entity = null;
                        previous.Motherboard.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.MemoryTypeId = value.Id;
                    }
                    else
                    {
                        this.MemoryTypeId = default(int);
                    }
                    this._memoryType.Entity = value;
                    if ((value != null))
                    {
                        value.Motherboard.Add(this);
                    }
                    this.RaisePropertyChanged("MemoryType");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'MemoryTypeId' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public int MemoryTypeId
        {
            get
            {
                return this._memoryTypeId;
            }
            set
            {
                if ((this._memoryTypeId != value))
                {
                    this.OnMemoryTypeIdChanging(value);
                    this.RaiseDataMemberChanging("MemoryTypeId");
                    this.ValidateProperty("MemoryTypeId", value);
                    this._memoryTypeId = value;
                    this.RaiseDataMemberChanged("MemoryTypeId");
                    this.OnMemoryTypeIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="PowerType"/> entity.
        /// </summary>
        [Association("PowerType_Motherboard", "PowerTypeId", "Id", IsForeignKey=true)]
        [XmlIgnore()]
        public PowerType PowerType
        {
            get
            {
                if ((this._powerType == null))
                {
                    this._powerType = new EntityRef<PowerType>(this, "PowerType", this.FilterPowerType);
                }
                return this._powerType.Entity;
            }
            set
            {
                PowerType previous = this.PowerType;
                if ((previous != value))
                {
                    this.ValidateProperty("PowerType", value);
                    if ((previous != null))
                    {
                        this._powerType.Entity = null;
                        previous.Motherboards.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.PowerTypeId = value.Id;
                    }
                    else
                    {
                        this.PowerTypeId = default(int);
                    }
                    this._powerType.Entity = value;
                    if ((value != null))
                    {
                        value.Motherboards.Add(this);
                    }
                    this.RaisePropertyChanged("PowerType");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'PowerTypeId' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public int PowerTypeId
        {
            get
            {
                return this._powerTypeId;
            }
            set
            {
                if ((this._powerTypeId != value))
                {
                    this.OnPowerTypeIdChanging(value);
                    this.RaiseDataMemberChanging("PowerTypeId");
                    this.ValidateProperty("PowerTypeId", value);
                    this._powerTypeId = value;
                    this.RaiseDataMemberChanged("PowerTypeId");
                    this.OnPowerTypeIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'SATA' value.
        /// </summary>
        [DataMember()]
        public short SATA
        {
            get
            {
                return this._sata;
            }
            set
            {
                if ((this._sata != value))
                {
                    this.OnSATAChanging(value);
                    this.RaiseDataMemberChanging("SATA");
                    this.ValidateProperty("SATA", value);
                    this._sata = value;
                    this.RaiseDataMemberChanged("SATA");
                    this.OnSATAChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Socket"/> entity.
        /// </summary>
        [Association("Socket_Motherboard", "SocketId", "Id", IsForeignKey=true)]
        [XmlIgnore()]
        public Socket Socket
        {
            get
            {
                if ((this._socket == null))
                {
                    this._socket = new EntityRef<Socket>(this, "Socket", this.FilterSocket);
                }
                return this._socket.Entity;
            }
            set
            {
                Socket previous = this.Socket;
                if ((previous != value))
                {
                    this.ValidateProperty("Socket", value);
                    if ((previous != null))
                    {
                        this._socket.Entity = null;
                        previous.Motherboards.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.SocketId = value.Id;
                    }
                    else
                    {
                        this.SocketId = default(int);
                    }
                    this._socket.Entity = value;
                    if ((value != null))
                    {
                        value.Motherboards.Add(this);
                    }
                    this.RaisePropertyChanged("Socket");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'SocketId' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public int SocketId
        {
            get
            {
                return this._socketId;
            }
            set
            {
                if ((this._socketId != value))
                {
                    this.OnSocketIdChanging(value);
                    this.RaiseDataMemberChanging("SocketId");
                    this.ValidateProperty("SocketId", value);
                    this._socketId = value;
                    this.RaiseDataMemberChanged("SocketId");
                    this.OnSocketIdChanged();
                }
            }
        }
        
        private void AttachAssemblys(Assembly entity)
        {
            entity.Motherboard = this;
        }
        
        private void DetachAssemblys(Assembly entity)
        {
            entity.Motherboard = null;
        }
        
        private bool FilterAssemblys(Assembly entity)
        {
            return (entity.MotherBoardId == this.Id);
        }
        
        private bool FilterChipset(Chipset entity)
        {
            return (entity.Id == this.ChipsetId);
        }
        
        private bool FilterDevice(Device entity)
        {
            return (entity.Id == this.DeviceId);
        }
        
        private bool FilterFormFactor(FormFactor entity)
        {
            return (entity.Id == this.FormFactorId);
        }
        
        private bool FilterGPU(GPU entity)
        {
            return (entity.Id == this.GPUId);
        }
        
        private bool FilterMemoryType(MemoryType entity)
        {
            return (entity.Id == this.MemoryTypeId);
        }
        
        private bool FilterPowerType(PowerType entity)
        {
            return (entity.Id == this.PowerTypeId);
        }
        
        private bool FilterSocket(Socket entity)
        {
            return (entity.Id == this.SocketId);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._id;
        }
    }
    
    /// <summary>
    /// The 'PowerType' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/Lecon.Web")]
    public sealed partial class PowerType : Entity
    {
        
        private EntityCollection<Cooler> _coolers;
        
        private EntityCollection<HardDrive> _hardDrives;
        
        private int _id;
        
        private EntityCollection<Motherboard> _motherboards;
        
        private string _name;
        
        private EntityCollection<PSU> _psUs;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnIdChanging(int value);
        partial void OnIdChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="PowerType"/> class.
        /// </summary>
        public PowerType()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="Cooler"/> entity instances.
        /// </summary>
        [Association("PowerType_Cooler", "Id", "PowerTypeId")]
        [XmlIgnore()]
        public EntityCollection<Cooler> Coolers
        {
            get
            {
                if ((this._coolers == null))
                {
                    this._coolers = new EntityCollection<Cooler>(this, "Coolers", this.FilterCoolers, this.AttachCoolers, this.DetachCoolers);
                }
                return this._coolers;
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="HardDrive"/> entity instances.
        /// </summary>
        [Association("PowerType_HardDrive", "Id", "PowerTypeId")]
        [XmlIgnore()]
        public EntityCollection<HardDrive> HardDrives
        {
            get
            {
                if ((this._hardDrives == null))
                {
                    this._hardDrives = new EntityCollection<HardDrive>(this, "HardDrives", this.FilterHardDrives, this.AttachHardDrives, this.DetachHardDrives);
                }
                return this._hardDrives;
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Id' value.
        /// </summary>
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int Id
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    this.OnIdChanging(value);
                    this.ValidateProperty("Id", value);
                    this._id = value;
                    this.RaisePropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="Motherboard"/> entity instances.
        /// </summary>
        [Association("PowerType_Motherboard", "Id", "PowerTypeId")]
        [XmlIgnore()]
        public EntityCollection<Motherboard> Motherboards
        {
            get
            {
                if ((this._motherboards == null))
                {
                    this._motherboards = new EntityCollection<Motherboard>(this, "Motherboards", this.FilterMotherboards, this.AttachMotherboards, this.DetachMotherboards);
                }
                return this._motherboards;
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Name' value.
        /// </summary>
        [DataMember()]
        [Required()]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                if ((this._name != value))
                {
                    this.OnNameChanging(value);
                    this.RaiseDataMemberChanging("Name");
                    this.ValidateProperty("Name", value);
                    this._name = value;
                    this.RaiseDataMemberChanged("Name");
                    this.OnNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="PSU"/> entity instances.
        /// </summary>
        [Association("PowerType_PSU", "Id", "PowerTypeId")]
        [XmlIgnore()]
        public EntityCollection<PSU> PSUs
        {
            get
            {
                if ((this._psUs == null))
                {
                    this._psUs = new EntityCollection<PSU>(this, "PSUs", this.FilterPSUs, this.AttachPSUs, this.DetachPSUs);
                }
                return this._psUs;
            }
        }
        
        private void AttachCoolers(Cooler entity)
        {
            entity.PowerType = this;
        }
        
        private void DetachCoolers(Cooler entity)
        {
            entity.PowerType = null;
        }
        
        private bool FilterCoolers(Cooler entity)
        {
            return (entity.PowerTypeId == this.Id);
        }
        
        private void AttachHardDrives(HardDrive entity)
        {
            entity.PowerType = this;
        }
        
        private void DetachHardDrives(HardDrive entity)
        {
            entity.PowerType = null;
        }
        
        private bool FilterHardDrives(HardDrive entity)
        {
            return (entity.PowerTypeId == this.Id);
        }
        
        private void AttachMotherboards(Motherboard entity)
        {
            entity.PowerType = this;
        }
        
        private void DetachMotherboards(Motherboard entity)
        {
            entity.PowerType = null;
        }
        
        private bool FilterMotherboards(Motherboard entity)
        {
            return (entity.PowerTypeId == this.Id);
        }
        
        private void AttachPSUs(PSU entity)
        {
            entity.PowerType = this;
        }
        
        private void DetachPSUs(PSU entity)
        {
            entity.PowerType = null;
        }
        
        private bool FilterPSUs(PSU entity)
        {
            return (entity.PowerTypeId == this.Id);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._id;
        }
    }
    
    /// <summary>
    /// The 'PSU' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/Lecon.Web")]
    public sealed partial class PSU : Entity
    {
        
        private EntityCollection<Assembly> _assemblys;
        
        private EntityRef<Device> _device;
        
        private int _deviceId;
        
        private EntityRef<FormFactor> _formFactor;
        
        private int _formFactorId;
        
        private int _id;
        
        private short _ide;
        
        private EntityRef<PowerType> _powerType;
        
        private int _powerTypeId;
        
        private short _sata;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnDeviceIdChanging(int value);
        partial void OnDeviceIdChanged();
        partial void OnFormFactorIdChanging(int value);
        partial void OnFormFactorIdChanged();
        partial void OnIdChanging(int value);
        partial void OnIdChanged();
        partial void OnIDEChanging(short value);
        partial void OnIDEChanged();
        partial void OnPowerTypeIdChanging(int value);
        partial void OnPowerTypeIdChanged();
        partial void OnSATAChanging(short value);
        partial void OnSATAChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="PSU"/> class.
        /// </summary>
        public PSU()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="Assembly"/> entity instances.
        /// </summary>
        [Association("PSU_Assembly", "Id", "PSUId")]
        [XmlIgnore()]
        public EntityCollection<Assembly> Assemblys
        {
            get
            {
                if ((this._assemblys == null))
                {
                    this._assemblys = new EntityCollection<Assembly>(this, "Assemblys", this.FilterAssemblys, this.AttachAssemblys, this.DetachAssemblys);
                }
                return this._assemblys;
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Device"/> entity.
        /// </summary>
        [Association("Device_PSU", "DeviceId", "Id", IsForeignKey=true)]
        [XmlIgnore()]
        public Device Device
        {
            get
            {
                if ((this._device == null))
                {
                    this._device = new EntityRef<Device>(this, "Device", this.FilterDevice);
                }
                return this._device.Entity;
            }
            set
            {
                Device previous = this.Device;
                if ((previous != value))
                {
                    this.ValidateProperty("Device", value);
                    if ((previous != null))
                    {
                        this._device.Entity = null;
                        previous.PSUs.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.DeviceId = value.Id;
                    }
                    else
                    {
                        this.DeviceId = default(int);
                    }
                    this._device.Entity = value;
                    if ((value != null))
                    {
                        value.PSUs.Add(this);
                    }
                    this.RaisePropertyChanged("Device");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'DeviceId' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public int DeviceId
        {
            get
            {
                return this._deviceId;
            }
            set
            {
                if ((this._deviceId != value))
                {
                    this.OnDeviceIdChanging(value);
                    this.RaiseDataMemberChanging("DeviceId");
                    this.ValidateProperty("DeviceId", value);
                    this._deviceId = value;
                    this.RaiseDataMemberChanged("DeviceId");
                    this.OnDeviceIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="FormFactor"/> entity.
        /// </summary>
        [Association("FormFactor_PSU", "FormFactorId", "Id", IsForeignKey=true)]
        [XmlIgnore()]
        public FormFactor FormFactor
        {
            get
            {
                if ((this._formFactor == null))
                {
                    this._formFactor = new EntityRef<FormFactor>(this, "FormFactor", this.FilterFormFactor);
                }
                return this._formFactor.Entity;
            }
            set
            {
                FormFactor previous = this.FormFactor;
                if ((previous != value))
                {
                    this.ValidateProperty("FormFactor", value);
                    if ((previous != null))
                    {
                        this._formFactor.Entity = null;
                        previous.PSUs.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.FormFactorId = value.Id;
                    }
                    else
                    {
                        this.FormFactorId = default(int);
                    }
                    this._formFactor.Entity = value;
                    if ((value != null))
                    {
                        value.PSUs.Add(this);
                    }
                    this.RaisePropertyChanged("FormFactor");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'FormFactorId' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public int FormFactorId
        {
            get
            {
                return this._formFactorId;
            }
            set
            {
                if ((this._formFactorId != value))
                {
                    this.OnFormFactorIdChanging(value);
                    this.RaiseDataMemberChanging("FormFactorId");
                    this.ValidateProperty("FormFactorId", value);
                    this._formFactorId = value;
                    this.RaiseDataMemberChanged("FormFactorId");
                    this.OnFormFactorIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Id' value.
        /// </summary>
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int Id
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    this.OnIdChanging(value);
                    this.ValidateProperty("Id", value);
                    this._id = value;
                    this.RaisePropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'IDE' value.
        /// </summary>
        [DataMember()]
        public short IDE
        {
            get
            {
                return this._ide;
            }
            set
            {
                if ((this._ide != value))
                {
                    this.OnIDEChanging(value);
                    this.RaiseDataMemberChanging("IDE");
                    this.ValidateProperty("IDE", value);
                    this._ide = value;
                    this.RaiseDataMemberChanged("IDE");
                    this.OnIDEChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="PowerType"/> entity.
        /// </summary>
        [Association("PowerType_PSU", "PowerTypeId", "Id", IsForeignKey=true)]
        [XmlIgnore()]
        public PowerType PowerType
        {
            get
            {
                if ((this._powerType == null))
                {
                    this._powerType = new EntityRef<PowerType>(this, "PowerType", this.FilterPowerType);
                }
                return this._powerType.Entity;
            }
            set
            {
                PowerType previous = this.PowerType;
                if ((previous != value))
                {
                    this.ValidateProperty("PowerType", value);
                    if ((previous != null))
                    {
                        this._powerType.Entity = null;
                        previous.PSUs.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.PowerTypeId = value.Id;
                    }
                    else
                    {
                        this.PowerTypeId = default(int);
                    }
                    this._powerType.Entity = value;
                    if ((value != null))
                    {
                        value.PSUs.Add(this);
                    }
                    this.RaisePropertyChanged("PowerType");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'PowerTypeId' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public int PowerTypeId
        {
            get
            {
                return this._powerTypeId;
            }
            set
            {
                if ((this._powerTypeId != value))
                {
                    this.OnPowerTypeIdChanging(value);
                    this.RaiseDataMemberChanging("PowerTypeId");
                    this.ValidateProperty("PowerTypeId", value);
                    this._powerTypeId = value;
                    this.RaiseDataMemberChanged("PowerTypeId");
                    this.OnPowerTypeIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'SATA' value.
        /// </summary>
        [DataMember()]
        public short SATA
        {
            get
            {
                return this._sata;
            }
            set
            {
                if ((this._sata != value))
                {
                    this.OnSATAChanging(value);
                    this.RaiseDataMemberChanging("SATA");
                    this.ValidateProperty("SATA", value);
                    this._sata = value;
                    this.RaiseDataMemberChanged("SATA");
                    this.OnSATAChanged();
                }
            }
        }
        
        private void AttachAssemblys(Assembly entity)
        {
            entity.PSU = this;
        }
        
        private void DetachAssemblys(Assembly entity)
        {
            entity.PSU = null;
        }
        
        private bool FilterAssemblys(Assembly entity)
        {
            return (entity.PSUId == this.Id);
        }
        
        private bool FilterDevice(Device entity)
        {
            return (entity.Id == this.DeviceId);
        }
        
        private bool FilterFormFactor(FormFactor entity)
        {
            return (entity.Id == this.FormFactorId);
        }
        
        private bool FilterPowerType(PowerType entity)
        {
            return (entity.Id == this.PowerTypeId);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._id;
        }
    }
    
    /// <summary>
    /// The 'RegistrationData' class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/Lecon.Web")]
    public sealed partial class RegistrationData : ComplexObject
    {
        
        private string _answer;
        
        private string _email;
        
        private string _friendlyName;
        
        private string _question;
        
        private string _userName;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnAnswerChanging(string value);
        partial void OnAnswerChanged();
        partial void OnEmailChanging(string value);
        partial void OnEmailChanged();
        partial void OnFriendlyNameChanging(string value);
        partial void OnFriendlyNameChanged();
        partial void OnQuestionChanging(string value);
        partial void OnQuestionChanged();
        partial void OnUserNameChanging(string value);
        partial void OnUserNameChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="RegistrationData"/> class.
        /// </summary>
        public RegistrationData()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'Answer' value.
        /// </summary>
        [DataMember()]
        [Display(Name="SecurityAnswerLabel", Order=6, ResourceType=typeof(RegistrationDataResources))]
        [Required(ErrorMessageResourceName="ValidationErrorRequiredField", ErrorMessageResourceType=typeof(ValidationErrorResources))]
        [StringLength(128, ErrorMessageResourceName="ValidationErrorBadAnswerLength", ErrorMessageResourceType=typeof(ValidationErrorResources))]
        public string Answer
        {
            get
            {
                return this._answer;
            }
            set
            {
                if ((this._answer != value))
                {
                    this.OnAnswerChanging(value);
                    this.RaiseDataMemberChanging("Answer");
                    this.ValidateProperty("Answer", value);
                    this._answer = value;
                    this.RaiseDataMemberChanged("Answer");
                    this.OnAnswerChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Email' value.
        /// </summary>
        [DataMember()]
        [Display(Name="EmailLabel", Order=2, ResourceType=typeof(RegistrationDataResources))]
        [RegularExpression("^([\\w-\\.]+)@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.)|(([\\w-]+\\.)+))([a-zA-Z]{2,4" +
            "}|[0-9]{1,3})(\\]?)$", ErrorMessageResourceName="ValidationErrorInvalidEmail", ErrorMessageResourceType=typeof(ValidationErrorResources))]
        [Required(ErrorMessageResourceName="ValidationErrorRequiredField", ErrorMessageResourceType=typeof(ValidationErrorResources))]
        public string Email
        {
            get
            {
                return this._email;
            }
            set
            {
                if ((this._email != value))
                {
                    this.OnEmailChanging(value);
                    this.RaiseDataMemberChanging("Email");
                    this.ValidateProperty("Email", value);
                    this._email = value;
                    this.RaiseDataMemberChanged("Email");
                    this.OnEmailChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'FriendlyName' value.
        /// </summary>
        [DataMember()]
        [Display(Description="FriendlyNameDescription", Name="FriendlyNameLabel", Order=1, ResourceType=typeof(RegistrationDataResources))]
        [StringLength(255, ErrorMessageResourceName="ValidationErrorBadFriendlyNameLength", ErrorMessageResourceType=typeof(ValidationErrorResources))]
        public string FriendlyName
        {
            get
            {
                return this._friendlyName;
            }
            set
            {
                if ((this._friendlyName != value))
                {
                    this.OnFriendlyNameChanging(value);
                    this.RaiseDataMemberChanging("FriendlyName");
                    this.ValidateProperty("FriendlyName", value);
                    this._friendlyName = value;
                    this.RaiseDataMemberChanged("FriendlyName");
                    this.OnFriendlyNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Question' value.
        /// </summary>
        [DataMember()]
        [Display(Name="SecurityQuestionLabel", Order=5, ResourceType=typeof(RegistrationDataResources))]
        [Required(ErrorMessageResourceName="ValidationErrorRequiredField", ErrorMessageResourceType=typeof(ValidationErrorResources))]
        public string Question
        {
            get
            {
                return this._question;
            }
            set
            {
                if ((this._question != value))
                {
                    this.OnQuestionChanging(value);
                    this.RaiseDataMemberChanging("Question");
                    this.ValidateProperty("Question", value);
                    this._question = value;
                    this.RaiseDataMemberChanged("Question");
                    this.OnQuestionChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'UserName' value.
        /// </summary>
        [DataMember()]
        [Display(Name="UserNameLabel", Order=0, ResourceType=typeof(RegistrationDataResources))]
        [RegularExpression("^[a-zA-Z0-9_]*$", ErrorMessageResourceName="ValidationErrorInvalidUserName", ErrorMessageResourceType=typeof(ValidationErrorResources))]
        [Required(ErrorMessageResourceName="ValidationErrorRequiredField", ErrorMessageResourceType=typeof(ValidationErrorResources))]
        [StringLength(255, ErrorMessageResourceName="ValidationErrorBadUserNameLength", ErrorMessageResourceType=typeof(ValidationErrorResources), MinimumLength=4)]
        public string UserName
        {
            get
            {
                return this._userName;
            }
            set
            {
                if ((this._userName != value))
                {
                    this.OnUserNameChanging(value);
                    this.RaiseDataMemberChanging("UserName");
                    this.ValidateProperty("UserName", value);
                    this._userName = value;
                    this.RaiseDataMemberChanged("UserName");
                    this.OnUserNameChanged();
                }
            }
        }
    }
    
    /// <summary>
    /// The 'Socket' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/Lecon.Web")]
    public sealed partial class Socket : Entity
    {
        
        private EntityCollection<CPU> _cpUs;
        
        private int _id;
        
        private EntityCollection<Motherboard> _motherboards;
        
        private string _name;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnIdChanging(int value);
        partial void OnIdChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="Socket"/> class.
        /// </summary>
        public Socket()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="CPU"/> entity instances.
        /// </summary>
        [Association("Socket_CPU", "Id", "SocketId")]
        [XmlIgnore()]
        public EntityCollection<CPU> CPUs
        {
            get
            {
                if ((this._cpUs == null))
                {
                    this._cpUs = new EntityCollection<CPU>(this, "CPUs", this.FilterCPUs, this.AttachCPUs, this.DetachCPUs);
                }
                return this._cpUs;
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Id' value.
        /// </summary>
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int Id
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    this.OnIdChanging(value);
                    this.ValidateProperty("Id", value);
                    this._id = value;
                    this.RaisePropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="Motherboard"/> entity instances.
        /// </summary>
        [Association("Socket_Motherboard", "Id", "SocketId")]
        [XmlIgnore()]
        public EntityCollection<Motherboard> Motherboards
        {
            get
            {
                if ((this._motherboards == null))
                {
                    this._motherboards = new EntityCollection<Motherboard>(this, "Motherboards", this.FilterMotherboards, this.AttachMotherboards, this.DetachMotherboards);
                }
                return this._motherboards;
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Name' value.
        /// </summary>
        [DataMember()]
        [Required()]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                if ((this._name != value))
                {
                    this.OnNameChanging(value);
                    this.RaiseDataMemberChanging("Name");
                    this.ValidateProperty("Name", value);
                    this._name = value;
                    this.RaiseDataMemberChanged("Name");
                    this.OnNameChanged();
                }
            }
        }
        
        private void AttachCPUs(CPU entity)
        {
            entity.Socket = this;
        }
        
        private void DetachCPUs(CPU entity)
        {
            entity.Socket = null;
        }
        
        private bool FilterCPUs(CPU entity)
        {
            return (entity.SocketId == this.Id);
        }
        
        private void AttachMotherboards(Motherboard entity)
        {
            entity.Socket = this;
        }
        
        private void DetachMotherboards(Motherboard entity)
        {
            entity.Socket = null;
        }
        
        private bool FilterMotherboards(Motherboard entity)
        {
            return (entity.SocketId == this.Id);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._id;
        }
    }
    
    /// <summary>
    /// The 'User' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/Lecon.Web")]
    public sealed partial class User : Entity, global::System.Security.Principal.IIdentity, global::System.Security.Principal.IPrincipal
    {
        
        private string _friendlyName;
        
        private string _name = string.Empty;
        
        private IEnumerable<string> _roles;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnFriendlyNameChanging(string value);
        partial void OnFriendlyNameChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        partial void OnRolesChanging(IEnumerable<string> value);
        partial void OnRolesChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="User"/> class.
        /// </summary>
        public User()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'FriendlyName' value.
        /// </summary>
        [DataMember()]
        public string FriendlyName
        {
            get
            {
                return this._friendlyName;
            }
            set
            {
                if ((this._friendlyName != value))
                {
                    this.OnFriendlyNameChanging(value);
                    this.RaiseDataMemberChanging("FriendlyName");
                    this.ValidateProperty("FriendlyName", value);
                    this._friendlyName = value;
                    this.RaiseDataMemberChanged("FriendlyName");
                    this.OnFriendlyNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Name' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                if ((this._name != value))
                {
                    this.OnNameChanging(value);
                    this.ValidateProperty("Name", value);
                    this._name = value;
                    this.RaisePropertyChanged("Name");
                    this.OnNameChanged();
                    this.RaisePropertyChanged("IsAuthenticated");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Roles' value.
        /// </summary>
        [DataMember()]
        [Editable(false)]
        public IEnumerable<string> Roles
        {
            get
            {
                return this._roles;
            }
            set
            {
                if ((this._roles != value))
                {
                    this.OnRolesChanging(value);
                    this.ValidateProperty("Roles", value);
                    this._roles = value;
                    this.RaisePropertyChanged("Roles");
                    this.OnRolesChanged();
                }
            }
        }
        
        string global::System.Security.Principal.IIdentity.AuthenticationType
        {
            get
            {
                return string.Empty;
            }
        }
        
        /// <summary>
        /// Gets a value indicating whether the identity is authenticated.
        /// </summary>
        /// <remarks>
        /// This value is <c>true</c> if <see cref="Name"/> is not <c>null</c> or empty.
        /// </remarks>
        public bool IsAuthenticated
        {
            get
            {
                return (true != string.IsNullOrEmpty(this.Name));
            }
        }
        
        string global::System.Security.Principal.IIdentity.Name
        {
            get
            {
                return this.Name;
            }
        }
        
        global::System.Security.Principal.IIdentity global::System.Security.Principal.IPrincipal.Identity
        {
            get
            {
                return this;
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._name;
        }
        
        /// <summary>
        /// Return whether the principal is in the role.
        /// </summary>
        /// <remarks>
        /// Returns whether the specified role is contained in the roles.
        /// This implementation is case sensitive.
        /// </remarks>
        /// <param name="role">The name of the role for which to check membership.</param>
        /// <returns>Whether the principal is in the role.</returns>
        public bool IsInRole(string role)
        {
            if ((this.Roles == null))
            {
                return false;
            }
            return global::System.Linq.Enumerable.Contains(this.Roles, role);
        }
    }
    
    /// <summary>
    /// The DomainContext corresponding to the 'UserRegistrationService' DomainService.
    /// </summary>
    public sealed partial class UserRegistrationContext : DomainContext
    {
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="UserRegistrationContext"/> class.
        /// </summary>
        public UserRegistrationContext() : 
                this(new WebDomainClient<IUserRegistrationServiceContract>(new Uri("Lecon-Web-UserRegistrationService.svc", UriKind.Relative)))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="UserRegistrationContext"/> class with the specified service URI.
        /// </summary>
        /// <param name="serviceUri">The UserRegistrationService service URI.</param>
        public UserRegistrationContext(Uri serviceUri) : 
                this(new WebDomainClient<IUserRegistrationServiceContract>(serviceUri))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="UserRegistrationContext"/> class with the specified <paramref name="domainClient"/>.
        /// </summary>
        /// <param name="domainClient">The DomainClient instance to use for this DomainContext.</param>
        public UserRegistrationContext(DomainClient domainClient) : 
                base(domainClient)
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Asynchronously invokes the 'CreateUser' method of the DomainService.
        /// </summary>
        /// <param name="user">The value for the 'user' parameter of this action.</param>
        /// <param name="password">The value for the 'password' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<CreateUserStatus> CreateUser(RegistrationData user, [RegularExpression("^.*[^a-zA-Z0-9].*$", ErrorMessageResourceName="ValidationErrorBadPasswordStrength", ErrorMessageResourceType=typeof(ValidationErrorResources))] [Required(ErrorMessageResourceName="ValidationErrorRequiredField", ErrorMessageResourceType=typeof(ValidationErrorResources))] [StringLength(50, ErrorMessageResourceName="ValidationErrorBadPasswordLength", ErrorMessageResourceType=typeof(ValidationErrorResources), MinimumLength=7)] string password, Action<InvokeOperation<CreateUserStatus>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("user", user);
            parameters.Add("password", password);
            this.ValidateMethod("CreateUser", parameters);
            return ((InvokeOperation<CreateUserStatus>)(this.InvokeOperation("CreateUser", typeof(CreateUserStatus), parameters, true, callback, userState)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'CreateUser' method of the DomainService.
        /// </summary>
        /// <param name="user">The value for the 'user' parameter of this action.</param>
        /// <param name="password">The value for the 'password' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<CreateUserStatus> CreateUser(RegistrationData user, [RegularExpression("^.*[^a-zA-Z0-9].*$", ErrorMessageResourceName="ValidationErrorBadPasswordStrength", ErrorMessageResourceType=typeof(ValidationErrorResources))] [Required(ErrorMessageResourceName="ValidationErrorRequiredField", ErrorMessageResourceType=typeof(ValidationErrorResources))] [StringLength(50, ErrorMessageResourceName="ValidationErrorBadPasswordLength", ErrorMessageResourceType=typeof(ValidationErrorResources), MinimumLength=7)] string password)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("user", user);
            parameters.Add("password", password);
            this.ValidateMethod("CreateUser", parameters);
            return ((InvokeOperation<CreateUserStatus>)(this.InvokeOperation("CreateUser", typeof(CreateUserStatus), parameters, true, null, null)));
        }
        
        /// <summary>
        /// Creates a new EntityContainer for this DomainContext's EntitySets.
        /// </summary>
        /// <returns>A new container instance.</returns>
        protected override EntityContainer CreateEntityContainer()
        {
            return new UserRegistrationContextEntityContainer();
        }
        
        /// <summary>
        /// Service contract for the 'UserRegistrationService' DomainService.
        /// </summary>
        [ServiceContract()]
        public interface IUserRegistrationServiceContract
        {
            
            /// <summary>
            /// Asynchronously invokes the 'CreateUser' operation.
            /// </summary>
            /// <param name="user">The value for the 'user' parameter of this action.</param>
            /// <param name="password">The value for the 'password' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/UserRegistrationService/CreateUserDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/UserRegistrationService/CreateUser", ReplyAction="http://tempuri.org/UserRegistrationService/CreateUserResponse")]
            IAsyncResult BeginCreateUser(RegistrationData user, string password, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginCreateUser'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginCreateUser'.</param>
            /// <returns>The 'CreateUserStatus' returned from the 'CreateUser' operation.</returns>
            CreateUserStatus EndCreateUser(IAsyncResult result);
        }
        
        internal sealed class UserRegistrationContextEntityContainer : EntityContainer
        {
            
            public UserRegistrationContextEntityContainer()
            {
            }
        }
    }
}
